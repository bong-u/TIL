<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>🧠|Algorithm on Bong-u's TIL</title><link>https://bong-u.github.io/til/algorithm/</link><description>Recent content in 🧠|Algorithm on Bong-u's TIL</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://bong-u.github.io/til/algorithm/index.xml" rel="self" type="application/rss+xml"/><item><title>프로그래머스 - 주차 요금 계산(L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EC%A3%BC%EC%B0%A8_%EC%9A%94%EA%B8%88_%EA%B3%84%EC%82%B0/</link><pubDate>Fri, 11 Aug 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EC%A3%BC%EC%B0%A8_%EC%9A%94%EA%B8%88_%EA%B3%84%EC%82%B0/</guid><description>import math def diff(start, end): sh, sm = map(int, start.split(&amp;#39;:&amp;#39;)) eh, em = map(int, end.split(&amp;#39;:&amp;#39;)) return (eh*60+em) - (sh*60+sm) def calc(time, baseTime, baseFee, unitTime, unitFee): if time &amp;lt; baseTime: return baseFee time -= baseTime return baseFee + math.ceil(time/unitTime)*unitFee def solution(fees, records): cars = {} for i in records: time, car_num, _ = i.split(&amp;#39; &amp;#39;) # 새로 입차 한 경우 if not car_num in cars: cars[car_num] = [0, time] else: # 출차 후 다시 입차한 경우 if cars[car_num][1] == &amp;#39;&amp;#39;: cars[car_num][1] = time # 출차한 경우 else: cars[car_num][0] += diff(cars[car_num][1], time) cars[car_num][1] = &amp;#39;&amp;#39; # 아직 출차하지 않은 차량들에 대해 23:59에 출차한 것으로 간주 for num in cars: if cars[num][1] !</description></item><item><title>프로그래머스 - 양궁대회 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EC%96%91%EA%B6%81%EB%8C%80%ED%9A%8C/</link><pubDate>Thu, 10 Aug 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EC%96%91%EA%B6%81%EB%8C%80%ED%9A%8C/</guid><description>def solution(n, info): # 각각 몇 번 맞춰야 점수를 얻는지 저장하였다 goal_list = [i+1 for i in info] cases = [] def dfs(score, cnt, case): # 몇 번째 점수인지 나타낸다 (0:10점, 1:9점, ...) length = len(case) if length == 11: # 화살 개수가 남았다면 0점에 채워준다 if cnt != n: case[-1] += n-cnt cases.append((score, case)) return # 현재 단계에서 몇 점 맞아야 점수를 따는지를 나타낸다 goal = goal_list[length] # 점수를 따는 경우 if cnt + goal &amp;lt;= n: # 딴 점수를 더해준다 dfs(score+(10-length), cnt+goal, case+[goal]) # 상대가 점수를 따는 경우 if goal !</description></item><item><title>프로그래머스 - 두 큐 합 같게 만들기 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EB%91%90_%ED%81%90_%ED%95%A9_%EA%B0%99%EA%B2%8C_%EB%A7%8C%EB%93%A4%EA%B8%B0/</link><pubDate>Wed, 09 Aug 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EB%91%90_%ED%81%90_%ED%95%A9_%EA%B0%99%EA%B2%8C_%EB%A7%8C%EB%93%A4%EA%B8%B0/</guid><description>from collections import deque def solution(queue1, queue2): sum1, sum2 = sum(queue1), sum(queue2) dq1 = deque(queue1) dq2 = deque(queue2) cnt = 0 while cnt &amp;lt;= len(queue1)*2+1 and sum1 != sum2: if sum1 &amp;gt; sum2: tmp = dq1.popleft() dq2.append(tmp) sum1 -= tmp sum2 += tmp elif sum1 &amp;lt; sum2: tmp = dq2.popleft() dq1.append(tmp) sum1 += tmp sum2 -= tmp cnt += 1 return cnt if sum1 == sum2 else -1 문제 길이가 같은 두 큐가 주어진다 두 큐의 합이 같아지도록 큐의 원소를 교환할 수 있는 최소 횟수를 구하라 큐의 pop은 왼쪽에서, push는 오른쪽에서 이루어진다 TC input queue1 : [3, 2, 7, 2], queue2 : [4 ,6, 5, 1]</description></item><item><title>프로그래머스 - 할인 행사 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%ED%95%A0%EC%9D%B8_%ED%96%89%EC%82%AC/</link><pubDate>Tue, 08 Aug 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%ED%95%A0%EC%9D%B8_%ED%96%89%EC%82%AC/</guid><description>from collections import deque def solution(want, number, discount): want_dict = dict() answer = 0 for i in range(len(want)): want_dict[want[i]] = number[i] for i in discount[:10]: if i in want_dict: want_dict[i] -= 1 for i in range(0, len(discount)-9): if all(map(lambda x: x &amp;lt;= 0, want_dict.values())): answer += 1 if discount[i] in want_dict: want_dict[discount[i]] += 1 if i+10 &amp;lt; len(discount) and discount[i+10] in want_dict: want_dict[discount[i+10]] -= 1 return answer 문제 XYZ마트에서는 회원에 가입하면 10일동안 할인혜택을 받는다 할인하는 제품은 하루에 하나씩만 구매할 수 있다 정현이가 원하는 제품 리스트, 원하는 제품의 수량 리스트, 마트에서 할인하는 제품 리스트가 주어진다 정현이가 원하는 제품을 모두 할인 받을 수 있는 회원 등록 날짜의 수를 구하라 TC input want: [&amp;ldquo;banana&amp;rdquo;, &amp;ldquo;apple&amp;rdquo;, &amp;ldquo;rice&amp;rdquo;, &amp;ldquo;pork&amp;rdquo;, &amp;ldquo;pot&amp;rdquo;]</description></item><item><title>프로그래머스 - 혼자 놀기의 달인 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%ED%98%BC%EC%9E%90_%EB%86%80%EA%B8%B0%EC%9D%98_%EB%8B%AC%EC%9D%B8/</link><pubDate>Mon, 07 Aug 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%ED%98%BC%EC%9E%90_%EB%86%80%EA%B8%B0%EC%9D%98_%EB%8B%AC%EC%9D%B8/</guid><description>def solution(cards): length = len(cards) visited = [False] * length answer = [] for i in range(length): cnt = 0 cur = i while not visited[cur-1]: visited[cur-1] = True cur = cards[cur-1] cnt += 1 if cnt != 0: answer.append(cnt) if len(answer) &amp;lt;= 1: return 0 answer.sort(reverse=True) return answer[0]*answer[1] 문제 주어진 배열 cards를 순회한다 cards[i]번째 원소를 방문한다, 이미 방문한 원소인 경우 그만한다 한번 이어서 방문한 원소를 그룹화한다고 할 때, 두 그룹의 원소개수의 곱의 최대값을 구하라 TC input [8,6,3,7,2,5,1,4]</description></item><item><title>프로그래머스 - 연속 수열 합의 개수 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EC%97%B0%EC%86%8D_%EB%B6%80%EB%B6%84_%EC%88%98%EC%97%B4_%ED%95%A9%EC%9D%98_%EA%B0%9C%EC%88%98/</link><pubDate>Sun, 06 Aug 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EC%97%B0%EC%86%8D_%EB%B6%80%EB%B6%84_%EC%88%98%EC%97%B4_%ED%95%A9%EC%9D%98_%EA%B0%9C%EC%88%98/</guid><description>첫번째 풀이 def solution(elements): result = set() length = len(elements) elements = elements*2 for i in range(length): temp = 0 for j in range(length): temp += elements[i+j] result.add(temp) return len(result) 개선한 풀이 def solution(elements): result = set() length = len(elements) for i in range(length): temp = 0 for j in range(length): temp += elements[(i+j)%length] result.add(temp) return len(result) 문제 주어진 정수 배열로 원형 수열을 만든다 원형 수열의 연속된 부분 수열의 합의 개수를 구하여라 TC input [7,9,1,1,4]</description></item><item><title>프로그래머스 - 택배상자 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%ED%83%9D%EB%B0%B0%EC%83%81%EC%9E%90/</link><pubDate>Fri, 04 Aug 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%ED%83%9D%EB%B0%B0%EC%83%81%EC%9E%90/</guid><description>def solution(order): answer = 0 length = len(order) stackA = [i for i in range(length, 0, -1)] stackB = [] for i in order: while True: if stackA and stackA[-1] == i: stackA.pop() break if stackB and stackB[-1] == i: stackB.pop() break if stackB and stackB[-1] &amp;gt; i: return answer stackB.append(stackA.pop()) answer += 1 return answer 문제 원하는 상자 순서를 나타내는 정수배열 order가 주어진다 컨베이어 벨트에 [N&amp;hellip; 3, 2, 1]와 같이 박스가 놓여있다 박스는 1번 상자부터 순차적으로 뺄 수 있다 뺀 상자를 잠깐 보조 컨베이어 벨트에 보관할 수 있다 보조 컨베이어 벨트는 스택과 같이 FILO가 적용된다 순서대로 상자를 싣지 못하면, 그만둔다 박스를 order에 맞게 몇 개까지 실을 수 있는지 구하라 TC input [4, 3, 1, 2, 5]</description></item><item><title>프로그래머스 - 롤케이크 자르기 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EB%A1%A4%EC%BC%80%EC%9D%B4%ED%81%AC_%EC%9E%90%EB%A5%B4%EA%B8%B0/</link><pubDate>Thu, 03 Aug 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EB%A1%A4%EC%BC%80%EC%9D%B4%ED%81%AC_%EC%9E%90%EB%A5%B4%EA%B8%B0/</guid><description>def solution(topping): answer = 0 length = len(topping) toppingA = [] toppingB = [] setA = set() setB = set() for i in range(length-1): setA.add(topping[i]) setB.add(topping[length-i-1]) toppingA.append(len(setA)) toppingB.append(len(setB)) toppingB = toppingB[::-1] for i in range(length-1): if toppingA[i] == toppingB[i]: answer+=1 return answer 문제 롤케이크 위에 올려진 토핑번호의 정수 배열 topping이 주어진다 롤케이크를 잘랐을 때, 두 조각의 토핑 종류를 똑같이 만드는 방법의 수를 구하라 TC input [1, 2, 1, 3, 1, 4, 1, 2]</description></item><item><title>프로그래머스 - 우박수열 정적분 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EC%9A%B0%EB%B0%95%EC%88%98%EC%97%B4_%EC%A0%95%EC%A0%81%EB%B6%84/</link><pubDate>Tue, 01 Aug 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EC%9A%B0%EB%B0%95%EC%88%98%EC%97%B4_%EC%A0%95%EC%A0%81%EB%B6%84/</guid><description>def solution(k, ranges): answer = [] seq = [k] section = [0] while k &amp;gt; 1: if k%2 == 0: k = k//2 else: k = k*3+1 seq.append(k) for i in range(0, len(seq)-1): a, b = seq[i], seq[i+1] if a &amp;gt; b: a, b = b, a section.append((b-a)/2+a) if len(section) != 0: section[-1] += section[-2] for i in ranges: a, b = i[0], len(seq)+i[1]-1 if a &amp;gt; b: answer.append(-1.0) else: answer.</description></item><item><title>프로그래머스 - 숫자 카드 나누기 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EC%88%AB%EC%9E%90_%EC%B9%B4%EB%93%9C_%EB%82%98%EB%88%84%EA%B8%B0/</link><pubDate>Mon, 31 Jul 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EC%88%AB%EC%9E%90_%EC%B9%B4%EB%93%9C_%EB%82%98%EB%88%84%EA%B8%B0/</guid><description>첫번째 통과한 풀이
import math def gcd(a, b): while b &amp;gt; 0: a, b = b, a%b return a def gcdOfArr(l): result = l[0] for i in range(1, len(l)): result = gcd(result, l[i]) return result def solution(arrayA, arrayB): a1 = gcdOfArr(arrayA) for i in arrayB: if i % a1 == 0: a1 = 0 break a2 = gcdOfArr(arrayB) for i in arrayA: if i % a2 == 0: a2 = 0 break return max(a1, a2) 개선한 풀이</description></item><item><title>프로그래머스 - 귤 고르기 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EA%B7%A4_%EA%B3%A0%EB%A5%B4%EA%B8%B0/</link><pubDate>Fri, 28 Jul 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EA%B7%A4_%EA%B3%A0%EB%A5%B4%EA%B8%B0/</guid><description>def solution(k, tangerine): D = {} for i in tangerine: if i in D: D[i] += 1 else: D[i] = 1 D = sorted(D.items(), key=lambda x: -x[1]) answer = 0 for _, num in D: k -= num answer += 1 if k &amp;lt;= 0: break return answer 문제 귤의 개수 k와 귤의 개수를 담은 배열 tangerine이 주어진다 귤 k개를 고를 때, 크기가 서로 다른 종류의 수의 최소값을 구하라 TC input k: 6, tangerine: [1, 3, 2, 5, 4, 5, 2, 3]</description></item><item><title>프로그래머스 - 점 찍기 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EC%A0%90_%EC%B0%8D%EA%B8%B0/</link><pubDate>Thu, 27 Jul 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EC%A0%90_%EC%B0%8D%EA%B8%B0/</guid><description>import math def solution(k, d): answer = 0 for x in range(0, d+1, k): a = math.floor((d**2-x**2)**0.5) // k + 1 answer += a return answer 문제 2차원 좌표 평면에서 (xk (x=0,1,2,3&amp;hellip;), yk (y=0,1,2,3&amp;hellip;)) 지점에 점을 찍는다 원점과의 거리가 d가 넘으면 점을 찍지 않는다 k와 d가 주어질 때, 점이 총 몇 개 찍히는지 구하라 TC input k:2, d:4
ouput 6
해결방법 반지름이 d인 원안에 (k의 배수, k의 배수)점을 몇 개 찍을 수 있는지 구했다</description></item><item><title>프로그래머스 - 디펜스 게임 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EB%94%94%ED%8E%9C%EC%8A%A4_%EA%B2%8C%EC%9E%84/</link><pubDate>Wed, 26 Jul 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EB%94%94%ED%8E%9C%EC%8A%A4_%EA%B2%8C%EC%9E%84/</guid><description>import heapq def solution(n, k, enemy): heap = [] cnt = 0 for i in enemy: n -= i heapq.heappush(heap, -i) while n &amp;lt; 0: k -= 1 if not heap or k &amp;lt; 0: return cnt tmp = -heapq.heappop(heap) n += tmp cnt += 1 return cnt 문제 n: 가지고 있는 병사 수 k: 사용할 수 있는 무적권 스킬 수 enemy: 라운드마다 존재하는 적 수의 배열 라운드마다 enemy[i]명 만큼 소모하여 enemy[i]마리의 적을 막을 수 있다 무적권을 적절히 사용하여 버틸 수 있는 최대 라운드 수를 구하라 TC input n: 7, k: 3, enemy: [4, 2, 4, 5, 3, 3, 1]</description></item><item><title>프로그래머스 - 테이블 해시 함수 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%ED%85%8C%EC%9D%B4%EB%B8%94_%ED%95%B4%EC%8B%9C_%ED%95%A8%EC%88%98/</link><pubDate>Tue, 25 Jul 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%ED%85%8C%EC%9D%B4%EB%B8%94_%ED%95%B4%EC%8B%9C_%ED%95%A8%EC%88%98/</guid><description>def solution(data, col, row_begin, row_end): answer = 0 data.sort(key=lambda x: (x[col-1], -x[0])) s = [] for i in range(row_begin-1, row_end): s.append(sum(map(lambda x: x%(i+1), data[i]))) for i in s: answer ^= i return answer 문제 해시 함수는 col, row_begin, row_end을 입력으로 받는다 테이블의 튜플을 col번째 컬럼의 값을 기준으로 오름차순 정렬을 하되, 만약 그 값이 동일하면 기본키인 첫 번째 컬럼의 값을 기준으로 내림차순 정렬한다 정렬된 데이터에서 S_i를 i 번째 행의 튜플에 대해 각 컬럼의 값을 i 로 나눈 나머지들의 합으로 정의한다 row_begin ≤ i ≤ row_end 인 모든 S_i를 누적하여 bitwise XOR 한 값을 해시 값으로서 반환하라 TC input data: [[2,2,6],[1,5,10],[4,2,9],[3,8,3]]</description></item><item><title>프로그래머스 - 마법의 엘리베이터 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EB%A7%88%EB%B2%95%EC%9D%98_%EC%97%98%EB%A6%AC%EB%B2%A0%EC%9D%B4%ED%84%B0/</link><pubDate>Mon, 24 Jul 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EB%A7%88%EB%B2%95%EC%9D%98_%EC%97%98%EB%A6%AC%EB%B2%A0%EC%9D%B4%ED%84%B0/</guid><description>첫번째 BFS 풀이 from collections import deque def solution(storey): answer = 0 q = deque() q.append((storey, 0)) visited = [False] * (10**8+1) while q: cur, cnt = q.popleft() visited[cur] = True while cur != 0 and cur%10 == 0: cur = cur // 10 if cur == 0: answer = cnt break for j in [-1, 1]: dest = cur + j if 0 &amp;lt;= dest &amp;lt;= 10**8 and not visited[dest]: q.</description></item><item><title>프로그래머스 - 이모티콘 할인행사 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EC%9D%B4%EB%AA%A8%ED%8B%B0%EC%BD%98_%ED%95%A0%EC%9D%B8%ED%96%89%EC%82%AC/</link><pubDate>Sun, 23 Jul 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EC%9D%B4%EB%AA%A8%ED%8B%B0%EC%BD%98_%ED%95%A0%EC%9D%B8%ED%96%89%EC%82%AC/</guid><description>result = [] def dfs(size, percent, users, emoticons): global result if len(percent) == size: temp = [0] * len(users) for i in range(size): for j in range(len(users)): if percent[i]*100 &amp;gt;= users[j][0]: temp[j] += emoticons[i]*(1-percent[i]) serviceNum = 0 income = 0 for i in range(len(users)): if temp[i] &amp;gt;= users[i][1]: serviceNum += 1 else: income += temp[i] result.append ((serviceNum, income)) return for i in [0.1, 0.2, 0.3, 0.4]: dfs(size, percent+[i], users, emoticons) def solution(users, emoticons): dfs(len(emoticons), [], users, emoticons) result.</description></item><item><title>프로그래머스 - 택배 배달과 수거하기 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%ED%83%9D%EB%B0%B0_%EB%B0%B0%EB%8B%AC%EA%B3%BC_%EC%88%98%EA%B1%B0%ED%95%98%EA%B8%B0/</link><pubDate>Fri, 21 Jul 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%ED%83%9D%EB%B0%B0_%EB%B0%B0%EB%8B%AC%EA%B3%BC_%EC%88%98%EA%B1%B0%ED%95%98%EA%B8%B0/</guid><description>def solution(cap, n, deliveries, pickups): answer = 0 tempD = 0 tempP = 0 for i in range(n-1, -1, -1): tempD += deliveries[i] tempP += pickups[i] while tempD &amp;gt; 0 or tempP &amp;gt; 0: tempD -= cap tempP -= cap answer += (i+1)*2 return answer 문제 트럭에 실을 수 있는 재활용 택배 상자의 최대개수 cap, 배달할 집의 개수 n 택배 상자의 개수를 담은 deliveries, 재활용 택배 상자의 개수를 담은 pickups가 주어진다 트럭하나로 모든 배달과 수거를 마치고 돌아올 수 있는 최소 이동 거리를 구하라 TC input (cap, n, deliveries, pickups) 4, 5, [1, 0, 3, 1, 2], [0, 3, 0, 4, 0]</description></item><item><title>프로그래머스 - 시소 짝꿍 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EC%8B%9C%EC%86%8C_%EC%A7%9D%EA%BF%8D/</link><pubDate>Thu, 20 Jul 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EC%8B%9C%EC%86%8C_%EC%A7%9D%EA%BF%8D/</guid><description>def solution(weights): answer = 0 wdict = {} weights.sort(reverse=True) for i in weights: if i in wdict: answer += wdict[i] if i*3/2 in wdict: answer += wdict[i*3/2] if i*2 in wdict: answer += wdict[i*2] if i*4/3 in wdict: answer += wdict[i*4/3] wdict[i] = wdict[i]+1 if i in wdict else 1 return answer 문제 시소에는 중심으로부터 2m, 3m, 4m 떨어진 거리에 좌석이 존재한다 양쪽의 탑승한 사람의 무게와 시소 축과 좌석 간의 거리의 곱이 같아서 시소가 평행을 이룬다면 그 둘을 시소 짝꿍이라고 할 수 있다 사람들의 몸무게 배열이 주어질 때, 시소 짝꿍이 몇 쌍 존재하는지 구하라 TC input [100,180,360,100,270]</description></item><item><title>프로그래머스 - 숫자 변환하기 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EC%88%AB%EC%9E%90_%EB%B3%80%ED%99%98%ED%95%98%EA%B8%B0/</link><pubDate>Wed, 19 Jul 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EC%88%AB%EC%9E%90_%EB%B3%80%ED%99%98%ED%95%98%EA%B8%B0/</guid><description>from collections import deque def solution(x, y, n): q = deque() visited = [False] * 1000001 q.append((x, 0)) while q: cx, cnt = q.popleft() if cx == y: return cnt if cx + n &amp;lt;= y and not visited[cx+n]: q.append((cx+n, cnt+1)) visited[cx+n] = True if cx * 2 &amp;lt;= y and not visited[cx*2]: q.append((cx*2, cnt+1)) visited[cx*2] = True if cx * 3 &amp;lt;= y and not visited[cx*3]: q.append((cx*3, cnt+1)) visited[cx*3] = True return -1 문제 자연수 x를 y로 변환시킬려고 한다 할 수 있는 연산은 3가지 (x에 n을 곱한다, x에 2를 곱한다, x에 3을 곱한다) 필요한 최소 연산 횟수를 구하여라 TC input 10(x), 40(y), 5(n)</description></item><item><title>프로그래머스 - 뒤에 있는 큰 수 찾기 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EB%92%A4%EC%97%90_%EC%9E%88%EB%8A%94_%ED%81%B0_%EC%88%98_%EC%B0%BE%EA%B8%B0/</link><pubDate>Tue, 18 Jul 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EB%92%A4%EC%97%90_%EC%9E%88%EB%8A%94_%ED%81%B0_%EC%88%98_%EC%B0%BE%EA%B8%B0/</guid><description>def solution(numbers): stack = [] answer = [-1] * len(numbers) for i in range(len(numbers)): while stack and stack[-1][1] &amp;lt; numbers[i]: answer[stack[-1][0]] = numbers[i] stack.pop() stack.append((i, numbers[i])) print(stack) return answer 문제 정수로 이루어진 배열 numbers가 주어진다 자신 보다 뒤에 있는 숫자 중 가장 크면서 가까운 수를 뒷 큰수라고 한다 모든 원소에 대해서 뒷 큰수를 구하여라 (존재하지 않으면 -1) TC input [2, 3, 3, 5]
ouput [3, 5, 5, -1]</description></item><item><title>프로그래머스 - 무인도 여행 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EB%AC%B4%EC%9D%B8%EB%8F%84_%EC%97%AC%ED%96%89/</link><pubDate>Mon, 17 Jul 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EB%AC%B4%EC%9D%B8%EB%8F%84_%EC%97%AC%ED%96%89/</guid><description>from collections import deque vx = [0, 0, -1, 1] vy = [-1, 1, 0, 0] def solution(maps): N = len(maps) M = len(maps[0]) answer = [] visited = [[False]*M for _ in range(N)] for i in range(N): for j in range(M): if maps[i][j] != &amp;#39;X&amp;#39; and not visited[i][j]: cnt = 0 q = deque() q.append((j, i)) visited[i][j] = True while q: cx, cy = q.popleft() cnt += int(maps[cy][cx]) for k in range(4): nx = cx + vx[k] ny = cy + vy[k] if 0 &amp;lt;= nx &amp;lt; M and 0 &amp;lt;= ny &amp;lt; N and maps[ny][nx] !</description></item><item><title>프로그래머스 - 호텔 대실 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%ED%98%B8%ED%85%94_%EB%8C%80%EC%8B%A4/</link><pubDate>Sun, 16 Jul 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%ED%98%B8%ED%85%94_%EB%8C%80%EC%8B%A4/</guid><description>import heapq def time_calc(time): time_split = time.split(&amp;#39;:&amp;#39;) return int(time_split[0])*60 + int(time_split[1]) def solution(book_time): time = [] q = [] for start, end in book_time: time.append((time_calc(start), time_calc(end))) time.sort(key=lambda x: x[0]) print (time) for start, end in time: if q: top = heapq.heappop(q) if top &amp;gt; start: heapq.heappush(q, top) heapq.heappush(q, end+10) else: heapq.heappush(q, end+10) return len(q) 문제 호텔의 예약시간이 담긴 2차원 배열이 주어진다 ex) [[&amp;ldquo;12:00&amp;rdquo;, &amp;ldquo;12:30&amp;rdquo;], [&amp;ldquo;15:00&amp;rdquo;, &amp;ldquo;16:00&amp;rdquo;]] 퇴실 시간 10분 이후에 다음 손님이 입실 할 수 있다 최소 객실의 개수를 구하여라 TC input [[&amp;ldquo;15:00&amp;rdquo;, &amp;ldquo;17:00&amp;rdquo;], [&amp;ldquo;16:40&amp;rdquo;, &amp;ldquo;18:20&amp;rdquo;], [&amp;ldquo;14:20&amp;rdquo;, &amp;ldquo;15:20&amp;rdquo;], [&amp;ldquo;14:10&amp;rdquo;, &amp;ldquo;19:20&amp;rdquo;], [&amp;ldquo;18:20&amp;rdquo;, &amp;ldquo;21:20&amp;rdquo;]]</description></item><item><title>프로그래머스 - 미로 탈출 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EB%AF%B8%EB%A1%9C_%ED%83%88%EC%B6%9C/</link><pubDate>Fri, 14 Jul 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EB%AF%B8%EB%A1%9C_%ED%83%88%EC%B6%9C/</guid><description>from collections import deque vx = [0, 0, -1, 1] vy = [-1, 1, 0, 0] def bfs(maps, N, M, p1, p2): visited = [[False]*M for _ in range(N)] q = deque() q.append(list(p1)+[0]) while q: curY, curX, cnt = q.popleft() if p2 == (curY, curX): return cnt for i in range(4): x = curX + vx[i] y = curY + vy[i] if 0 &amp;lt;= x &amp;lt; M and 0 &amp;lt;= y &amp;lt; N and not visited[y][x] and maps[y][x] !</description></item><item><title>프로그래머스 - 혼자서 하는 틱택토 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%ED%98%BC%EC%9E%90%EC%84%9C_%ED%95%98%EB%8A%94_%ED%8B%B1%ED%83%9D%ED%86%A0/</link><pubDate>Thu, 13 Jul 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%ED%98%BC%EC%9E%90%EC%84%9C_%ED%95%98%EB%8A%94_%ED%8B%B1%ED%83%9D%ED%86%A0/</guid><description>V = [[(-1, 0), (1, 0)], [(0, -1), (0, 1)], [(-1, -1), (1, 1)], [(-1, 1), (1, -1)]] P = [[(1, 0), (1, 1), (1, 2)], [(0, 1), (1, 1), (2, 1)], [(1, 1)], [(1, 1)]] def solution(board): answer = -1 o_line = 0 x_line = 0 for i, p_list in enumerate(P): for p in p_list: if board[p[0]][p[1]] != &amp;#39;.&amp;#39; and board[p[0]][p[1]]== board[p[0]+V[i][0][0]][p[1]+V[i][0][1]] == board[p[0]+V[i][1][0]][p[1]+V[i][1][1]]: if board[p[0]][p[1]] == &amp;#39;O&amp;#39;: o_line += 1 elif board[p[0]][p[1]] == &amp;#39;X&amp;#39;: x_line += 1 o_cnt = 0 x_cnt = 0 for i in &amp;#39;&amp;#39;.</description></item><item><title>프로그래머스 - 당구 연습 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EB%8B%B9%EA%B5%AC_%EC%97%B0%EC%8A%B5/</link><pubDate>Wed, 12 Jul 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EB%8B%B9%EA%B5%AC_%EC%97%B0%EC%8A%B5/</guid><description>def solution(m, n, startX, startY, balls): answer = [] for bx, by in balls: tmp = [] for x, y in [(-1*startX, startY), (startX, -1*startY), (startX, 2*n-startY), (2*m-startX, startY)]: if bx==x and (y &amp;lt; 0 &amp;lt; by &amp;lt; startY or startY &amp;lt; by &amp;lt; n &amp;lt; y): continue if by==y and (x &amp;lt; 0 &amp;lt; bx &amp;lt; startX or startX &amp;lt; bx &amp;lt; m &amp;lt; x): continue tmp.append ((x-bx)**2+(y-by)**2) answer.append(min(tmp)) return answer 문제 수구와 적구의 좌표가 주어진다 원쿠션으로 적구를 맞히는데 필요한 최소한의 거리를 구하라 TC input 10, 10, 3, 7, [[7, 7], [2, 7], [7, 3]]</description></item><item><title>프로그래머스 - 리코쳇 로봇 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EB%A6%AC%EC%BD%94%EC%B3%87_%EB%A1%9C%EB%B4%87/</link><pubDate>Tue, 11 Jul 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EB%A6%AC%EC%BD%94%EC%B3%87_%EB%A1%9C%EB%B4%87/</guid><description>from collections import deque visited = [] vx = [0, 0, -1, 1] vy = [-1, 1, 0, 0] def bfs(board, N, M, sp): global visited q = deque() q.append(sp+[1]) while q: cy, cx, cnt = q.popleft() visited[cy][cx] = True for i in range(4): x = cx y = cy while True: x += vx[i] y += vy[i] if not (0 &amp;lt;= x &amp;lt; N and 0 &amp;lt;= y &amp;lt; M) or board[y][x] == &amp;#39;D&amp;#39;: x -= vx[i] y -= vy[i] break if board[y][x] == &amp;#39;G&amp;#39;: return cnt if not visited[y][x]: q.</description></item><item><title>프로그래머스 - 광물 캐기 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EA%B4%91%EB%AC%BC_%EC%BA%90%EA%B8%B0/</link><pubDate>Mon, 10 Jul 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EA%B4%91%EB%AC%BC_%EC%BA%90%EA%B8%B0/</guid><description>def solution(picks, minerals): bundles = [] tmp = [0, 0, 0] DATA = [[1, 1, 1], [5, 1, 1], [25, 5, 1]] answer = 0 for i in range(len(minerals)): if minerals[i] == &amp;#34;diamond&amp;#34;: for j in range(3): tmp[j] += DATA[j][0] elif minerals[i] == &amp;#34;iron&amp;#34;: for j in range(3): tmp[j] += DATA[j][1] elif minerals[i] == &amp;#34;stone&amp;#34;: for j in range(3): tmp[j] += DATA[j][2] if (i+1) % 5 == 0 or i == len(minerals)-1: bundles.</description></item><item><title>프로그래머스 - 과제 진행하기 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EA%B3%BC%EC%A0%9C_%EC%A7%84%ED%96%89%ED%95%98%EA%B8%B0/</link><pubDate>Fri, 07 Jul 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EA%B3%BC%EC%A0%9C_%EC%A7%84%ED%96%89%ED%95%98%EA%B8%B0/</guid><description>내 답안 def solution(plans): q = [] answer = [] for plan in plans: h, m = map(int, plan[1].split(&amp;#39;:&amp;#39;)) plan[1] = h*60 + m plan[2] = int(plan[2]) plans.sort(key = lambda x: x[1]) for plan in plans: if q: free_time = plan[1] - q[-1][1] while q: q[-1][2] -= free_time free_time = -1 * q[-1][2] print (free_time, q[-1][2]) if free_time &amp;lt; 0: break if q[-1][2] &amp;lt;= 0: answer.append(q.pop()[0]) q.append(plan) while q: answer.append(q.pop()[0]) return answer 다른 사람 답안 def solution(plans): plans = sorted(map(lambda x: [x[0], int(x[1][:2]) * 60 + int(x[1][3:]), int(x[2])], plans), key=lambda x: -x[1]) q = [] while plans: cur = plans.</description></item><item><title>프로그래머스 - 연속된 부분 수열의 합 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EC%97%B0%EC%86%8D%EB%90%9C_%EB%B6%80%EB%B6%84_%EC%88%98%EC%97%B4%EC%9D%98_%ED%95%A9/</link><pubDate>Thu, 06 Jul 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EC%97%B0%EC%86%8D%EB%90%9C_%EB%B6%80%EB%B6%84_%EC%88%98%EC%97%B4%EC%9D%98_%ED%95%A9/</guid><description>def solution(sequence, k): answer = [] e = len(sequence)-1 s = len(sequence) cur = 0 while s &amp;gt;= 0: if cur &amp;lt; k: s -= 1 cur += sequence[s] elif cur &amp;gt; k: cur -= sequence[e] e -= 1 else: answer.append((s, e)) s -= 1 cur += sequence[s] answer.sort(key=lambda x: (x[1]-x[0], x[0])) return answer[0] 문제 수열과 k가 주어진다 수열의 부분합이 k가 되게 하는 시작인덱스와 끝인덱스를 구하라 이때, 길이가 짧은 수열을 찾는다, 길이가 같은것이 여러가지라면 시작인덱스가 작은 것을 찾는다 TC input [1, 2, 3, 4, 5], 7</description></item><item><title>프로그래머스 - 두 원 사이의 정수 쌍 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EB%91%90_%EC%9B%90_%EC%82%AC%EC%9D%B4%EC%9D%98_%EC%A0%95%EC%88%98_%EC%8C%8D/</link><pubDate>Wed, 05 Jul 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EB%91%90_%EC%9B%90_%EC%82%AC%EC%9D%B4%EC%9D%98_%EC%A0%95%EC%88%98_%EC%8C%8D/</guid><description>import math def calc1(r): result = 0 for i in range(1, r): result += math.floor(math.sqrt(r**2 - i**2)) return result*4 + r*4 + 1 def calc2(r): result = 0 for i in range(1, r): a = math.sqrt(r**2 - i**2) result += math.floor(a) if a % 1 == 0: result -= 1 return result*4 + r*4 + 1 def solution(r1, r2): return calc1(r2)-calc2(r1)+4 문제 두 원의 반지름 r1, r2가 주어진다. 두 원 사이의 공간에 x좌표와 y좌표가 모두 정수인 점의 개수를 구하라 이때, 각 원 위의 점도 포함하여 센다.</description></item><item><title>프로그래머스 - 요격 시스템 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EC%9A%94%EA%B2%A9_%EC%8B%9C%EC%8A%A4%ED%85%9C/</link><pubDate>Tue, 04 Jul 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EC%9A%94%EA%B2%A9_%EC%8B%9C%EC%8A%A4%ED%85%9C/</guid><description>def solution(targets): answer = 0 targets.sort(key=lambda x:x[1]) cur = 0 for i in targets: if i[0] &amp;gt;= cur: answer += 1 cur = i[1] return answer 문제 개구간 (s, e)의 리스트가 주어진다. 이때, 모든 개구간을 포함하는 최소 숫자의 수를 구하여라 TC input [[4,5],[4,8],[10,14],[11,13],[5,12],[3,7],[1,4]]
ouput 3
해결방법 개구간을 (s, e)에서 e를 정렬하여 해결하였다. s 기준으로 정렬해도 해결할 수 있다는데 나는 e로 정렬하는게 편했다</description></item><item><title>11000 : 강의실 배정 (G5)</title><link>https://bong-u.github.io/til/algorithm/boj_11000/</link><pubDate>Wed, 28 Jun 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/boj_11000/</guid><description>import heapq N = int(input()) L = [] for _ in range(N): L.append(tuple(map(int, input().split()))) L.sort() q = [] heapq.heappush(q, L[0][1]) for i in L[1:]: if q[0] &amp;gt; i[0]: heapq.heappush(q, i[1]) else: heapq.heappop(q) heapq.heappush(q, i[1]) print (len(q)) 문제 강의 개수와 강의 당 시작시간, 종료시간이 주어진다 필요한 강의실 개수를 구하라 (연강 가능)) TC
input 3 1 3 2 4 3 5
output 4</description></item><item><title>2638 : 치즈 (G3)</title><link>https://bong-u.github.io/til/algorithm/boj_2638/</link><pubDate>Mon, 26 Jun 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/boj_2638/</guid><description>from collections import deque dx = [0, 0, -1, 1] dy = [-1, 1, 0, 0] N, M = map(int, input().split()) L = [list(map(int, input().split())) for _ in range(N)] def check(): q = deque() q.append((0, 0)) visited = [[0]*M for _ in range(N)] visited[0][0] = 1 while q: curX, curY = q.popleft() for i in range(4): nX = curX + dx[i] nY = curY + dy[i] if 0 &amp;lt;= nX &amp;lt; N and 0 &amp;lt;= nY &amp;lt; M: if L[nX][nY] == 0 and visited[nX][nY] == 0: q.</description></item><item><title>11444 : 피보나치 수 6 (G2)</title><link>https://bong-u.github.io/til/algorithm/boj_11444/</link><pubDate>Tue, 09 May 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/boj_11444/</guid><description>def multiply(m1, m2): result = [0, 0, 0, 0] result[0] = (m1[0]*m2[0] + m1[1]*m2[2]) % 1000000007 result[1] = (m1[0]*m2[1] + m1[1]*m2[3]) % 1000000007 result[2] = (m1[2]*m2[0] + m1[3]*m2[2]) % 1000000007 result[3] = (m1[2]*m2[1] + m1[3]*m2[3]) % 1000000007 return result def power(m, n): if (n &amp;gt; 1): m = power (m, n//2) m = multiply (m, m) if n % 2 == 1: m = multiply(m, [1,1,1,0]) return m N = int(input()) mat = power ([1,1,1,0], N) print (mat[1]%1000000007) 문제 n이 주어질 때 n번째 피보나치 수를 구하여라.</description></item><item><title>1976 : 여행 가자 (G4)</title><link>https://bong-u.github.io/til/algorithm/boj_1976/</link><pubDate>Thu, 20 Apr 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/boj_1976/</guid><description>N = int(input()) M = int(input()) parent = [i for i in range(N)] def find(node): if parent[node] != node: parent[node] = find(parent[node]) return parent[node] def union(a, b): a = find(a) b = find(b) if a &amp;lt; b: parent[b] = a else: parent[a] = b for i in range(N): for j, item in enumerate(map(int, input().split())): if item: union(i, j) path = list(map(int, input().split())) start = parent[path[0]-1] for i in range(1, M): if parent[path[i]-1] !</description></item><item><title>11003 : 최솟값 찾기 (P5)</title><link>https://bong-u.github.io/til/algorithm/boj_11003/</link><pubDate>Mon, 03 Apr 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/boj_11003/</guid><description>from collections import deque N, L = map(int, input().split()) A = list(map(int, input().split())) Q = deque([(A[0], 0)]) result = [A[0]] for i in range(1, N): if Q[0][1] == i-L: Q.popleft() while Q and Q[-1][0] &amp;gt;= A[i]: Q.pop() Q.append((A[i], i)) result.append(Q[0][0]) print(*result) 문제 N개의 수 A1, A2, &amp;hellip;, AN 과 L이 주어진다. Di = Ai-L+1 ~ Ai 중의 최솟값이라고 할 때, D에 저장된 수를 출력하는 프로그램을 작성하시오. TC input 12 3</description></item><item><title>17144 : 미세먼지 안녕! (G4)</title><link>https://bong-u.github.io/til/algorithm/boj_17144/</link><pubDate>Wed, 08 Mar 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/boj_17144/</guid><description>R, C, T = map(int, input().split()) L = [list(map(int, input().split())) for _ in range(R)] dx = [0, 1, 0, -1] dy = [-1, 0, 1, 0] dx2 = [0, 1, 0, -1] dy2 = [1, 0, -1, 0] pur_a = (0, 0) pur_b = (0, 0) for i in range(R): if L[i][0] == -1: pur_a = (i, 0) pur_b = (i+1, 0) break def diffuse(L): L_ = [[0]*C for _ in range(R)] for i in range(R): for j in range(C): if L[i][j] &amp;gt; 0: cnt = 0 for k in range(4): px = j+dx[k] py = i+dy[k] if 0 &amp;lt;= px &amp;lt; C and 0 &amp;lt;= py &amp;lt; R and L[py][px] !</description></item><item><title>12851 : 숨바꼭질 2 (G4)</title><link>https://bong-u.github.io/til/algorithm/boj_12851/</link><pubDate>Tue, 07 Mar 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/boj_12851/</guid><description>from collections import deque position_a, position_b = map(int, input().split()) q = deque() visited = [False]*100001 result = 0 cnt = 1 q.append((0, position_a)) while q: time, cur = q.popleft(); visited[cur] = True if cur == position_b: result = time for i in q: if i == (time, cur): cnt += 1 break if cur-1 &amp;gt;= 0 and not visited[cur-1]: q.append((time+1, cur-1)) if cur+1 &amp;lt;= 100000 and not visited[cur+1]: q.append((time+1, cur+1)) if cur*2 &amp;lt;= 100000 and not visited[cur*2]: q.</description></item><item><title>2448 : 별 찍기 - 11 (G4)</title><link>https://bong-u.github.io/til/algorithm/boj_2448/</link><pubDate>Mon, 06 Mar 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/boj_2448/</guid><description>import math N = int(input()) K = int(math.log2(N//3)) arr = [[&amp;#39; &amp;#39;] * (2*N-1) for _ in range(N)] def solve(depth, bx, by): if depth == 0: for i in range(3): for j in range(i*2+1): arr[by+i][bx+(2-i)+j] = &amp;#39;*&amp;#39; arr[by+1][bx+2] = &amp;#39; &amp;#39; else: px = 2**(depth)*3 py = 2**(depth-1)*3 solve(depth-1, bx+px//2, by) solve(depth-1, bx, by+py) solve(depth-1, bx+px, by+py) solve(K, 0, 0) for i in arr: print (&amp;#39;&amp;#39;.join(i)) 혼자 풀었다 별이 찍혀져있는 모습을 보고 규칙을 찾아내서 구현하는 문제였다 N이 3*(2^N)으로만 주어진다는 것을 토대로 재귀를 이용하여 풀었다</description></item><item><title>1043 : 거짓말 (G4)</title><link>https://bong-u.github.io/til/algorithm/boj_1043/</link><pubDate>Sun, 05 Mar 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/boj_1043/</guid><description>N, M = map(int, input().split()) T = list(map(int, input().split())) T = set(T[1:]) member = [set() for _ in range(N)] party = [] visit = [False]*M def explore(n): for i in member[n]: if not visit[i]: visit[i] = True for j in party[i]: explore(j-1) for i in range(M): lst = list(map(int, input().split())) lst = lst[1:] for j in lst: member[j-1].add(i) party.append(set(lst)) for i in T: explore(i-1) cnt = 0 for i in visit: if not i: cnt += 1 print (cnt) 내방식대로 푸는데 오래걸렸다 유니온 파인드로 푸는 사람도 있었다</description></item><item><title>5639 : 이진 검색 트리 (G5)</title><link>https://bong-u.github.io/til/algorithm/boj_5639/</link><pubDate>Fri, 03 Mar 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/boj_5639/</guid><description>풀이방법 1 : 직접 구현 import sys sys.setrecursionlimit(10**6) class Node: def __init__(self, value): self.value = value self.left = None self.right = None class BinaryTree: def __init__(self, root): self.root = root def insert(self, value): cur_node = self.root while True: if value &amp;lt; cur_node.value: if cur_node.left != None: cur_node = cur_node.left else: cur_node.left = Node(value) break else: if cur_node.right != None: cur_node = cur_node.right else: cur_node.right = Node(value) break def traverse(self, node): if node.</description></item><item><title>14938 : 서강그라운드 (G4)</title><link>https://bong-u.github.io/til/algorithm/boj_14938/</link><pubDate>Thu, 16 Feb 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/boj_14938/</guid><description>N, M, R = map(int, input().split()) item = list(map(int, input().split())) G = [[] for _ in range(N)] for _ in range(R): a, b, c = map(int, input().split()) G[a-1].append((b-1, c)) G[b-1].append((a-1, c)) def dfs(node, dist): global result if dist &amp;gt; M: return if not visit[node]: result += item[node] visit[node] = True for n_node, n_dist in G[node]: dfs(n_node, dist+n_dist) max_result = 0 for i in range(N): result = 0 visit = [False]*N dfs(i, 0) max_result = max(max_result, result) print (max_result) 분류에 다익스트라, 플로이드-워셜로 되어있지만 DFS로 풀었다 풀이 방법 여기서는 재방문 했다고 해서 탐색을 하지 않으면 안된다 재방문했을때 전에 방문했을 때보다 더 짧은 통로로 들어왔다면 더 많은 아이템을 얻을 수 있기 때문이다 다만, 아이템은 방문할 때마다 얻을 수 있는 것이 아니기 때문에 주의하여야 한다 위의 내용을 질문게시판을 보다가 깨닫고 풀 수 있었다</description></item><item><title>1167 : 트리의 지름 (G2)</title><link>https://bong-u.github.io/til/algorithm/boj_1167/</link><pubDate>Wed, 15 Feb 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/boj_1167/</guid><description>import sys sys.setrecursionlimit(10**6) input = sys.stdin.readline V = int(input()) G = [[] for _ in range(V)] for _ in range(V): token = list(map(int, input().split()))[:-1] for i in range(1, len(token), 2): G[token[0]-1].append((token[i]-1, token[i+1])) def dfs(node, dist): global max_node, max_dist visited[node] = True if dist &amp;gt; max_dist: max_node = node max_dist = dist for n_node, n_dist in G[node]: if not visited[n_node]: dfs(n_node, dist+n_dist) max_node = 0 max_dist = 0 visited = [False]*V dfs(0, 0) max_dist = 0 visited = [False]*V dfs(max_node, 0) print (max_dist) 최근에 푼 &amp;ldquo;1967: 트리의 지름&amp;rdquo; 덕분에 쉽게 해결할 수 있었다 기억하자 트리의 지름 = (어떤 한 정점에서 가장 먼 점 P)에서 가장 먼 점 사이의 거리</description></item><item><title>1967 : 트리의 지름(G4)</title><link>https://bong-u.github.io/til/algorithm/boj_1967/</link><pubDate>Tue, 14 Feb 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/boj_1967/</guid><description>import sys sys.setrecursionlimit(10**6) M = int(input()) G = [[] for _ in range(M)] for _ in range(M-1): a, b, c = map(int, input().split()) G[a-1].append((b-1, c)) G[b-1].append((a-1, c)) n1 = 0 tmp = 0 def dfs(node, length): global n1, tmp visit[node] = True if length &amp;gt; tmp: tmp = length n1 = node for child, v in G[node]: if not visit[child]: dfs(child, length+v) visit = [False]*M dfs(0, 0) tmp = 0 visit = [False]*M dfs(n1, 0) print (tmp) 인터넷에서 접근 방법을 참고했다 해결 방법 아무 정점에서 가장 먼 어떤 정점을 N이라고 하자 정점 N에서 가장 먼 정점 사이의 거리가 트리의 지름과 같다 느낀 점 루트를 구할 필요가 없다는 것을 깨달았다</description></item><item><title>15681 : 트리와 쿼리 (G5)</title><link>https://bong-u.github.io/til/algorithm/boj_15681/</link><pubDate>Mon, 13 Feb 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/boj_15681/</guid><description>import sys sys.setrecursionlimit(10**6) input = sys.stdin.readline N, R, Q = map(int, input().split()) G = [[] for _ in range(N)] cnt = [1]*N visited = [False]*N for _ in range(N-1): a, b = map(int, input().split()) G[a-1].append(b-1) G[b-1].append(a-1) def dfs(node): visited[node] = True for i in G[node]: if not visited[i]: cnt[node] += dfs(i) return cnt[node] dfs(R-1) for _ in range(Q): print (cnt[int(input())-1]) 혼자 풀었다!
서브트리에 속한 정점의 수를 memoization해놓고 쿼리마다 index의 값을 출력하면 된다</description></item><item><title>2502 : 떡 먹는 호랑이 (S1)</title><link>https://bong-u.github.io/til/algorithm/boj_2502/</link><pubDate>Fri, 10 Feb 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/boj_2502/</guid><description>D, K = map(int, input().split()) L = [(1, 0), (0, 1)] for i in range(2, D): L.append((L[i-2][0]+L[i-1][0], L[i-2][1]+L[i-1][1])) A = 1 B = 2 while True: if A*L[D-1][0] + B*L[D-1][1] == K: break if A+1 == B: B += 1 A = 1 else: A += 1 print (A,&amp;#39;\n&amp;#39;,B, sep=&amp;#39;&amp;#39;) 해결방법 N번째날 떡 개수를 구하기 위해 첫째날 떡, 둘째날 떡을 각각 몇번 더해야하는지 리스트에 구한다 첫째, 둘째 날 떡을 하나하나 넣어보면서 브루트 포스를 수행한다</description></item><item><title>13398 : 연속합 2 (G5)</title><link>https://bong-u.github.io/til/algorithm/boj_13398/</link><pubDate>Wed, 08 Feb 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/boj_13398/</guid><description>N = int(input()) L = list(map(int, input().split())) res = 0 dp = [[-1000]*N for _ in range(2)] dp[0][0] = L[0] for i in range(1, N): dp[0][i] = max(dp[0][i-1]+L[i], L[i]) dp[1][i] = max(dp[1][i-1]+L[i], dp[0][i-1]) print (max(max(dp[0]), max(dp[1]))) 이번 문제에서 사용할 dp 배열의 크기는 N X 2 이다. 배열은 최솟값인 -1000으로 초기화하여야 한다</description></item><item><title>15486 : 퇴사 2 (G5)</title><link>https://bong-u.github.io/til/algorithm/boj_15486/</link><pubDate>Tue, 07 Feb 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/boj_15486/</guid><description>import sys input = sys.stdin.readline N = int(input()) T = [] P = [] dp = [0]*(N+1) for _ in range(N): a, b = map(int, input().split()) T.append(a) P.append(b) for i in range(N-1, -1, -1): if i+T[i] &amp;gt; N: dp[i] = dp[i+1] else: dp[i] = max(P[i]+dp[i+T[i]], dp[i+1]) print (dp[0]) dp라는 변수를 만들어야하는데 안 만들고 리스트 P만 가지고 memoization 하려다 실패했다 점화식은 잘 적었으나 조건문이 잘 못되어서 다른 풀이를 참고했다</description></item><item><title>2631 : 줄세우기 (G4)</title><link>https://bong-u.github.io/til/algorithm/boj_2631/</link><pubDate>Sat, 04 Feb 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/boj_2631/</guid><description>N = int(input()) L = [] for i in range(N): L.append(int(input())) dp = [1]*N for i in range(N): for j in range(i): if L[j] &amp;lt; L[i]: dp[i] = max(dp[i], dp[j]+1) print (N-max(dp)) LIS를 활용한 문제이다 풀이 유도는 잘했으나 LIS가 헷갈려서 전에 풀었던 코드를 참고하였다</description></item><item><title>1915 : 가장 큰 정사각형 (G4)</title><link>https://bong-u.github.io/til/algorithm/boj_1915/</link><pubDate>Fri, 03 Feb 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/boj_1915/</guid><description>N, M = map(int, input().split()) L = [list(map(int, input())) for _ in range(N)] dp = [[0]*(M+1) for _ in range(N+1)] result = 0 for i in range(1, N+1): for j in range(1, M+1): dp[i][j] = L[i-1][j-1] if L[i-1][j-1]: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])+1 result = max(result, dp[i][j]) for i in dp: print (i) print (result**2) 조금 시간이 걸렸지만 혼자 힘으로 풀었다 점화식은 dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])+1이다. 모두 0이면 0, 하나라도 1이면 1이 답이라는 것을 생각해야 한다.</description></item><item><title>1918 : 후위 표기식 (G2)</title><link>https://bong-u.github.io/til/algorithm/boj_1918/</link><pubDate>Fri, 03 Feb 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/boj_1918/</guid><description>string = list(input()) priority = {&amp;#39;(&amp;#39;:0, &amp;#39;)&amp;#39;:0, &amp;#39;+&amp;#39;:1, &amp;#39;-&amp;#39;:1, &amp;#39;*&amp;#39;:2, &amp;#39;/&amp;#39;:2} operator = [] result = &amp;#39;&amp;#39; for c in string: if c.isalpha(): result += c elif c == &amp;#39;(&amp;#39;: operator.append(c) elif c == &amp;#39;)&amp;#39;: while operator: op = operator.pop() if op == &amp;#39;(&amp;#39;: break result += op else: if operator: if priority[operator[-1]] &amp;lt; priority[c]: operator.append(c) else: while operator and priority[operator[-1]] &amp;gt;= priority[c]: result += operator.pop() operator.append(c) else: operator.append(c) while operator: result += operator.</description></item><item><title>9252 : LCS 2 (G4)</title><link>https://bong-u.github.io/til/algorithm/boj_9252/</link><pubDate>Thu, 02 Feb 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/boj_9252/</guid><description>S1 = list(input()) S2 = list(input()) N1 = len(S1)+1 N2 = len(S2)+1 dp = [[0]*(N1) for _ in range(N2)] for i in range(1, N2): for j in range(1, N1): if S2[i-1] == S1[j-1]: dp[i][j] = dp[i-1][j-1] + 1 else: dp[i][j] = max(dp[i-1][j], dp[i][j-1]) i = N2-1 j = N1-1 print (dp[i][j]) if dp[i][j] == 0: exit() result = &amp;#39;&amp;#39; while True: if i==0 or j==0: break if dp[i][j] == dp[i-1][j]: i -= 1 elif dp[i][j] == dp[i][j-1]: j -= 1 else: result = S1[j-1] + result i -= 1 j -= 1 print (result) 점화식을 잘못 세웠었다 문자가 같은 경우에 max(dp[i-1][j], dp[i][j-1])+1이 아닌 dp[i-1][j-1]+1이다.</description></item><item><title>10942 : 팰린드롬? (G4)</title><link>https://bong-u.github.io/til/algorithm/boj_10942/</link><pubDate>Wed, 01 Feb 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/boj_10942/</guid><description>import sys input = sys.stdin.readline N = int(input()) L = list(map(int, input().split())) dp = [[0]*N for _ in range(N)] for i in range(N): dp[i][i] = 1 if i &amp;lt; N-1 and L[i] == L[i+1]: dp[i][i+1] = 1 for i in range(N, -1, -1): for j in range(i+1, N): if dp[i+1][j-1] and L[i] == L[j]: dp[i][j] = 1 for i in range(int(input())): S, E = map(int, input().split()) print (dp[S-1][E-1]) 인터넷을 참고했다 쉽지 않은 문제였다</description></item><item><title>5582 : 공통 부분 문자열 (G5)</title><link>https://bong-u.github.io/til/algorithm/boj_5582/</link><pubDate>Tue, 31 Jan 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/boj_5582/</guid><description>S1 = list(input()) S2 = list(input()) L1 = len(S1)+1 L2 = len(S2)+1 dp = [[0]*L1 for _ in range(L2)] result = 0 for i in range(1, L2): for j in range(1, L1): if S1[j-1] == S2[i-1]: dp[i][j] = dp[i-1][j-1]+1 result = max(result, dp[i][j]) print (result) 혼자 힘으로 해결! 깔끔한 풀이가 나와 기분이 좋다</description></item><item><title>5557 : 1학년 (G5)</title><link>https://bong-u.github.io/til/algorithm/boj_5557/</link><pubDate>Mon, 30 Jan 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/boj_5557/</guid><description>N = int(input()) L = list(map(int, input().split())) dp = [[0]*21 for _ in range(N-1)] dp[0][L[0]] = 1 for i in range(0, N-2): for j in range(21): if dp[i][j] != 0: k = L[i+1] if k != 0: if 0 &amp;lt;= j+k &amp;lt;= 20: dp[i+1][j+k] += dp[i][j] if 0 &amp;lt;= j-k &amp;lt;= 20: dp[i+1][j-k] += dp[i][j] else: dp[i+1][j] = dp[i][j]*2 print (dp[N-2][L[-1]]) 혼자 힘으로 풀었다! 이전에 비슷한 dp 문제를 풀어본 적이 있어서 쉽게 풀 수 있었다</description></item><item><title>10164 : 격자상의 경로 (S1)</title><link>https://bong-u.github.io/til/algorithm/boj_10164/</link><pubDate>Sun, 29 Jan 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/boj_10164/</guid><description>N, M, K = map(int, input().split()) K -= 1 ox = K % M oy = K // M def solve(sx, sy, ex, ey): dp = [[0]*M for _ in range(N)] dp[sy][sx] = 1 for i in range(sy, ey+1): for j in range(sx, ex+1): if i-1 &amp;gt;= 0: dp[i][j] += dp[i-1][j] if j-1 &amp;gt;= 0: dp[i][j] += dp[i][j-1] return dp[ey][ex] if K != -1: print (solve(0, 0, ox, oy) * solve(ox, oy, M-1, N-1)) else: print (solve(0, 0, M-1, N-1)) 혼자 힘으로 해결하였다!</description></item><item><title>2011 : 암호코드 (G5)</title><link>https://bong-u.github.io/til/algorithm/boj_2011/</link><pubDate>Sat, 28 Jan 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/boj_2011/</guid><description>L = list(input()) N = len(L) MOD = 10**6 def solution(): if L[0] == &amp;#39;0&amp;#39;: return 0 dp = [1, 1]+[0]*(N-1) for i in range(2, N+1): if L[i-1] != &amp;#39;0&amp;#39;: dp[i] = (dp[i]+dp[i-1]) % MOD if 10 &amp;lt;= int(L[i-2]+L[i-1]) &amp;lt;= 26: dp[i] = (dp[i]+dp[i-2]) % MOD return dp[N] print (solution()) 인터넷을 참고하여 풀었다</description></item><item><title>1495 : 기타리스트 (S1)</title><link>https://bong-u.github.io/til/algorithm/boj_1495/</link><pubDate>Fri, 27 Jan 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/boj_1495/</guid><description>N, S, M = map(int, input().split()) P = list(map(int, input().split())) dp = [[False]*(M+1) for _ in range(N+1)] dp[0][S] = True for i in range(1, N+1): for j in range(M+1): if dp[i-1][j]: if 0 &amp;lt;= j-P[i-1] &amp;lt;= M: dp[i][j-P[i-1]] = True if 0 &amp;lt;= j+P[i-1] &amp;lt;= M: dp[i][j+P[i-1]] = True result = -1 for i in range(M+1): if dp[N][i]: result = i print (result) 인터넷에서 접근을 참고했다</description></item><item><title>16194 : 카드 구매하기 2 (S1)</title><link>https://bong-u.github.io/til/algorithm/boj_16194/</link><pubDate>Thu, 26 Jan 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/boj_16194/</guid><description>N = int(input()) P = list(map(int, input().split())) dp = [10000000]*(N) for i in range(N): for j in range(i): dp[i] = min(dp[i], dp[j]+P[i-j-1]) dp[i] = min(dp[i], P[i]) print (dp[N-1])</description></item><item><title>1965 : 상자넣기 (S2)</title><link>https://bong-u.github.io/til/algorithm/boj_1965/</link><pubDate>Wed, 25 Jan 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/boj_1965/</guid><description>N = int(input()) L = list(map(int, input().split())) dp = [0]*N for i in range(1, N): for j in range(i): if L[j]&amp;lt;L[i] and dp[i]&amp;lt;dp[j]+1: dp[i] = dp[j]+1 print(max(dp)+1) LIS를 구하는 문제이다</description></item><item><title>17070 : 파이프 옮기기 1 (G5)</title><link>https://bong-u.github.io/til/algorithm/boj_17070/</link><pubDate>Thu, 19 Jan 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/boj_17070/</guid><description>N = int(input()) L = [list(map(int, input().split())) for _ in range(N)] result = 0 def dfs(x, y, direc): global result if x == N-1 and y == N-1: result += 1 return if x+1 &amp;lt; N and y+1 &amp;lt; N and L[y+1][x] == 0 and L[y][x+1] == 0 and L[y+1][x+1] == 0: dfs(x+1, y+1, 2) if (direc == 0 or direc == 2) and x+1 &amp;lt; N and L[y][x+1] == 0: dfs(x+1, y, 0) if (direc == 1 or direc == 2) and y+1 &amp;lt; N and L[y+1][x] == 0: dfs(x, y+1, 1) dfs(1, 0, 0) print(result) 별거 아닌게.</description></item><item><title>12852 : 1로 만들기 2 (S1)</title><link>https://bong-u.github.io/til/algorithm/boj_12852/</link><pubDate>Tue, 17 Jan 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/boj_12852/</guid><description>N = int(input()) dp = [0, 0] + [10**6]*(N-1) bt = [0]*(N+1) for i in range(2, N+1): dp[i] = min(dp[i-1]+1, dp[i]) bt[i] = i-1 if i%3 == 0: if dp[i//3]+1 &amp;lt; dp[i]: dp[i] = dp[i//3]+1 bt[i] = i//3 if i%2 == 0: if dp[i//2]+1 &amp;lt; dp[i]: dp[i] = dp[i//2]+1 bt[i] = i//2 dp[i] = min(dp[i], dp[i//2]+1) print(dp[N]다 i = N while i != 1: print (i, end=&amp;#39; &amp;#39;) i = bt[i] print (1) dp 아직 많이 멀었다는 생각이 든다</description></item><item><title>2096 : 내려가기 (G5)</title><link>https://bong-u.github.io/til/algorithm/boj_2096/</link><pubDate>Sat, 14 Jan 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/boj_2096/</guid><description>N = int(input()) L = [list(map(int, input().split())) for _ in range(N)] dp1 = [L[0][i] for i in range(3)] dp2 = [L[0][i] for i in range(3)] for i in range(1, N): tmp1 = [0]*3 tmp2 = [0]*3 for j in range(3): if j == 0: tmp1[0] = L[i][j] + max(dp1[0], dp1[1]) tmp2[0] = L[i][j] + min(dp2[0], dp2[1]) elif j == 1: tmp1[1] = L[i][j] + max(dp1[0], dp1[1], dp1[2]) tmp2[1] = L[i][j] + min(dp2[0], dp2[1], dp2[2]) else: tmp1[2] = L[i][j] + max(dp1[1], dp1[2]) tmp2[2] = L[i][j] + min(dp2[1], dp2[2]) dp1 = [i for i in tmp1] dp2 = [i for i in tmp2] print (max(dp1), min(dp2)) Memoization과정이 다른 memoization 변수에 대해 종속적이라면 잘못된 결과를 초래한다 위 코드에서는 이를 방지하기 위해 tmp1, tmp2 변수를 사용한다 깊이 생각하지 않고 여러 번 제출해서 WA개수가 조금 많다;;</description></item><item><title>1890 : 점프 (S1)</title><link>https://bong-u.github.io/til/algorithm/boj_1890/</link><pubDate>Fri, 13 Jan 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/boj_1890/</guid><description>N = int(input()) L = [list(map(int, input().split())) for _ in range(N)] dp = [[0]*N for _ in range(N)] dp[0][0] = 1 for i in range(N): for j in range(N): if L[i][j] == 0: continue if dp[i][j] != 0: right = j+L[i][j] bottom = i+L[i][j] if right &amp;lt; N: dp[i][right] += dp[i][j] if bottom &amp;lt; N: dp[bottom][j] += dp[i][j] print (dp[N-1][N-1]) dp에 있는 값을 더해야하는데 1을 더해서 몇 번 틀렸다 거의 혼자 힘으로 풀었다</description></item><item><title>1309 : 동물원 (S1)</title><link>https://bong-u.github.io/til/algorithm/boj_1309/</link><pubDate>Thu, 12 Jan 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/boj_1309/</guid><description>N = int(input()) dp = [1, 3] + [0]*(N-1) for i in range(2, N+1): dp[i] = (dp[i-1]*2 + dp[i-2]) % 9901 print(dp[N]) 고민 끝에 답을 찾아보긴 했다 점화식 생각해내는 놈들 머리에 뭐가 든건지 모르겠다</description></item><item><title>9655 : 돌게임 (S5)</title><link>https://bong-u.github.io/til/algorithm/boj_9655/</link><pubDate>Thu, 12 Jan 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/boj_9655/</guid><description>N = int(input()) print (&amp;#39;CY&amp;#39; if N%2==0 else &amp;#39;SK&amp;#39;) 게임이론에서 기초 중 기초 문제이다</description></item><item><title>1010 : 다리놓기 (S5)</title><link>https://bong-u.github.io/til/algorithm/boj_1010/</link><pubDate>Mon, 09 Jan 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/boj_1010/</guid><description>import math for _ in range(int(input())): a, b = map(int, input().split()) print(math.comb(max(a,b), min(a,b)))</description></item><item><title>10844 : 쉬운 계단 수 (S1)</title><link>https://bong-u.github.io/til/algorithm/boj_10844/</link><pubDate>Mon, 09 Jan 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/boj_10844/</guid><description> 접근이 어려워 인터넷을 참고했다. 코드는 보지 않았다. 수의 길이가 i이면서 마지막 숫자가 j인 계단 수의 개수를 저장하는 것이 핵심이다. 점화식은 L[i][j] = L[i-1][j-1]+L[i-1][j+1] 이다. N = int(input()) L = [[0]*12 for _ in range(100)] L[0] = [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0] for i in range(1, N): for j in range(1, 11): L[i][j] = L[i-1][j-1]+L[i-1][j+1] print (sum(L[N-1])%1000000000)</description></item><item><title>11048 : 이동하기 (S2)</title><link>https://bong-u.github.io/til/algorithm/boj_11048/</link><pubDate>Mon, 09 Jan 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/boj_11048/</guid><description>N, M = map(int, input().split()) dp = [list(map(int, input().split())) for _ in range(N)] for i in range(1, N): dp[i][0] = dp[i][0]+dp[i-1][0] for i in range(1, M): dp[0][i] = dp[0][i]+dp[0][i-1] for i in range(1, N): for j in range(1, M): dp[i][j] = dp[i][j]+max(dp[i-1][j], dp[i][j-1]) print (dp[N-1][M-1])</description></item><item><title>11051 : 이항계수2 (S2)</title><link>https://bong-u.github.io/til/algorithm/boj_11051/</link><pubDate>Mon, 09 Jan 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/boj_11051/</guid><description> 내장 함수 사용
import math N, K = map(int, input().split()) print (math.comb(N, K)%10007 파스칼의 사각형? dp 구현
N, K = map(int, input().split()) if K == 0: print(1) exit() dp = [[0]*N for _ in range(K)] for i in range(N): dp[0][i] = i+1 for i in range(1, K): for j in range(i, N): dp[i][j] = (dp[i-1][j-1] + dp[i][j-1]) % 10007 print (dp[K-1][N-1])</description></item><item><title>11052 : 카드 구매하기 (S1)</title><link>https://bong-u.github.io/til/algorithm/boj_11052/</link><pubDate>Mon, 09 Jan 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/boj_11052/</guid><description>N = int(input()) P = list(map(int, input().split())) D = [P[0]]+[0]*(N-1) for i in range(1, N): for j in range(1, i+1): D[i] = max(D[i-j]+P[j-1], D[i]) D[i] = max(P[i], D[i]) print (D[N-1]</description></item><item><title>11057 : 오르막 수 (S1)</title><link>https://bong-u.github.io/til/algorithm/boj_11057/</link><pubDate>Mon, 09 Jan 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/boj_11057/</guid><description>N = int(input()) dp = [[1]+[0]*9 for _ in range(N+1)] for i in range(1, N+1): for j in range(1, 10): dp[i][j] = dp[i-1][j]+dp[i][j-1] print (sum(dp[N])%10007)</description></item><item><title>14891 : 톱니바퀴 (G5)</title><link>https://bong-u.github.io/til/algorithm/boj_14891/</link><pubDate>Mon, 09 Jan 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/boj_14891/</guid><description>from collections import deque wheels = [deque(map(int, list(input()))) for _ in range(4)] def rotate(wheel, direction): if direction == 1: wheel.appendleft(wheel.pop()) else: wheel.append(wheel.popleft()) return wheel K = int(input()) vd = [1, -1] res = 0 for _ in range(K): N, D = map(int, input().split()) q = deque() q.append((N-1, D)) visited = [False] * 4 tmp = [] while q: cur, curD = q.popleft() tmp.append((cur, curD)) visited[cur] = True for v in vd: nxt = cur+v if 0 &amp;lt;= nxt &amp;lt; 4 and not visited[nxt]: if (v == -1 and wheels[cur][6] !</description></item><item><title>15683 : 감시 (G4)</title><link>https://bong-u.github.io/til/algorithm/boj_15683/</link><pubDate>Mon, 09 Jan 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/boj_15683/</guid><description>import copy, sys N, M = map(int, input().split()) L = [list(map(int, input().split())) for _ in range(N)] cctv = [] direction = [[[(0, 1)], [(0, -1)], [(1, 0)], [(-1, 0)]], [[(-1, 0), (1, 0)], [(0, -1), (0, 1)]], [[(-1, 0), (0, -1)], [(0, -1), (1, 0)], [(1, 0), (0, 1)], [(0, 1), (-1, 0)]], [[(-1, 0), (0, -1), (1, 0)], [(0, -1), (1, 0), (0, 1)], [(1, 0), (0, 1), (-1, 0)], [(0, 1), (-1, 0), (0, -1)]], [[(-1, 0), (0, -1), (1, 0), (0, 1)]]] res = sys.</description></item><item><title>1699 : 제곱수의 합 (S2)</title><link>https://bong-u.github.io/til/algorithm/boj_1699/</link><pubDate>Mon, 09 Jan 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/boj_1699/</guid><description>N = int(input()) dp = [100000]*(N+1) tmp = 1 for i in range(1, N+1): if i**(1/2) % 1 == 0: dp[i] = 1 tmp += 1 else: for j in range(1, tmp): dp[i] = min(dp[i], dp[i-(j**2)]+1) print (dp[N])</description></item><item><title>17404 : RGB거리 2 (G4)</title><link>https://bong-u.github.io/til/algorithm/boj_17404/</link><pubDate>Mon, 09 Jan 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/boj_17404/</guid><description>N = int(input()) L = [list(map(int, input().split())) for _ in range(N)] result = 100000 for i in range(3): dp = [[0, 0, 0] for _ in range(N)] dp[0] = [10000]*3 dp[0][i] = L[0][i] for j in range(1, N): dp[j][0] = min(dp[j-1][1], dp[j-1][2])+L[j][0] dp[j][1] = min(dp[j-1][0], dp[j-1][2])+L[j][1] dp[j][2] = min(dp[j-1][0], dp[j-1][1])+L[j][2] dp[N-1][i] = 100000 result = min([result]+dp[N-1]) print (result) 인터넷을 참고하여 풀었다
첫째집 3가지 X 마지막집 3가지 = 9가지 이지만</description></item><item><title>2193 : 이친수 (S3)</title><link>https://bong-u.github.io/til/algorithm/boj_2193/</link><pubDate>Mon, 09 Jan 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/boj_2193/</guid><description>N = int(input()) dp = [1]*N for i in range(2, N): dp[i] = dp[i-2]+dp[i-1] print (dp[N-1]) 피보나치였다</description></item><item><title>2225 - 합분해 (G5)</title><link>https://bong-u.github.io/til/algorithm/boj_2225/</link><pubDate>Mon, 09 Jan 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/boj_2225/</guid><description>N, K = map(int, input().split()) dp = [[0]*(N+1) for _ in range(K+1)] for i in range(1, K+1): dp[i][0] = 1 for i in range(1, K+1): for j in range(1, N+1): dp[i][j] = (dp[i-1][j] + dp[i][j-1])%1000000000 print (dp[K][N]) 내 힘으로 풀었다!</description></item><item><title>2294 : 동전 2 (G5)</title><link>https://bong-u.github.io/til/algorithm/boj_2294/</link><pubDate>Mon, 09 Jan 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/boj_2294/</guid><description>N, K = map(int, input().split()) V = [] for _ in range(N): V.append(int(input())) dp = [[0]+([10001]*K) for _ in range(N+1)] for i in range(1, N+1): for j in range(1, K+1): if j &amp;gt;= V[i-1]: dp[i][j] = min(dp[i-1][j], dp[i][j-V[i-1]]+1) else: dp[i][j] = dp[i-1][j] res = dp[N][K] print (res if res != 10001 else -1) dp를 많이 풀어보자</description></item><item><title>2565 : 전깃줄 (G5)</title><link>https://bong-u.github.io/til/algorithm/boj_2565/</link><pubDate>Mon, 09 Jan 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/boj_2565/</guid><description>N = int(input()) L = [list(map(int, input().split())) for _ in range(N)] L = [i[1] for i in sorted(L)] dp = [0]*N for i in range(N): dp[i] = 1 for j in range(i): if L[j] &amp;lt; L[i]: dp[i] = max(dp[i], dp[j]+1) print (N-max(dp)) LIS를 이용하는 문제</description></item><item><title>2573 : 빙산 (G5)</title><link>https://bong-u.github.io/til/algorithm/boj_2573/</link><pubDate>Mon, 09 Jan 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/boj_2573/</guid><description>import copy from collections import deque N, M = map(int, input().split()) L = [list(map(int, input().split())) for _ in range(N)] L[0][0] = 0 L[N-1][M-1] = 0 vx = [0, 0, -1, 1] vy = [-1, 1, 0, 0] def melt(L): L_ = copy.deepcopy(L) for i in range(M): for j in range(N): if L[j][i] != 0: for k in range(4): nx = j + vx[k] ny = i + vy[k] if not 0 &amp;lt;= nx &amp;lt; N or not 0 &amp;lt;= ny &amp;lt; M: continue if L[nx][ny] == 0 and L_[j][i] !</description></item><item><title>2748 : 피보나치 수2 (B2)</title><link>https://bong-u.github.io/til/algorithm/boj_2748/</link><pubDate>Mon, 09 Jan 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/algorithm/boj_2748/</guid><description> &amp;ldquo;알고리즘 분류-DP&amp;quot;에서 안 푼 문제이길래 한 번 풀어봤다. N = int(input()) L = [0, 1] + [0]*89 for i in range(2, N+1): L[i] = L[i-1]+L[i-2] print (L[N])</description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Javae on bong-u's TIL</title><link>/java/</link><description>Recent content in Javae on bong-u's TIL</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 01 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="/java/index.xml" rel="self" type="application/rss+xml"/><item><title>Generics</title><link>/java/generics/</link><pubDate>Wed, 01 Feb 2023 00:00:00 +0000</pubDate><guid>/java/generics/</guid><description>효과 : 타입안정성, 간결한 코드 Generic class public class Box&amp;lt;M, I&amp;gt; { private M material; private I item; ... } Box&amp;lt;Paper, String&amp;gt; box = new Box&amp;lt;Paper, String&amp;gt;(); Generic Function public class CoffeeMachine { public &amp;lt;T&amp;gt; Coffee makeCoffee(T capsule) { return new Coffee(capsule); } } CoffeeMachine coffeeMachine = new CoffeeMachine(); Colombian capsule = new Colombian(); coffeeMachine.&amp;lt;Colombian&amp;gt;makeCoffee(capsule); coffeeMachine.makeCoffee(capsule); Restrictions on Generics // BoxMaterial을 상속 받았으면서 Hard(인터페이스)를 구현한 클래스만 가능 public class Box&amp;lt;M extends BoxMaterial &amp;amp; Hard&amp;gt; // BoxMaterial의 조상 클래스만 가능 public class Box&amp;lt;T super BoxMaterial&amp;gt; Whild Card // T와 그 자손만 가능 &amp;lt;?</description></item></channel></rss>
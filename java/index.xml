<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>♨|Java on Bong-u's TIL</title><link>https://bong-u.github.io/til/java/</link><description>Recent content in ♨|Java on Bong-u's TIL</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://bong-u.github.io/til/java/index.xml" rel="self" type="application/rss+xml"/><item><title>Java - 이중 중괄호와 Anti-Pattern</title><link>https://bong-u.github.io/til/java/double_brace_initialization/</link><pubDate>Wed, 19 Jul 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/java/double_brace_initialization/</guid><description>기존 코드 Map&amp;lt;String, Object&amp;gt; map = new HashMap&amp;lt;&amp;gt;(); map.put(&amp;#34;customerId&amp;#34;, customer.getCustomerId().toString().getBytes()); map.put(&amp;#34;name&amp;#34;, customer.getName()); map.put(&amp;#34;email&amp;#34;, customer.getEmail()); map.put(&amp;#34;createdAt&amp;#34;, Timestamp.valueOf(customer.getCreatedAt())); return map; Double Brace Initialization 적용 후 return new HashMap&amp;lt;&amp;gt;() {{ put(&amp;#34;customerId&amp;#34;, customer.getCustomerId().toString().getBytes()); put(&amp;#34;name&amp;#34;, customer.getName()); put(&amp;#34;email&amp;#34;, customer.getEmail()); put(&amp;#34;createdAt&amp;#34;, Timestamp.valueOf(customer.getCreatedAt())); }}; 효과 장점 코드가 가독성이 좋아진다 단점 추가로 익명 클래스를 사용한다 -&amp;gt; 메모리 추가 사용
인스터스 및 개체에 대한 숨겨진 참조를 가진다 -&amp;gt; Memory Leak 유발 가능</description></item><item><title>Try with resources로 간결하게 반납하기</title><link>https://bong-u.github.io/til/java/try_with_resources/</link><pubDate>Thu, 13 Jul 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/java/try_with_resources/</guid><description>기존 코드 - try-catch-finally 사용 Connection connection = null; Statement statement = null; ResultSet resultSet = null; try { connection = DriverManager.getConnection(/* SECRET */); statement = connection.createStatement(); resultSet = statement.executeQuery(&amp;#34;select * from customers&amp;#34;); while (resultSet.next()) { var name = resultSet.getString(&amp;#34;name&amp;#34;); var customerId = UUID.nameUUIDFromBytes(resultSet.getBytes(&amp;#34;customer_id&amp;#34;)); logger.info(&amp;#34;Customer id:{}, name: {}&amp;#34;, customerId, name); } } catch (SQLException e) { logger.error(&amp;#34;Error while connecting to DB&amp;#34;, e); throw e; } finally { try { if (connection !</description></item><item><title>Record</title><link>https://bong-u.github.io/til/java/record/</link><pubDate>Wed, 05 Jul 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/java/record/</guid><description>레코드란 불변(immutable) 데이터 객체를 쉽게 생성할 수 있도록 하는 새로운 유형의 클래스 JDK16부터 지원 예제 Record 적용 전
public class Person { private final String name; private final int age; public Person(String name, int age) { this.name = name; this.age = age; } public String getName() { return name; } public int getAge() { return age; } } Record 적용 후
public record Person(String name, int age) {} Record에서 지원하는 것 Constructor, Getter, equals(), hashcode(), toString() Record의 제약 사항 다른 클래스를 상속 받을 수 없다, 구현(implements)는 가능 static field만 선언 가능하다 (instance field 불가능) 각 field는 private final로 정의된다 Record에서 할 수 있는 것 컴팩트 생성자 : 매개변수가 없는 생성자, validate 사용시 적합 public record Person(String name, int age) { public Person { Objects.</description></item><item><title>Stream, Optional</title><link>https://bong-u.github.io/til/java/stream/</link><pubDate>Mon, 03 Jul 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/java/stream/</guid><description>Lambda 표현식 매개변수 화살표(-&amp;gt;) 함수몸체로 이용하여 사용할 수 있습니다. 함수 몸체가 단일 실행문이면 괄호{}를 생략할 수 있습니다. 함수 몸체가 return문으로만 구성되어 있으면 괄호{}을 생략할 수 있습니다. (int x) -&amp;gt; x+1; (int x, int y) -&amp;gt; x+y; (Thread lamT) -&amp;gt; { lamT.start(); } Stream 특징 원본 데이터를 변경하지 않습니다. 요청되었을때만 데이터를 처리한다. parallelStream()을 이용하여 병렬처리가 가능하다. 예제1 List&amp;lt;String&amp;gt; highCaloriesFoodName = foodList.stream() .filter(food -&amp;gt; { System.out.println(&amp;#34;filter : &amp;#34; + food.</description></item><item><title>Generics</title><link>https://bong-u.github.io/til/java/generics/</link><pubDate>Wed, 01 Feb 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/java/generics/</guid><description>효과 : 타입안정성, 간결한 코드 Generic class public class Box&amp;lt;M, I&amp;gt; { private M material; private I item; ... } Box&amp;lt;Paper, String&amp;gt; box = new Box&amp;lt;Paper, String&amp;gt;(); Generic Function public class CoffeeMachine { public &amp;lt;T&amp;gt; Coffee makeCoffee(T capsule) { return new Coffee(capsule); } } CoffeeMachine coffeeMachine = new CoffeeMachine(); Colombian capsule = new Colombian(); coffeeMachine.&amp;lt;Colombian&amp;gt;makeCoffee(capsule); coffeeMachine.makeCoffee(capsule); Restrictions on Generics // BoxMaterial을 상속 받았으면서 Hard(인터페이스)를 구현한 클래스만 가능 public class Box&amp;lt;M extends BoxMaterial &amp;amp; Hard&amp;gt; // BoxMaterial의 조상 클래스만 가능 public class Box&amp;lt;T super BoxMaterial&amp;gt; Whild Card // T와 그 자손만 가능 &amp;lt;?</description></item></channel></rss>
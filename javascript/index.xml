<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>🍌|Javascript on</title><link>/javascript/</link><description>Recent content in 🍌|Javascript on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Wed, 05 Apr 2023 00:00:00 +0000</lastBuildDate><atom:link href="/javascript/index.xml" rel="self" type="application/rss+xml"/><item><title>JS - Arguments object 관련 이슈</title><link>/javascript/js_arguments_object_issue/</link><pubDate>Wed, 05 Apr 2023 00:00:00 +0000</pubDate><guid>/javascript/js_arguments_object_issue/</guid><description>상황 나의 기술 블로그와 Google Analytics를 연결하기 위해 tag를 삽입하는 작업 중 이었다. 구글에서 제공하는 태그 소스 중 일부이다. function gtag() { dataLayer.push(arguments); } 나는 function 키워드를 사용한게 마음에 들지 않아. 아래와 같이 화살표 함수로 바꾸어 작업하였다. const gtag = (...args) =&amp;gt; { dataLayer.push(args); }; 하지만 내 코드는 정상적으로 동작하지 않았고 구글의 코드 그대로 적용해야만 google analytics가 동작하였다. 이유는 두 방식의 차이점에 있었는데, 어떤 점이 다른건지 알아보게 되었다.</description></item><item><title>React - build 이후 빈 화면만 나오는 문제</title><link>/javascript/react_deploy_issue/</link><pubDate>Thu, 19 Jan 2023 00:00:00 +0000</pubDate><guid>/javascript/react_deploy_issue/</guid><description>build 결과물을 돌리면 빈 화면만 나오는 문제 static files 로딩에 성공했는지 확인하자 문제가 있다면 index.html의 경로를 수정하자 react-router를 사용하고 있다면 url을 확인하자 deploy할때 root url이 아니라면 router에 basename을 추가해줘야한다. &amp;lt;Router basename=&amp;#34;/index&amp;#34;&amp;gt;...&amp;lt;/Router&amp;gt;</description></item><item><title>React - environment variable 설정하기</title><link>/javascript/react_env_var/</link><pubDate>Thu, 19 Jan 2023 00:00:00 +0000</pubDate><guid>/javascript/react_env_var/</guid><description> 프로그램이 개발/배포 상황에 따라 변수를 달리해야 할 때가 있다. 이때 react에서는 .env.development , .env.production 파일을 만들어서 환경변수를 쉽게 관리할 수 있다. react는 앞에 &amp;lsquo;REACT_APP&amp;rsquo; 을 붙여야 인식이 된다고한다. 설정 .env.development REACT_APP_HOST=localhost .env.production REACT_APP_HOST=192.168.0.1 사용 ${process.env.REACT_APP_HOST}</description></item><item><title>React - useEffect 사용법</title><link>/javascript/react_useeffect/</link><pubDate>Thu, 19 Jan 2023 00:00:00 +0000</pubDate><guid>/javascript/react_useeffect/</guid><description> component가 rendering 될 때 실행 useEffect(()=&amp;gt; { ... }); component가 mount 될 때 (처음 rendering 될 때) 실행 useEffect(()=&amp;gt; { ... }, []); component가 update 될 때 (props, states가 바뀔 때) 실행 useEffect(()=&amp;gt; { ... }, [{ props or states }]); component가 unmount 될 때 또는 update되기 직전에 실행 useEffect(()=&amp;gt; { return () =&amp;gt; { ... }; }, []);</description></item><item><title>React - column을 기준으로 정렬하기</title><link>/javascript/react_table_sort/</link><pubDate>Tue, 17 Jan 2023 00:00:00 +0000</pubDate><guid>/javascript/react_table_sort/</guid><description>Table에 있는 데이터들을 column별로 정렬해야 한다 데이터의 형식에 따라 comparator를 따로 구현하였다 const comparatorStr = (a, b, order) =&amp;gt; { if (order === Order.ASC) return a.localeCompare(b); return b.localeCompare(a); }; const comparatorInt = (a, b, order) =&amp;gt; { if (order === Order.ASC) return a &amp;gt; b ? 1 : -1; return a &amp;lt; b ? 1 : -1; }; 정렬할 키나 순서가 바뀔때 마다 정렬을 수행한다 useEffect(() =&amp;gt; { if (sortBy === Key.</description></item></channel></rss>
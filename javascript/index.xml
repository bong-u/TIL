<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Javascript on Bong-u's TIL</title><link>https://bong-u.github.io/til/javascript/</link><description>Recent content in Javascript on Bong-u's TIL</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://bong-u.github.io/til/javascript/index.xml" rel="self" type="application/rss+xml"/><item><title>React - 로그인 상태와 중첩 라우팅</title><link>https://bong-u.github.io/til/javascript/react_utilize_router/</link><pubDate>Sat, 12 Aug 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/javascript/react_utilize_router/</guid><description>배경 학부연구생 업무 중에, 로그인 여부에 따라 다른 페이지를 보여주는 기능을 구현해야 했다. 로그인을 하지 않았을때는 &amp;ldquo;/login&amp;quot;으로, 로그인을 했을 때는 &amp;ldquo;/&amp;ldquo;으로 리다이렉트 했다 path가 달라도 공통적으로 적용되는 레이아웃은 중첩 라우팅을 이용하여 구현했다 구조는 다음과 같다 코드 Router.js
1&amp;lt;BrowserRouter&amp;gt; 2 &amp;lt;Routes&amp;gt; 3 &amp;lt;!-- isAuthorized를 prop으로 넘겨서 이미 login한 경우 redirect --&amp;gt; 4 &amp;lt;Route 5 path=&amp;#34;/login&amp;#34; 6 element={&amp;lt;Login isAuthorized={isAuthorized} /&amp;gt;} 7 /&amp;gt; 8 &amp;lt;!-- 로그인을 하지 않았는데 &amp;#34;/&amp;#34;로 접근시 redirect --&amp;gt; 9 {!</description></item><item><title>JS - Dicom to base64</title><link>https://bong-u.github.io/til/javascript/js_dicom_to_base64/</link><pubDate>Sun, 06 Aug 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/javascript/js_dicom_to_base64/</guid><description>배경 학부연구생 업무 중에, dicom파일을 서버에 전송하는 작업이 필요했다 보내는 형식은 2가지로 생각했다 dicom파일을 그대로 multipart/form-data 형식으로 보내는 방법 장점 : 파일을 그대로 효율적으로 전송할 수 있다 단점 : 파일 정보를 함께 보내기 어렵다 dicom파일을 base64로 인코딩하여 application/json 형식으로 보내는 방법 장점 : 파일 정보를 함께 보낼 수 있다 단점 : 인코딩으로 인해서 원본 파일보다 용량이 커진다 파일의 정보도 함께 구조화하여 보내기 위해 json형태로 보내는 방식을 택하였다 구현 dicom파일 -&amp;gt; base64 1// Encode a file to BASE64 2 const readFileAsync = (file) =&amp;gt; { 3 return new Promise((resolve, reject) =&amp;gt; { 4 // 비동기적으로 파일을 읽어오기 위해 FileReader 객체를 생성 5 const reader = new FileReader(); 6 7 // 읽기가 끝나면 수행 8 reader.</description></item><item><title>JS - Arguments object 관련 이슈</title><link>https://bong-u.github.io/til/javascript/js_arguments_object_issue/</link><pubDate>Wed, 05 Apr 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/javascript/js_arguments_object_issue/</guid><description>상황 나의 기술 블로그와 Google Analytics를 연결하기 위해 tag를 삽입하는 작업 중 이었다. 구글에서 제공하는 태그 소스 중 일부이다. 1function gtag() { 2 dataLayer.push(arguments); 3} 나는 function 키워드를 사용한게 마음에 들지 않아. 아래와 같이 화살표 함수로 바꾸어 작업하였다. 1const gtag = (...args) =&amp;gt; { 2 dataLayer.push(args); 3}; 하지만 내 코드는 정상적으로 동작하지 않았고 구글의 코드 그대로 적용해야만 google analytics가 동작하였다. 이유는 두 방식의 차이점에 있었는데, 어떤 점이 다른건지 알아보게 되었다.</description></item><item><title>React - build 이후 빈 화면만 나오는 문제</title><link>https://bong-u.github.io/til/javascript/react_deploy_issue/</link><pubDate>Thu, 19 Jan 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/javascript/react_deploy_issue/</guid><description>build 결과물을 돌리면 빈 화면만 나오는 문제 static files 로딩에 성공했는지 확인하자 문제가 있다면 index.html의 경로를 수정하자 react-router를 사용하고 있다면 url을 확인하자 deploy할때 root url이 아니라면 router에 basename을 추가해줘야한다. 1&amp;lt;Router basename=&amp;#34;/index&amp;#34;&amp;gt;...&amp;lt;/Router&amp;gt;</description></item><item><title>React - environment variable 설정하기</title><link>https://bong-u.github.io/til/javascript/react_env_var/</link><pubDate>Thu, 19 Jan 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/javascript/react_env_var/</guid><description> 프로그램이 개발/배포 상황에 따라 변수를 달리해야 할 때가 있다. 이때 react에서는 .env.development , .env.production 파일을 만들어서 환경변수를 쉽게 관리할 수 있다. react는 앞에 &amp;lsquo;REACT_APP&amp;rsquo; 을 붙여야 인식이 된다고한다. 설정 .env.development 1REACT_APP_HOST=localhost .env.production 1REACT_APP_HOST=192.168.0.1 사용 1${process.env.REACT_APP_HOST}</description></item><item><title>React - useEffect 사용법</title><link>https://bong-u.github.io/til/javascript/react_useeffect/</link><pubDate>Thu, 19 Jan 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/javascript/react_useeffect/</guid><description> component가 rendering 될 때 실행 1useEffect(()=&amp;gt; { 2 ... 3}); component가 mount 될 때 (처음 rendering 될 때) 실행 1useEffect(()=&amp;gt; { 2 ... 3}, []); component가 update 될 때 (props, states가 바뀔 때) 실행 1useEffect(()=&amp;gt; { 2 ... 3}, [{ props or states }]); component가 unmount 될 때 또는 update되기 직전에 실행 1useEffect(()=&amp;gt; { 2 return () =&amp;gt; { 3 ... 4 }; 5}, []);</description></item><item><title>React - column을 기준으로 정렬하기</title><link>https://bong-u.github.io/til/javascript/react_table_sort/</link><pubDate>Tue, 17 Jan 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/javascript/react_table_sort/</guid><description>Table에 있는 데이터들을 column별로 정렬해야 한다 데이터의 형식에 따라 comparator를 따로 구현하였다 1const comparatorStr = (a, b, order) =&amp;gt; { 2 if (order === Order.ASC) return a.localeCompare(b); 3 return b.localeCompare(a); 4}; 5 6const comparatorInt = (a, b, order) =&amp;gt; { 7 if (order === Order.ASC) return a &amp;gt; b ? 1 : -1; 8 return a &amp;lt; b ? 1 : -1; 9}; 정렬할 키나 순서가 바뀔때 마다 정렬을 수행한다 1useEffect(() =&amp;gt; { 2 if (sortBy === Key.</description></item></channel></rss>
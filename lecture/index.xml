<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>👨‍🏫|특강 on Bong-u's TIL</title><link>https://bong-u.github.io/til/lecture/</link><description>Recent content in 👨‍🏫|특강 on Bong-u's TIL</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://bong-u.github.io/til/lecture/index.xml" rel="self" type="application/rss+xml"/><item><title>Spring Boot Framework - KAKAO 김가연 선배님</title><link>https://bong-u.github.io/til/lecture/spring_boot/</link><pubDate>Mon, 03 Apr 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/lecture/spring_boot/</guid><description>REST API REprensentational State Transfer 웹의 장점을 최대한 활용할 수 있는 아키텍처 Layered Architecture Presentation Layer 비즈니스 로직과 UI를 분리 @Controller가 붙은 클래스가 이에 해당 Service Layer 비즈니스 로직 구현 @Service가 붙은 클래스가 이에 해당 Data Access Layer 데이터를 조회, 등록, 수정, 삭제 @Repository가 붙은 클래스가 이에 해당 IoC Inversion of Control : 제어의 역전 모든 객체에 대한 제어권이 바뀌었음을 의미 객체의 주인이 개발자가 아닌 Spring application DI Constructor Injection</description></item><item><title>Git 특강 - 네이버 정다현 선배님</title><link>https://bong-u.github.io/til/lecture/git/</link><pubDate>Mon, 20 Mar 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/lecture/git/</guid><description>버전 관리 시스템 중앙집중식 버전 관리(CVCS) Centralized Version Control System
CVCS의 종류 : SVN, Perforce, CVS
문제
중앙 서버의 부하가 큼 오프라인에서는 사용이 불가능 분산 버전 관리 시스템 (DVCS) Decentralized Version Control System DVCS의 종류 : Git, Mercurial, Bazaar Git command gst : git status git log &amp;ndash;oneline : commit을 한줄로 출력 git log &amp;ndash;all &amp;ndash;graph : 그래프로 출력 merge의 3가지 종류 merge : 모든 commit들이 merge commit과 함께 merge squash and merge : 모든 commit들을 하나의 새로운 commit으로 요약하여 merge rebase and merge : 분기가 발생한 기준이 되는 base를 변경 특정 commit으로 롤백하는 방법 reset : commit 이력을 남기지 않고 되돌리기 revert : commit 이력을 남기고 되돌린다 현업에서는 revert를 주로 사용 reset git reset HEAD~ 옵션 &amp;ndash;soft : HEAD 위치 변경, 파일 변화 없음, commit 직전의 상황 &amp;ndash;mixed (default) : add하기 전으로 되돌려 준다, unstaged로 되돌려준다 &amp;ndash;hard : 변경 내용이 모두 사라짐 &amp;ndash;merge : merge 후에 되돌리기 위해서 사용 revert git revert HEAD cherry-pick git cherry pick &amp;lt;commit id&amp;gt; 다른 브랜치의 특정 commit 만을 가져 올 때 사용 Markdown 글자 하이라이트 *글자 기울이기* **굵은 글씨** ~~취소 선~~ 수평선 ---</description></item><item><title>협업프로세스 - LINE 나도희 선배님</title><link>https://bong-u.github.io/til/lecture/collaborative_process/</link><pubDate>Mon, 13 Mar 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/lecture/collaborative_process/</guid><description>IT 업계의 조직 구성 목적 조직 프로젝트 A : 기획, 개발자, 디자이너 프로젝트 B : 기획, 개발자, 디자이너 &amp;hellip; 프로젝트가 커지면 관리가 힘듦
기능 조직 기획 : 기획자, 기획자, 기획자 클라이언트 : 개발자, 개발자, 개발자 서버 : 개발자, 개발자, 개발자 부서내 개발자마다 하는 프로젝트가 다름
개발 방법론 Waterfall 개발 방법론 명확한 요구사항을 가지고 프로젝트를 진행 장점 대략적인 일정 산출이 가능함 프로젝트의 시작과 끝이 명확함 단점 피드백 처리가 느리다 중간에 수정이 어렵다 Agile 개발 방법론 짧은 개발 주기를 가지고 피드백을 계속 반영하면서 진행 단점 프로젝트의 시작과 끝이 명확하지 않다 프로젝트 관리가 상대적으로 어려움이 있음 Kanban : 프로젝트 관리 도구 카드를 이용해서 &amp;ldquo;할일&amp;rdquo;, &amp;ldquo;진행 중&amp;rdquo;, &amp;ldquo;완료&amp;rdquo; 항목을 나누어서 각 테스크의 상태를 관리하는 보드</description></item><item><title>쏘카 류석문 CTO님 특강</title><link>https://bong-u.github.io/til/lecture/socar_cto/</link><pubDate>Mon, 06 Mar 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til/lecture/socar_cto/</guid><description>개발자는 항상 변화하면서 성장해야 한다
개발자의 지속적인 성장 방법 깔끔한 코드 적절한 논리력 (= 문제 해결 능력) 개발이 완료 됐는지 검증하는 방법 ATDD (Acceptance Test Driven Development) : 고객, 개발자, 테스터 간의 커뮤니케이션을 기반으로 하는 개발 방법론 사용하는 코드만 만들기 (Celler Create) 리팩토링 (Refactoring) 코드 읽기 (Code Review) 알고리즘과 데이터 구조 (Don&amp;rsquo;t Reinvent The Wheel) 단순한 디자인 (Simple Design) 진화적 디자인 (Evolutionary Design) 협업 (Cooperative Design Design Review) 기술 벤치마킹 (Benchmarking) 이력서에 git repo 제출할 때, 꾸준히 개선하기 위해 고민하고 관리한 repo를 제출하자</description></item></channel></rss>
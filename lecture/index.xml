<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Lectures on bong-u's TIL</title><link>https://bong-u.github.io/til-hugo/lecture/</link><description>Recent content in Lectures on bong-u's TIL</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 13 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://bong-u.github.io/til-hugo/lecture/index.xml" rel="self" type="application/rss+xml"/><item><title>LINE 나도희 - 협업프로세스</title><link>https://bong-u.github.io/til-hugo/lecture/line_collaborative_process/</link><pubDate>Mon, 13 Mar 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til-hugo/lecture/line_collaborative_process/</guid><description>IT 업계의 조직 구성 목적 조직 프로젝트 A : 기획, 개발자, 디자이너 프로젝트 B : 기획, 개발자, 디자이너 &amp;hellip; 프로젝트가 커지면 관리가 힘듦
기능 조직 기획 : 기획자, 기획자, 기획자 클라이언트 : 개발자, 개발자, 개발자 서버 : 개발자, 개발자, 개발자 부서내 개발자마다 하는 프로젝트가 다름
개발 방법론 Waterfall 개발 방법론 명확한 요구사항을 가지고 프로젝트를 진행 장점 대략적인 일정 산출이 가능함 프로젝트의 시작과 끝이 명확함 단점 피드백 처리가 느리다 중간에 수정이 어렵다 Agile 개발 방법론 짧은 개발 주기를 가지고 피드백을 계속 반영하면서 진행 단점 프로젝트의 시작과 끝이 명확하지 않다 프로젝트 관리가 상대적으로 어려움이 있음 Kanban : 프로젝트 관리 도구 카드를 이용해서 &amp;ldquo;할일&amp;rdquo;, &amp;ldquo;진행 중&amp;rdquo;, &amp;ldquo;완료&amp;rdquo; 항목을 나누어서 각 테스크의 상태를 관리하는 보드</description></item><item><title>쏘카 류석문 CTO 특강</title><link>https://bong-u.github.io/til-hugo/lecture/socar_cto/</link><pubDate>Mon, 06 Mar 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til-hugo/lecture/socar_cto/</guid><description>개발자는 항상 변화하면서 성장해야 한다
개발자의 지속적인 성장 방법 깔끔한 코드 적절한 논리력 (= 문제 해결 능력) 개발이 완료 됐는지 검증하는 방법 ATDD (Acceptance Test Driven Development) : 고객, 개발자, 테스터 간의 커뮤니케이션을 기반으로 하는 개발 방법론 사용하는 코드만 만들기 (Celler Create) 리팩토링 (Refactoring) 코드 읽기 (Code Review) 알고리즘과 데이터 구조 (Don&amp;rsquo;t Reinvent The Wheel) 단순한 디자인 (Simple Design) 진화적 디자인 (Evolutionary Design) 협업 (Cooperative Design Design Review) 기술 벤치마킹 (Benchmarking) 이력서에 git repo 제출할 때, 꾸준히 개선하기 위해 고민하고 관리한 repo를 제출하자</description></item></channel></rss>
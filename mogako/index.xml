<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>모각코 on bong-u/til</title><link>https://bong-u.github.io/til/mogako/</link><description>Recent content in 모각코 on bong-u/til</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://bong-u.github.io/til/mogako/index.xml" rel="self" type="application/rss+xml"/><item><title>[모각코24하계] 04 : 결과</title><link>https://bong-u.github.io/til/mogako/mogako24-2-04/</link><pubDate>Thu, 18 Jul 2024 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/mogako/mogako24-2-04/</guid><description>배경 테커 부트캠프에서 팀프로젝트를 진행 중이다. 현재 비즈니스 로직을 수행하는 함수를 대상으로 Unit Test가 필요하다. Unit Test 코드를 작성하고, Github Actions를 이용하여 자동으로 테스트가 수행되도록 설정하고자 한다. run-pytest.yml 1name: Run pytest 2 3# main 또는 dev 브랜치에 pull request가 발생하면 실행 4on: 5 pull_request: 6 branches: 7 - main 8 - dev 9 10jobs: 11 test: 12 runs-on: ubuntu-latest 13 14 steps: 15 - name: Checkout code 16 uses: actions/checkout@v2 17 18 - name: Set up Python 19 uses: actions/setup-python@v2 20 with: 21 python-version: &amp;#39;3.</description></item><item><title>[모각코24하계] 04 : 계획</title><link>https://bong-u.github.io/til/mogako/mogako24-2-04plan/</link><pubDate>Thu, 18 Jul 2024 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/mogako/mogako24-2-04plan/</guid><description>오늘의 목표 Github Actions를 이용하여 pytest 자동화 테스트 환경 구축</description></item><item><title>[모각코24하계] 03 : 결과</title><link>https://bong-u.github.io/til/mogako/mogako24-2-03/</link><pubDate>Tue, 16 Jul 2024 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/mogako/mogako24-2-03/</guid><description>Fastapi, RabbitMQ, Celery 연동 배경 테커 부트캠프에서 팀프로젝트를 진행 중이다. 웹소켓을 통해 클라이언트로부터 받은 데이터를 gpt를 통해 처리하고, 결과를 다시 클라이언트로 보내는 서비스를 구현하고 있다. 여러 사용자의 요청을 원활하게 처리하기 위해 분산 비동기 시스템을 구축하려고 한다. 목표 Fastapi, RabbitMQ, Celery를 각자 docker 컨테이너로 구동시키고 연동한다. docker-compose.yml 1version: &amp;#39;3&amp;#39; 2 3services: 4 rabbitmq: 5 image: rabbitmq:3 6 ports: 7 - &amp;#34;5672:5672&amp;#34; # RabbitMQ의 AMQP 포트 8 - &amp;#34;15672:15672&amp;#34; # RabbitMQ 관리 인터페이스 포트 9 volumes: 10 - rabbitmq_data:/var/lib/rabbitmq 11 expose: 12 - &amp;#34;5672&amp;#34; 13 - &amp;#34;15672&amp;#34; 14 15 celery_worker: 16 build: 17 context: .</description></item><item><title>[모각코24하계] 03 : 계획</title><link>https://bong-u.github.io/til/mogako/mogako24-2-03plan/</link><pubDate>Tue, 16 Jul 2024 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/mogako/mogako24-2-03plan/</guid><description>오늘의 목표 RabbitMQ, Celery, Fastapi 연동 정리</description></item><item><title>[모각코24하계] 02 : 결과</title><link>https://bong-u.github.io/til/mogako/mogako24-2-02/</link><pubDate>Thu, 11 Jul 2024 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/mogako/mogako24-2-02/</guid><description>RAG (Retrieval-Augmented Generation) 이론 정리 RAG는 검색과 생성을 결합한 모델로, 검색을 통해 얻은 정보를 바탕으로 생성을 수행하는 모델
LLM의 문제점
할루시네이션: 생성 모델이 훈련 데이터에 없는 내용을 생성하는 현상 최신의 응답을 기대하는 상황에서 오래되었거나 일반적인 정보를 생성하는 문제 신뢰할 수 없는 출처로부터 정보를 생성하는 문제 RAG는 위에서 서술한 LLM 문제의 일부를 해결하기 위해 사용할 수 있는 수단이다.
OpenSearch OpenSearch는 오픈소스 검색 및 분석 엔진으로, 엘라스틱서치의 포크 버전</description></item><item><title>[모각코24하계] 02 : 계획</title><link>https://bong-u.github.io/til/mogako/mogako24-2-02plan/</link><pubDate>Thu, 11 Jul 2024 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/mogako/mogako24-2-02plan/</guid><description>오늘의 목표 RAG 이론 정리 OpenSearch를 활용한 Rag 적용</description></item><item><title>[모각코24하계] 01 : 결과</title><link>https://bong-u.github.io/til/mogako/mogako24-2-01/</link><pubDate>Tue, 02 Jul 2024 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/mogako/mogako24-2-01/</guid><description>django에서 swagger 문서화 구현하기 개요 장고 프레임워크를 사용하여 기본적인 CRUD 기능과, REST API를 구현하는 방법을 알아보자.
프로젝트 구조 1. 2├── db.sqlite3 3├── djtest (메인 앱) 4│ ├── __init__.py 5│ ├── asgi.py 6│ ├── settings.py 7│ ├── urls.py 8│ ├── views.py 9│ └── wsgi.py 10├── manage.py 11├── paste (생성한 앱) 12│ ├── __init__.py 13│ ├── admin.py 14│ ├── apps.py 15│ ├── migrations 16│ ├── models.py 17│ ├── serializers.</description></item><item><title>[모각코24하계] 01 : 계획</title><link>https://bong-u.github.io/til/mogako/mogako24-2-01plan/</link><pubDate>Tue, 02 Jul 2024 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/mogako/mogako24-2-01plan/</guid><description>오늘의 목표 django에서 swagger 문서화 구현하기 django에서 JWT 인증 구현하기</description></item><item><title>[모각코24동계] 06 : 결과</title><link>https://bong-u.github.io/til/mogako/mogako24-1-06/</link><pubDate>Wed, 14 Feb 2024 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/mogako/mogako24-1-06/</guid><description>테스트 기법 블랙박스 기법 개발자와 사용자들의 결험을 바탕으로 기능적 혹은 비기능적 테스트 케이스를 도출하고 선택하는 방법
명세 기반 기법과 경험 기반 기법을 포함 화이트박스 기법 컴포넌트 또는 시스템의 내부 구조를 중심으로 테스트를 도출하는 방법
구조 기반 기법 포함 명세 기반 기법 특징 해결할 문제를 명세하기 위해 모델을 사용한다 모델에서 테스트 케이스를 시스템적으로 도출하는 것이 가능하다 종류 동등 분할 경계값 분석 결정테이블 테스팅 상태전이 테스팅 유즈케이스 테스팅 경험 기반 기법 특징 테스트 관련 인력의 지식이나 경험으로 테스트 케이스를 도출한다 종류 탐색적 테스팅 오류 추정 체크리스트 구조 기반 기법 특징 코드와 개발 설계 등의 소프트웨어 구현 정보를 기반으로 테스트 케이스를 도출한다 종류 구문 테스팅과 커버리지 결정 테스팅과 커버리지 조건 / 결정 커버리지 변경 조건/ 결정 커버리지 다중 조건 커버리지</description></item><item><title>[모각코24동계] 06 : 계획</title><link>https://bong-u.github.io/til/mogako/mogako24-1-06plan/</link><pubDate>Wed, 14 Feb 2024 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/mogako/mogako24-1-06plan/</guid><description>오늘의 목표 테스트 기법 종류 정리하기</description></item><item><title>[모각코24동계] 05 : 결과</title><link>https://bong-u.github.io/til/mogako/mogako24-1-05/</link><pubDate>Tue, 30 Jan 2024 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/mogako/mogako24-1-05/</guid><description>임시 테이블 지역 임시 테이블 (Local Temporary Table) 현재 connection에서만 사용 가능하다 해당 connection이 종료되면 테이블이 자동으로 삭제된다 테이블 이름 앞에 #를 붙여 사용한다 전역 임시 테이블 (Global Temporary Table) 다른 connection에서도 사용 가능하다 마지막 connection이 종료되면 테이블이 사라진다 테이블 이름 앞에 ##를 붙여 사용한다 생성하는 방법 1 - CREATE 사용 1CREATE TABLE #temp ( 2 id INT, 3 name VARCHAR(20) 4) 생성하는 방법 2 - SELECT INTO 사용 1SELECT * 2INTO #temp 3FROM table 특징 인덱스, 제약 조건 등은 복사되지 않는다 SELECT할때 ORDER BY를 사용해도 정렬된 순서대로 저장되지 않는다 LOCK 배타적 잠금 (Exclusive Lock, X) 하나의 특정 트랜잭션만 해당 리소스에 접근할 수 있다</description></item><item><title>[모각코24동계] 05 : 계획</title><link>https://bong-u.github.io/til/mogako/mogako24-1-05plan/</link><pubDate>Tue, 30 Jan 2024 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/mogako/mogako24-1-05plan/</guid><description>오늘의 목표 MSSQL 임시테이블 정리 MSSQL NOLOCK 정리</description></item><item><title>[모각코24동계] 04 : 결과</title><link>https://bong-u.github.io/til/mogako/mogako24-1-04/</link><pubDate>Tue, 23 Jan 2024 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/mogako/mogako24-1-04/</guid><description>Recursive Query 1WITH RECURSIVE CTE AS ( 2 SELECT 0 AS A 3 UNION ALL 4 SELECT A+1 AS NUM 5 FROM CTE 6 WHERE A &amp;lt; 10 # 0 부터 10까지 포함 7) 결과 (CTE테이블) A NUM 0 NULL … … 10 NULL 성능 비교 LIMIT 1 VS 서브쿼리 1SELECT PRODUCT_ID, PRODUCT_NAME, PRODUCT_CD, CATEGORY, PRICE 2FROM FOOD_PRODUCT 3ORDER BY PRICE DESC 4LIMIT 1; 1SELECT * 2FROM FOOD_PRODUCT 3WHERE PRICE IN ( 4 SELECT MAX(PRICE) FROM FOOD_PRODUCT 5); LIMIT 1을 사용하는 쿼리는 모든 COLUMN의 데이터를 가져오고, 서브쿼리는 PRICE의 최대값만 가져와서 구하기 때문에, 테이블이 클수록 서브쿼리가 더 빠르다.</description></item><item><title>[모각코24동계] 04 : 계획</title><link>https://bong-u.github.io/til/mogako/mogako24-1-04plan/</link><pubDate>Tue, 23 Jan 2024 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/mogako/mogako24-1-04plan/</guid><description>오늘의 목표 SQL Recursive Query 공부 SQL 문제 풀면서 배운 것 정리</description></item><item><title>[모각코24동계] 03 : 결과</title><link>https://bong-u.github.io/til/mogako/mogako24-1-03/</link><pubDate>Wed, 17 Jan 2024 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/mogako/mogako24-1-03/</guid><description>Sub Query 단일 행 서브 쿼리 서브쿼리 결과 : 단일 행 결과 : 단일 행 1SELECT USER_ID, USER_NAME, USER_AGE 2FROM USERS 3WHERE TEAM_ID = ( 4 SELECT TEAM_ID 5 FROM USERS 6 WHERE USER_NAME=&amp;#39;BONG&amp;#39; 7); 다중 행 서브 쿼리 서브쿼리 결과 : 다중 행 결과 : 단일행 다중 행 비교 연산자와 함께 사용 (IN, ALL, ANY, SOME) 1SELECT TEAM_ID, TEAM_NAME, TEAM_LOGO_URL 2FROM TEAM 3WHERE TEAM_ID IN ( 4 SELECT TEAM_ID 5 FROM USERS 6 WHERE USER_NAME=&amp;#39;BONG&amp;#39; 7) 다중 컬럼 서브 쿼리 서브쿼리의 결과: 다중 행 결과 : 다중 행 1SELECT TEAM_ID, USER_NAME 2FROM USERS 3WHERE (TEAM_ID, HEIGHT) 4IN ( 5 SELECT TEAM_ID, MIN(HEIGHT) 6 FROM USERS 7 GROUP BY TEAM_ID 8) 9ORDER BY TEAM_ID, USER_NAME 연관 서브 쿼리 1SELECT B.</description></item><item><title>[모각코24동계] 03 : 계획</title><link>https://bong-u.github.io/til/mogako/mogako24-1-03plan/</link><pubDate>Wed, 17 Jan 2024 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/mogako/mogako24-1-03plan/</guid><description>오늘의 목표 SQL 서브쿼리 공부</description></item><item><title>[모각코24동계] 02 : 결과</title><link>https://bong-u.github.io/til/mogako/mogako24-1-02/</link><pubDate>Tue, 09 Jan 2024 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/mogako/mogako24-1-02/</guid><description>SQL 기초 공부 DDL (Data Definition Language) CREATE ALTER DROP RENAME TRUNCATE DML (Data Manipulation Language) SELECT INSERT UPDATE DELETE DCL (Data Control Language) GRANT REVOKE TCL (Transaction Control Language) COMMIT ROLLBACK SAVEPOINT SELECT GROUP BY 특정 Column기준으로 그룹화
그룹화 하지 않은 Column은 집계함수(SUM, COUNT)를 통해서만 조회해야한다
1SELECT name, COUNT(name), SUM(quantity) FROM 테이블 GROUP BY name; HAVING GROUP BY 절에서 조건을 주기 위해 사용</description></item><item><title>[모각코24동계] 02 : 계획</title><link>https://bong-u.github.io/til/mogako/mogako24-1-02plan/</link><pubDate>Tue, 09 Jan 2024 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/mogako/mogako24-1-02plan/</guid><description>오늘의 목표 SQL 기초 공부 DDL DML DCL TCL DDL (Data Definition Language) DML (Data Manipulation Language) DCL (Data Control Language) TCL (Transaction Control Language)</description></item><item><title>[모각코24동계] 01 : 결과</title><link>https://bong-u.github.io/til/mogako/mogako24-1-01/</link><pubDate>Wed, 03 Jan 2024 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/mogako/mogako24-1-01/</guid><description>1. Agile 방법론 Agile 선언문 사람과 상호작용 &amp;gt; 프로세스와 도구 작동하는 소프트웨어 &amp;gt; 포괄적인 문서 고객과의 협력 &amp;gt; 계약 협상 변화에 대한 대응 &amp;gt; 계획을 따르기 Agile 12가지 원칙 초기부터 지속적으로 고객을 만족 요구사항 변경 수용 짧은 배포 주기 기획자와 개발자의 협업 동기부여된 팀원들로 팀빌딩 얼굴보고 대화하기 동작되는 소프트웨어로 진척 측정 지속 가능한 개발 속도 유지 좋은 기술로 좋은 설계하기 단순성 : 필요없는 일 최소화하기 자기조직화 팀 정기적으로 효율성을 향상시키기 Self-Organizing Team (자기조직화 팀) 스스로 작업을 수행하고 프로세스를 관리하며 진행 상황을 모니터링하는 방법을 스스로 결정하는 팀</description></item><item><title>[모각코24동계] 01 : 계획</title><link>https://bong-u.github.io/til/mogako/mogako24-1-01plan/</link><pubDate>Wed, 03 Jan 2024 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/mogako/mogako24-1-01plan/</guid><description>오늘의 목표 LG CNS 본사 인턴 교육 내용 정리 Agile 방법론 Scrum 방법론</description></item><item><title>[모각코24하계] 00 : 목표</title><link>https://bong-u.github.io/til/mogako/mogako24-1-00/</link><pubDate>Wed, 03 Jan 2024 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/mogako/mogako24-1-00/</guid><description>나의 목표 성실한 포스팅으로 1일 1커밋을 향해 노력하겠다. 백마인턴십을 수행하면서 업무와 관련한 내용을 공부하며 정리하겠다. 직접 운영 중인 블로그를 개선 시켜 나가겠다.</description></item><item><title>[모각코23하계] 06 : 결과</title><link>https://bong-u.github.io/til/mogako/mogako23-1-06/</link><pubDate>Wed, 16 Aug 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/mogako/mogako23-1-06/</guid><description>프로그래머스 한 문제 풀기 프로그래머스 - n^2 배열 자르기 (L2) 🧠 Algorithm
1def solution(n, left, right): 2 answer = [] 3 start = (left//n, left%n) 4 end = (right//n, right%n) 5 6 for i in range(start[0], end[0]&amp;#43;1): 7 line = [i&amp;#43;1]*(i&amp;#43;1) &amp;#43; [i for i in range(i&amp;#43;2, n&amp;#43;1)] 8 answer &amp;#43;= line 9 10 return answer[start[1]:right-(start[0]*n)&amp;#43;1] 문제 정수 n, left, right가 주어진다 n X n 크기의 2차원 배열을 만든다 i=1,2,3.</description></item><item><title>[모각코23하계] 06 : 계획</title><link>https://bong-u.github.io/til/mogako/mogako23-1-06plan/</link><pubDate>Wed, 16 Aug 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/mogako/mogako23-1-06plan/</guid><description>오늘의 목표 프로그래머스 한 문제 풀기 MockMvc 정리하기</description></item><item><title>[모각코23하계] 05 : 결과</title><link>https://bong-u.github.io/til/mogako/mogako23-1-05/</link><pubDate>Wed, 09 Aug 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/mogako/mogako23-1-05/</guid><description>프로그래머스 한 문제 풀기 프로그래머스 - 두 큐 합 같게 만들기 (L2) 🧠 Algorithm
1from collections import deque 2 3def solution(queue1, queue2): 4 sum1, sum2 = sum(queue1), sum(queue2) 5 dq1 = deque(queue1) 6 dq2 = deque(queue2) 7 cnt = 0 8 9 while cnt &amp;amp;lt;= len(queue1)*2&amp;#43;1 and sum1 != sum2: 10 if sum1 &amp;amp;gt; sum2: 11 tmp = dq1.popleft() 12 dq2.append(tmp) 13 sum1 -= tmp 14 sum2 &amp;#43;= tmp 15 elif sum1 &amp;amp;lt; sum2: 16 tmp = dq2.</description></item><item><title>[모각코23하계] 05 : 계획</title><link>https://bong-u.github.io/til/mogako/mogako23-1-05plan/</link><pubDate>Wed, 09 Aug 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/mogako/mogako23-1-05plan/</guid><description>오늘의 목표 프로그래머스 한 문제 풀기 JPA 정리하기</description></item><item><title>[모각코23하계] 04 : 결과</title><link>https://bong-u.github.io/til/mogako/mogako23-1-04/</link><pubDate>Wed, 26 Jul 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/mogako/mogako23-1-04/</guid><description>1. 프로그래머스 한 문제 풀기 프로그래머스 - 디펜스 게임 (L2) 🧠 Algorithm
1import heapq 2 3def solution(n, k, enemy): 4 heap = [] 5 cnt = 0 6 for i in enemy: 7 n -= i 8 heapq.heappush(heap, -i) 9 while n &amp;amp;lt; 0: 10 k -= 1 11 if not heap or k &amp;amp;lt; 0: 12 return cnt 13 tmp = -heapq.heappop(heap) 14 n &amp;#43;= tmp 15 cnt &amp;#43;= 1 16 return cnt 문제 n: 가지고 있는 병사 수 k: 사용할 수 있는 무적권 스킬 수 enemy: 라운드마다 존재하는 적 수의 배열 라운드마다 enemy[i]명 만큼 소모하여 enemy[i]마리의 적을 막을 수 있다 무적권을 적절히 사용하여 버틸 수 있는 최대 라운드 수를 구하라 TC input n: 7, k: 3, enemy: [4, 2, 4, 5, 3, 3, 1] 2.</description></item><item><title>[모각코23하계] 04 : 계획</title><link>https://bong-u.github.io/til/mogako/mogako23-1-04plan/</link><pubDate>Wed, 26 Jul 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/mogako/mogako23-1-04plan/</guid><description>오늘의 목표 프로그래머스 한 문제 풀기 @RestController 정리</description></item><item><title>[모각코23하계] 03 : 결과</title><link>https://bong-u.github.io/til/mogako/mogako23-1-03/</link><pubDate>Wed, 19 Jul 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/mogako/mogako23-1-03/</guid><description>1. 프로그래머스 한 문제 풀기 프로그래머스 - 숫자 변환하기 (L2) 🧠 Algorithm
1from collections import deque 2 3def solution(x, y, n): 4 q = deque() 5 visited = [False] * 1000001 6 q.append((x, 0)) 7 8 while q: 9 cx, cnt = q.popleft() 10 if cx == y: 11 return cnt 12 13 if cx &amp;#43; n &amp;amp;lt;= y and not visited[cx&amp;#43;n]: 14 q.append((cx&amp;#43;n, cnt&amp;#43;1)) 15 visited[cx&amp;#43;n] = True 16 if cx * 2 &amp;amp;lt;= y and not visited[cx*2]: 17 q.</description></item><item><title>[모각코23하계] 03 : 계획</title><link>https://bong-u.github.io/til/mogako/mogako23-1-03plan/</link><pubDate>Wed, 19 Jul 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/mogako/mogako23-1-03plan/</guid><description>오늘의 목표 프로그래머스 한 문제 풀기 JDBC 정리</description></item><item><title>[모각코23하계] 02 : 결과</title><link>https://bong-u.github.io/til/mogako/mogako23-1-02/</link><pubDate>Wed, 12 Jul 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/mogako/mogako23-1-02/</guid><description>1. 프로그래머스 한 문제 풀기 프로그래머스 - 당구 연습 (L2) 🧠 Algorithm
1def solution(m, n, startX, startY, balls): 2 answer = [] 3 for bx, by in balls: 4 tmp = [] 5 for x, y in [(-1*startX, startY), (startX, -1*startY), (startX, 2*n-startY), (2*m-startX, startY)]: 6 if bx==x and (y &amp;amp;lt; 0 &amp;amp;lt; by &amp;amp;lt; startY or startY &amp;amp;lt; by &amp;amp;lt; n &amp;amp;lt; y): 7 continue 8 if by==y and (x &amp;amp;lt; 0 &amp;amp;lt; bx &amp;amp;lt; startX or startX &amp;amp;lt; bx &amp;amp;lt; m &amp;amp;lt; x): 9 continue 10 tmp.</description></item><item><title>[모각코23하계] 02 : 계획</title><link>https://bong-u.github.io/til/mogako/mogako23-1-02plan/</link><pubDate>Wed, 12 Jul 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/mogako/mogako23-1-02plan/</guid><description>오늘의 목표 프로그래머스 한 문제 풀기 Springboot Testing 공부하기</description></item><item><title>[모각코23하계] 01 : 결과</title><link>https://bong-u.github.io/til/mogako/mogako23-1-01/</link><pubDate>Wed, 05 Jul 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/mogako/mogako23-1-01/</guid><description>1. 프로그래머스 한 문제 풀기 프로그래머스 - 두 원 사이의 정수 쌍 (L2) 🧠 Algorithm
1import math 2 3def calc1(r): 4 result = 0 5 for i in range(1, r): 6 result &amp;#43;= math.floor(math.sqrt(r**2 - i**2)) 7 return result*4 &amp;#43; r*4 &amp;#43; 1 8 9def calc2(r): 10 result = 0 11 for i in range(1, r): 12 a = math.sqrt(r**2 - i**2) 13 result &amp;#43;= math.floor(a) 14 if a % 1 == 0: 15 result -= 1 16 return result*4 &amp;#43; r*4 &amp;#43; 1 17 18def solution(r1, r2): 19 return calc1(r2)-calc2(r1)&amp;#43;4 문제 두 원의 반지름 r1, r2가 주어진다.</description></item><item><title>[모각코23하계] 01 : 계획</title><link>https://bong-u.github.io/til/mogako/mogako23-1-01plan/</link><pubDate>Wed, 05 Jul 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/mogako/mogako23-1-01plan/</guid><description>오늘의 목표 프로그래머스 한 문제 풀기 Java의 record 개념 정리하기</description></item><item><title>[모각코23하계] 00 : 목표</title><link>https://bong-u.github.io/til/mogako/mogako23-1-00/</link><pubDate>Mon, 26 Jun 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/mogako/mogako23-1-00/</guid><description>나의 목표 1. 성실한 포스팅으로 1일 1커밋을 향해 노력하겠다. 2. SW Academy에서 배운 Spring boot 기술을 상세하게 정리할 것이다. 2. 현재 기술 블로그의 디자인을 개선시킬 것이다. SW Academy 교육과정 - Backend 프레임워크를 위환 Java 심화 실리콘밸리에서 날아온 DataBase Spring Boot Basic 1 Spring Boot Basic 2 Spring Boot Basic 3 Spring Data Security 1 Spring Data Security 2</description></item></channel></rss>
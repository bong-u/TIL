<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on bong-u/til</title><link>https://bong-u.github.io/til/python/</link><description>Recent content in Python on bong-u/til</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://bong-u.github.io/til/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Fastapi - 통합테스트 In-Memory DB에서 테이블이 없다는 문제</title><link>https://bong-u.github.io/til/python/fastapi_db_test/</link><pubDate>Mon, 22 Jul 2024 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/python/fastapi_db_test/</guid><description>상황 테커 부트캠프에서 팀프로젝트를 진행 중이다. 단위테스트 코드는 작성이 완료되었고, 통합테스트 코드를 작성 중이다. sqlite in-memory db를 사용해서 테스트 중인데, 테이블이 없다는 에러가 발생했다. 테스트 전에 테이블을 생성하는 코드가 실행됨에도 불구하고, 에러가 발생한다. 인메모리가 아닌 파일로 저장하는 방법을 사용하면 에러가 발생하지 않는 것을 보고 문제의 원인을 파악할 수 있었다. 코드 1from database import Base, engine 2from fastapi.testclient import TestClient 3 4from main import app 5from models import * 6 7# 테이블을 생성하는 코드이다 8Base.</description></item><item><title>Github Actions에서 pytest 실행하기</title><link>https://bong-u.github.io/til/python/github_action_pytest/</link><pubDate>Wed, 17 Jul 2024 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/python/github_action_pytest/</guid><description>배경 테커 부트캠프에서 팀프로젝트를 진행 중이다. 현재 비즈니스 로직을 수행하는 함수를 대상으로 Unit Test가 필요하다. Unit Test 코드를 작성하고, Github Actions를 이용하여 자동으로 테스트가 수행되도록 설정하고자 한다. run-pytest.yml 1name: Run pytest 2 3# main 또는 dev 브랜치에 pull request가 발생하면 실행 4on: 5 pull_request: 6 branches: 7 - main 8 - dev 9 10jobs: 11 test: 12 runs-on: ubuntu-latest 13 14 steps: 15 - name: Checkout code 16 uses: actions/checkout@v2 17 18 - name: Set up Python 19 uses: actions/setup-python@v2 20 with: 21 python-version: &amp;#39;3.</description></item><item><title>Fastapi, RabbitMQ, Celery 연동</title><link>https://bong-u.github.io/til/python/fastapi_rabbitmq_celery/</link><pubDate>Thu, 11 Jul 2024 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/python/fastapi_rabbitmq_celery/</guid><description>배경 테커 부트캠프에서 팀프로젝트를 진행 중이다. 웹소켓을 통해 클라이언트로부터 받은 데이터를 gpt를 통해 처리하고, 결과를 다시 클라이언트로 보내는 서비스를 구현하고 있다. 여러 사용자의 요청을 원활하게 처리하기 위해 분산 비동기 시스템을 구축하려고 한다. 목표 Fastapi, RabbitMQ, Celery를 각자 docker 컨테이너로 구동시키고 연동한다. docker-compose.yml 1version: &amp;#39;3&amp;#39; 2 3services: 4 rabbitmq: 5 image: rabbitmq:3 6 ports: 7 - &amp;#34;5672:5672&amp;#34; # RabbitMQ의 AMQP 포트 8 - &amp;#34;15672:15672&amp;#34; # RabbitMQ 관리 인터페이스 포트 9 volumes: 10 - rabbitmq_data:/var/lib/rabbitmq 11 expose: 12 - &amp;#34;5672&amp;#34; 13 - &amp;#34;15672&amp;#34; 14 15 celery_worker: 16 build: 17 context: .</description></item><item><title>Django - JWT 인증</title><link>https://bong-u.github.io/til/python/django_jwt/</link><pubDate>Fri, 28 Jun 2024 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/python/django_jwt/</guid><description>JWT(Json Web Token)는 웹 표준으로, JSON 객체를 사용하여 정보를 안전하게 전달하는 방식이다.
JWT 인증 구현하기 장고에서는 djangorestframework-simplejwt 패키지를 사용하여 JWT 인증을 구현할 수 있다.
requirements 1pip install djangorestframework-simplejwt settings.py 1INSTALLED_APPS = [ 2 ... 3 &amp;#39;rest_framework&amp;#39;, 4 &amp;#39;rest_framework_simplejwt&amp;#39;, 5] 1REST_FRAMEWORK = { 2 # 기본 인증 클래스를 설정 3 &amp;#39;DEFAULT_AUTHENTICATION_CLASSES&amp;#39;: ( 4 &amp;#39;rest_framework_simplejwt.authentication.JWTAuthentication&amp;#39;, 5 ), 6 # 기본 스키마 클래스를 설정, CoreAPI를 사용하여 자동으로 API 문서화를 생성 7 &amp;#39;DEFAULT_SCHEMA_CLASS&amp;#39;: &amp;#39;rest_framework.</description></item><item><title>Django - crud 기초</title><link>https://bong-u.github.io/til/python/django_basic/</link><pubDate>Wed, 26 Jun 2024 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/python/django_basic/</guid><description>개요 장고 프레임워크를 사용하여 기본적인 CRUD 기능과, REST API를 구현하는 방법을 알아보자.
프로젝트 구조 1. 2├── db.sqlite3 3├── djtest (메인 앱) 4│ ├── __init__.py 5│ ├── asgi.py 6│ ├── settings.py 7│ ├── urls.py 8│ ├── views.py 9│ └── wsgi.py 10├── manage.py 11├── paste (생성한 앱) 12│ ├── __init__.py 13│ ├── admin.py 14│ ├── apps.py 15│ ├── migrations 16│ ├── models.py 17│ ├── serializers.py 18│ ├── tests.py 19│ ├── urls.</description></item><item><title>[오픈소스] thefuck - pip uninstall 규칙 추가</title><link>https://bong-u.github.io/til/python/thefuck_pip/</link><pubDate>Thu, 09 Nov 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/python/thefuck_pip/</guid><description>PR #1414 : Correct &amp;ldquo;pip delete|remove&amp;rdquo; -&amp;gt; &amp;ldquo;pip uninstall&amp;rdquo; 배경 pip uninstall &amp;lt;package&amp;gt;는 파이썬 패키지를 삭제하는 명령어이다. 헷갈려서 remove, delete로 오타를 친 경험이 있다. thefuck에서 지원하지 않는 것을 확인하고 기여하기로 했다. 과정 기존의 로직 : 오타가 났을 때, pip 명령에서 “maybe you meant” 하면서 추천해주는 명령어가 있다면 추천, 하지만 remove와 delete는 그 대상이 아님 잘못된 명령어가 ‘delete’ 또는 ‘remove’인 경우 suggest에 uninstall을 대입하도록 수정 1if broken_cmd == &amp;#39;delete&amp;#39; or broken_cmd == &amp;#39;remove&amp;#39;: 2 suggest = &amp;#39;uninstall&amp;#39; 테스트 코드 수정 1# 의도한대로 명령어를 잘 바꿔주는지 테스트 2@pytest.</description></item></channel></rss>
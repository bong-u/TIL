<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Schools on bong-u's TIL</title><link>https://bong-u.github.io/til-hugo/school/</link><description>Recent content in Schools on bong-u's TIL</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 26 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://bong-u.github.io/til-hugo/school/index.xml" rel="self" type="application/rss+xml"/><item><title>데이터통신</title><link>https://bong-u.github.io/til-hugo/school/datacommunication/</link><pubDate>Sun, 26 Mar 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til-hugo/school/datacommunication/</guid><description>메시지(패킷, 프레임), 계층 OSI 7 Model Physical Data Link Network Transport Session Presentation Application TCP/IP 계층 계층 이름 메시지 형태 내용 1 Phisical Bits Bits 2 Data Link Ethernet Frame Ethernet 주소 3 Network IP packet, Datagram IP 주소 4 Transport TCP Segment, UDP Datagram Port 번호 5 Application HTTP 메시지, Email 메시지 URL, Email 주소 패킷 HTTP - TCP - IP - Ethernet 아날로그 신호 - 사인 함수 $$ y(t) = A sin(2\pi ft + \varphi)$$</description></item><item><title>230315 기프랩 Design Thinking 방법론 - 김재정 교수님</title><link>https://bong-u.github.io/til-hugo/school/basicprojectlab_design_thinking/</link><pubDate>Wed, 15 Mar 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til-hugo/school/basicprojectlab_design_thinking/</guid><description>디자인 씽킹이란 공감의 과정을 통해 문제점을 찾아내고, 아이디어를 발산하고, 프로토타입을 만들어 검증 과정을 거치는, 반복적 프로세스에 대한 방법론 및 사고방식 디자인 씽킹 프로세스 공감 - 문제 정의 - 아이디어 도출 - 프로토타이핑 - 테스팅 1. 공감 공감 프로세스 면담하기 관찰하기 경험하기 면담지 준비하기 순차적 경험 질문 : 어떤 순서로 행동하고 경험하는지 물어보자 감정 질문 이유 질문 : 행동 또는 감정에 대한 이유를 물어보자 또 질문 : &amp;ldquo;또&amp;hellip;&amp;ldquo;라는 질문을 많이 하자 구체화 질문 관찰하기 | 모니터링 현장 중심 관찰 : 세상을 넓고 깊게 바라보기 관찰하기 | 쉐도잉 사람의 체험이나 행동을 그자리에서 관찰하기 관찰하기 | 맥락 질의법 현장에서 관찰 및 면담을 통해 대상자에 대한 이해를 하는 방법</description></item><item><title>운영체제</title><link>https://bong-u.github.io/til-hugo/school/operatingsystem/</link><pubDate>Mon, 06 Mar 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til-hugo/school/operatingsystem/</guid><description>운영체제 개요 운영체제의 역할 Program execution Access to computer resources (I/O device, Data&amp;hellip;) Error detection and response Accounting (ex: task manager) 운영체제의 발전 Serial Processing : No OS, No Job scheduling
Simple batch system
OS가 job을 할당 Controlled by monitor Uni-programming
다 실행될때까지 기다림 bad utilization Multiprogramming
The processor can switch to the other job better utilization, needs more memory Time sharing</description></item><item><title>자료구조</title><link>https://bong-u.github.io/til-hugo/school/datastructure/</link><pubDate>Thu, 02 Mar 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til-hugo/school/datastructure/</guid><description>제 1장 : 자료구조를 배우기 위한 준비 (230302) 배열 배열(Array): 동일한 타입의 원소들이 연속적인 메모리 공간에 할당되어 있는 기초적인 자료구조 추상데이터 타입 추상데이터타입(ADT:Abstract Data Type) : 데이터와 그 데이터에 대한 추상적인 연산들로써 구성 ADT =~ 자바의 interface, 자료구조 =~ 자바의 class 자료구조는 추상데이터타입을 구체적으로 구현한 것 1-2 수행시간의 분석 알고리즘의 성능: 수행시간을 나타내는 **시간복잡도(Time Complexity)**와 알고리즘이 수행되는 동안 사용되는 메모리 공간의 크기를 나타내는 **공간복잡도(Space Complexity)**에 기반하여 분석 시간 복잡도</description></item><item><title>확률과 통계</title><link>https://bong-u.github.io/til-hugo/school/probabilityandstatistics/</link><pubDate>Thu, 02 Mar 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til-hugo/school/probabilityandstatistics/</guid><description/></item><item><title>221207 SYSP</title><link>https://bong-u.github.io/til-hugo/school/sysp_09_11/</link><pubDate>Mon, 09 Jan 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til-hugo/school/sysp_09_11/</guid><description>목차 09 - process 1 10 - process 2 11 - signal 09-process1 예외적인 제어 흐름 하위 매커니즘 예외 (Exception) 상위 매커니즘 프로세스 컨텍스트 전환 OS 소프트웨어와 하드웨어 타이머로 구현 시그널 OS 소프트웨어로 구현 nolocal 점프 예외 테이블 (Exception Tables) 각 이벤트 타입은 예외번호 k를 갖는다 비동기형 예외 (Interrupt) 입출력 인터럽트 (ctrl + c)</description></item><item><title>221208 SYSP</title><link>https://bong-u.github.io/til-hugo/school/sysp_12_13/</link><pubDate>Mon, 09 Jan 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til-hugo/school/sysp_12_13/</guid><description>목차 12 - memory 1 13 - memory 2 12-memory-1 메모리에 관한 불편한 진실 메모리는 무한의 자원이 아니다 동적 메모리 할당 직접(explicit) vs 간접(implicit) 메모리 할당기 직접 할당 : 응용프로그램이 할당하고, 반환한다 ex) malloc, free 간접 할당 : 응용프로그램이 할당하지만, 반환하지는 않는다 ex) java의 garbage collector 프로세스의 메모리 이미지 스택은 아래로, 힙은 위로 성장한다 sbrk 함수가 추가적인 힙 메모리를 운영체제로부터 요청한다 (brk 포인터 이동) Malloc package #include &amp;lt;stdlib.</description></item><item><title>객체지향설계</title><link>https://bong-u.github.io/til-hugo/school/ood/</link><pubDate>Mon, 09 Jan 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til-hugo/school/ood/</guid><description>Dynamic dispatch and Multiple inheritance Polymorphism Function overloading using compile time types of arguments Function overriding using runtime types of receiver objects virtual function for dynamic dispatch dynamic dispatch를 사용하기 위한 조건
함수가 virtual keyword로 정의되어 있어야 한다.
receiver object가 포인터(*), 참조(&amp;amp;)를 통해 refer되어야 한다
// from parent class : Employee virtual std::string GetInfo() { return &amp;#34;Employee: &amp;#34; + name_ ; } // from child class : Developer std::string GetInfo() { return &amp;#34;Developer: &amp;#34; + name_; } override keyword override 키워드를 사용하는 이유 직관적인 코드</description></item><item><title>현대인의 생활문화</title><link>https://bong-u.github.io/til-hugo/school/mplc/</link><pubDate>Mon, 09 Jan 2023 00:00:00 +0000</pubDate><guid>https://bong-u.github.io/til-hugo/school/mplc/</guid><description>목차 1. 글로벌 매너 2. 소개와 인사1 3. 소개와 인사2 4. 세계 각 국의 인사법 5. 명함매너 6. 사교매너 방문 접대 임신 출산 7. 경조사 생일 결혼 8. 경조사 장례 9. 경조사 제례 10. 청탁금지법 11. 저작권법 12. 직장매너 13. 20대 자산형성 14. 재무목표 설정 방법 15. 블랙 컨슈머 16. 사회적 기업 17. 커뮤니케이션 매너 18. 음주매너1 19. 음주매너2 20. 흡연매너 21. 한국음식 22. 글로벌전통음식 : 브라질, 중국 23. 글로벌전통음국 : 프랑스 글로벌 매너 매너 인간관계를 맺는데 있어 중요한 요소</description></item></channel></rss>
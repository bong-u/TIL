<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>학과 공부 on Bong-u's TIL</title><link>https://bong-u.github.io/til/school/</link><description>Recent content in 학과 공부 on Bong-u's TIL</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://bong-u.github.io/til/school/index.xml" rel="self" type="application/rss+xml"/><item><title>소프트웨어공학</title><link>https://bong-u.github.io/til/school/software_engineering/</link><pubDate>Tue, 24 Oct 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/school/software_engineering/</guid><description>1장 소프트웨어 공학 개요 소프트웨어의 종류 주문형, 패키지형, 임베디드 시스템 실시간 소프트웨어, 자료처리 소프트웨어 소프트웨어 공학의 정의 IEEE : 소프트웨어의 개발, 운용, 유지보수 및 파기에 대한 체계적인 접근 W.Humphrey : 질 좋은 소프트웨어를 경제적으로 생산하기 위하여 공학, 과학, 수학적 원리에 의하여 소프트웨어를 개발해야한다 소프트웨어 품질 사용용이성(usability) 효율성(efficiency) 신뢰성(reliability) 유지보수성(maintainability) 재사용성(reusability) 소프트웨어 프로젝트 작업 요구분석과 명세화 도메인 분석, 문제 정의, 요구 추출, 요구 분석, 요구 명세화 설계 : 가용한 기술로 어떻게 구현되어야하는지 기술 시스템 엔지니어링, 소프트웨어 아키텍쳐 UI 설계, DB 설계 모델링 : 도메인이나 소프트웨어의 표현을 만들어 나가는 과정 유스케이스 모델링 정적 모델링, 동적 모델링, 행위 모델링 프로그래밍 품질보증 리뷰, 인스펙션, 테스트 배포 프로세스 관리 2장 소프트웨어 프로세스 폭포수 모델 (Waterfall Model) 각 단계가 다음 시작 전에 끝나야 함 -&amp;gt; 느림 프로토타입과 재사용의 기회가 줄어듦 프로토타입 모델 (Prototyping Model) 인간-기계 상호작용 프로토타입 프로토타입을 만든다 - 프로토타입을 평가한다 점증적 모델 (Incremental Model) 점증적 방법: 기능별로 릴리즈 반복적 방법: 릴리즈 할때마다 기능의 완성도를 높인다 기능이 부족하더라도 빨리 릴리즈 가능 나선형 모델 (Spiral Model) 진화 단계 계획 수립 위험 분석 개발 평가 반복적인 개발 및 테스트 -&amp;gt; 강인성 향상 관리, 위험 분석이 중요 진화적 모델 (Evolutionary Model) 초기에 요구사항을 파악하기 힘들고 구현이 어려운 경우, 요구사항 분석을 한 번이상 반복 UP (Unified Process) 도입 단계 : 프로젝트의 범위를 설정, 목표를 명확히 정련 단계 : 요구를 찾아내어 설계를 완성 구축 단계 : 제조 단계, 요구의 테스트 마무리 전환 단계 : 릴리즈 애자일 프로세스 (Agile Process) 특징 짧은 릴리즈와 반복 점증적 설계 사용자 참여 문서 최소화 비공식적 커뮤니케이션 요구와 환경의 변화를 가정 익스트림 프로그래밍 (eXtreme Pragramming) 애자일 방법론 중 하나 Planning : 요구사항을 작은 요소로 분할 Analysis Design Execution : Coding, Testing Wrapping : small release, process improvement Closure : launch 스크럼 (Scrum) 조직적으로 애자일 방법론을 적용</description></item><item><title>컴퓨터네트워크</title><link>https://bong-u.github.io/til/school/computer_network/</link><pubDate>Mon, 16 Oct 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/school/computer_network/</guid><description>HTTP HTTP Method Method request payload response payload idempotent GET Optional O O HEAD Optional O O POST Yes O X PUT Yes O O DELETE Optional O O CONNECT Optional O X OPTIONS Optional O O TRACE Optional O O PATCH Yes O X HTTP Protocol Version HTTP/1.</description></item><item><title>영화와 문학</title><link>https://bong-u.github.io/til/school/film_and_literature/</link><pubDate>Wed, 11 Oct 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/school/film_and_literature/</guid><description>매체 변환이란 소설, 희곡, 시, 영화 등 각각의 매체 형식을 다른 종류의 매체 형식으로 변환하는 것
뤼미에르 형제에 의해서 영화가 발명된 후, 1910년대부터 기존 문학 작품을 영화의 형식에 맞도록 각색하는 양상이 인기를 얻게 됨.
매체 변환 양상 분석 과정에서 고려해야할 사항
구성의 생략과 압축 텍스트 -&amp;gt; 영화, 시공간적 제약을 받을 수 밖에 없다 따라서, 생략과 압축은 할 수 밖에 없다 시간과 공간의 영상적 변환 시공간을 처리하는 방식은 매체에 따라 달라질 수 밖에 없다.</description></item><item><title>컴파일러개론</title><link>https://bong-u.github.io/til/school/compiler/</link><pubDate>Fri, 01 Sep 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/school/compiler/</guid><description>개요 컴퓨터와 인간이 소통하는 방법 어셈블리어 어셈블리어의 번역기는 어셈블러(Assembler)라고 한다 cpu칩셋이 바뀔때마다 어셈블리어가 바뀐다 고급언어 고급언어의 번역기는 컴파일러(Compiler)라고 한다 컴파일러의 정확한 정의 어떤 언어로 쓰여진 프로그램을 같은 역할의 다른 언어로 바꿔주는 프로그램
1952년 그레이스 호퍼(Grace Hopper)가 UNIVAC용 프로그래밍언어 A-0 컴파일러를 제작 컴파일러 vs 인터프리터 프로그램 처리과정 컴파일러의 처리 과정 Lexical analysis (어휘 분석) token을 생성하는일, token은 어휘의 최소 단위 Syntax analysis (구문 분석) token을 읽어서 오류를 검색, 구문 구조를 만든다 (주로 트리형태) Semantic analysis (의미 분석) type checking Intermediate code generation (중간 코드 생성) 중간 코드로 변환 Code optimization (코드 최적화) 중간 코드를 더 효율적으로 변환 Code generation (코드 생성) 목적 코드 생성 Lexical analysis (어휘 분석) token : 문법적으로 의미있는 최소 단위 FSA (Finite State Automata, 유한 상태 오토마타) token을 인식하는 방법 시작 상태 한 개와 끝 상태 여러 개를 가짐 DFA (Deterministic Finite Automata) FSA의 한 종류 각 상태에서 뻗어나가는 edge가 하나씩만 존재 ε가 붙은 edge 없음 분석한 토큰을 표현하는 방법 Lexeme = &amp;lt;토큰번호, 토큰 값&amp;gt;</description></item><item><title>운영체제 - 기말범위</title><link>https://bong-u.github.io/til/school/operatingsystem2/</link><pubDate>Mon, 29 May 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/school/operatingsystem2/</guid><description>06-File-Management Directory File Directory Directory도 일종의 파일이다 해당 파일 FCB의 식별자만 저장한다 inode (index node) Unix에서는 FCB와 inode가 같다 모든 파일, 폴더가 Unique한 값을 가진다. (root는 2로 고정) File Systems 파티션의 구조 boot block, super block, FCB list, data blocks Partition Control block (Super block) blocks 개수, free data blocks 개수, free data blocks list 저장 inode table, free inode 개수, free inode list 저장 File Control Block (FCB) UNIX에서 128byte의 크기를 가진다 파일 이름, 파일 크기, uid, gid, 파일 주소 등등 저장 Management of Data Blocks Contiguous Allocation 각각의 파일을 연속적으로 저장 Direct Access File grow problem 존재 External fragmentation, Internal fragmentation 발생 Chained Allocation Direct acess File grow problem X External fragmentation X Poor data safety (앞 블록에 문제가 생기면 뒤 블록도 사용 불가능) Indexed Allocation (현대에 사용) Direct access File grow problem X External fragmentation X Medium level data safety (index block만 괜찮으면 된다) Index block이 추가로 필요하다 Free-Space Management Counting N-M&amp;hellip; N번부터 M개의 블록이 비어있다.</description></item><item><title>데이터통신</title><link>https://bong-u.github.io/til/school/data_communication/</link><pubDate>Sun, 26 Mar 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/school/data_communication/</guid><description>메시지(패킷, 프레임), 계층 OSI 7 Model Physical Data Link Network Transport Session Presentation Application TCP/IP 계층 계층 이름 메시지 형태 내용 1 Phisical Bits Bits 2 Data Link Ethernet Frame Ethernet 주소 3 Network IP packet, Datagram IP 주소 4 Transport TCP Segment, UDP Datagram Port 번호 5 Application HTTP 메시지, Email 메시지 URL, Email 주소 Protocol Suite HTTP - TCP - IP - ARP 아날로그 신호 - 사인 함수 $$ y(t) = A sin(2\pi ft + \varphi) $$</description></item><item><title>230315 기프랩 Design Thinking 방법론 - 김재정 교수님</title><link>https://bong-u.github.io/til/school/basicprojectlab_design_thinking/</link><pubDate>Wed, 15 Mar 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/school/basicprojectlab_design_thinking/</guid><description>디자인 씽킹이란 공감의 과정을 통해 문제점을 찾아내고, 아이디어를 발산하고, 프로토타입을 만들어 검증 과정을 거치는, 반복적 프로세스에 대한 방법론 및 사고방식 디자인 씽킹 프로세스 공감 - 문제 정의 - 아이디어 도출 - 프로토타이핑 - 테스팅 1. 공감 공감 프로세스 면담하기 관찰하기 경험하기 면담지 준비하기 순차적 경험 질문 : 어떤 순서로 행동하고 경험하는지 물어보자 감정 질문 이유 질문 : 행동 또는 감정에 대한 이유를 물어보자 또 질문 : &amp;ldquo;또&amp;hellip;&amp;ldquo;라는 질문을 많이 하자 구체화 질문 관찰하기 | 모니터링 현장 중심 관찰 : 세상을 넓고 깊게 바라보기 관찰하기 | 쉐도잉 사람의 체험이나 행동을 그자리에서 관찰하기 관찰하기 | 맥락 질의법 현장에서 관찰 및 면담을 통해 대상자에 대한 이해를 하는 방법</description></item><item><title>운영체제 - 중간범위</title><link>https://bong-u.github.io/til/school/operatingsystem1/</link><pubDate>Mon, 06 Mar 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/school/operatingsystem1/</guid><description>운영체제 개요 운영체제의 역할 Program execution Access to computer resources (I/O device, Data&amp;hellip;) Error detection and response Accounting (ex: task manager) 운영체제의 발전 Serial Processing : No OS, No Job scheduling
Simple batch system
OS가 job을 할당 Controlled by monitor Uni-programming
다 실행될때까지 기다림 bad utilization Multiprogramming
The processor can switch to the other job better utilization, needs more memory Time sharing</description></item><item><title>자료구조</title><link>https://bong-u.github.io/til/school/data_structure/</link><pubDate>Thu, 02 Mar 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/school/data_structure/</guid><description>제 1장 : 자료구조를 배우기 위한 준비 (230302) 배열 배열(Array): 동일한 타입의 원소들이 연속적인 메모리 공간에 할당되어 있는 기초적인 자료구조 추상데이터 타입 추상데이터타입(ADT:Abstract Data Type) : 데이터와 그 데이터에 대한 추상적인 연산들로써 구성 ADT =~ 자바의 interface, 자료구조 =~ 자바의 class 자료구조는 추상데이터타입을 구체적으로 구현한 것 1-2 수행시간의 분석 알고리즘의 성능: 수행시간을 나타내는 **시간복잡도(Time Complexity)**와 알고리즘이 수행되는 동안 사용되는 메모리 공간의 크기를 나타내는 **공간복잡도(Space Complexity)**에 기반하여 분석 시간 복잡도</description></item><item><title>확률과 통계</title><link>https://bong-u.github.io/til/school/probabilityandstatistics/</link><pubDate>Thu, 02 Mar 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/school/probabilityandstatistics/</guid><description>자료의 정리와 요약 통계 자료의 구분
양적자료(quantitative data) 또는 수치형자료(numerical data) 이산자료(자녀 수), 연속자료(키) 질적자료(qualitative data) 또는 범주형자료(categorical data) 명목자료(혈액형, 성별), 순서자료(학점, 부서평가) 변수의 종류
1all variables 2├── numerical 3│ ├-─ continuous (리터 수) 4│ └-─ discrete (나라 수) 5└─── categorical 6 ├-─ Nominal (성별) 7 └-─ Ordinal (근무 한 시간 : 12-2) 도수분포표 자료의 특성을 기준으로 일정한 계급으로 나누고, 각 계급에 도수를 대응하여 작성한 표</description></item><item><title>221207 SYSP</title><link>https://bong-u.github.io/til/school/sysp_09_11/</link><pubDate>Mon, 09 Jan 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/school/sysp_09_11/</guid><description>09-process1 예외적인 제어 흐름 하위 매커니즘 예외 (Exception) 상위 매커니즘 프로세스 컨텍스트 전환 OS 소프트웨어와 하드웨어 타이머로 구현 시그널 OS 소프트웨어로 구현 nolocal 점프 예외 테이블 (Exception Tables) 각 이벤트 타입은 예외번호 k를 갖는다 비동기형 예외 (Interrupt) 입출력 인터럽트 (ctrl + c)
하드 리셋 인터러트
소프트 리셋 인터럽트</description></item><item><title>221208 SYSP</title><link>https://bong-u.github.io/til/school/sysp_12_13/</link><pubDate>Mon, 09 Jan 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/school/sysp_12_13/</guid><description>12-memory-1 메모리에 관한 불편한 진실 메모리는 무한의 자원이 아니다 동적 메모리 할당 직접(explicit) vs 간접(implicit) 메모리 할당기 직접 할당 : 응용프로그램이 할당하고, 반환한다 ex) malloc, free 간접 할당 : 응용프로그램이 할당하지만, 반환하지는 않는다 ex) java의 garbage collector 프로세스의 메모리 이미지 스택은 아래로, 힙은 위로 성장한다 sbrk 함수가 추가적인 힙 메모리를 운영체제로부터 요청한다 (brk 포인터 이동) Malloc package 1#include &amp;lt;stdlib.</description></item><item><title>객체지향설계</title><link>https://bong-u.github.io/til/school/ood/</link><pubDate>Mon, 09 Jan 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/school/ood/</guid><description>Dynamic dispatch and Multiple inheritance Polymorphism Function overloading using compile time types of arguments Function overriding using runtime types of receiver objects virtual function for dynamic dispatch dynamic dispatch를 사용하기 위한 조건
함수가 virtual keyword로 정의되어 있어야 한다.
receiver object가 포인터(*), 참조(&amp;amp;)를 통해 refer되어야 한다
1// from parent class : Employee 2virtual std::string GetInfo() { 3 return &amp;#34;Employee: &amp;#34; + name_ ; 4} 5// from child class : Developer 6std::string GetInfo() { 7 return &amp;#34;Developer: &amp;#34; + name_; 8} override keyword override 키워드를 사용하는 이유 직관적인 코드</description></item><item><title>현대인의 생활문화</title><link>https://bong-u.github.io/til/school/mplc/</link><pubDate>Mon, 09 Jan 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/school/mplc/</guid><description>글로벌 매너 매너 인간관계를 맺는데 있어 중요한 요소
어원 : Manus(손, 행동, 습관) + Arius(방법, 방식)
매너의 기본(1)
다른 사람의 인격을 존중하고, 배려하는 마음을 가지고, 편안하게 해주거나 기쁘게 만들려는 행동방식
매너의 기본(2)
역지사지 (易地思之)
매너의 기본(3)
형식에 치우치지 말고, 배려하는 마음을 전달하는 것
매너와 에티켓의 차이 매너(예의) : 상황에 따라 다르게 표현 가능 에티켓(범절) : 형식과 절차를 중요시 함 동양의 매너 5덕</description></item></channel></rss>
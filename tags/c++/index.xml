<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C++ on bong-u/til</title><link>https://bong-u.github.io/til/tags/c++/</link><description>Recent content in C++ on bong-u/til</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 10 Oct 2024 00:00:00 +0900</lastBuildDate><atom:link href="https://bong-u.github.io/til/tags/c++/index.xml" rel="self" type="application/rss+xml"/><item><title>C++ 개념 정리</title><link>https://bong-u.github.io/til/c_cpp/cpp_concept/</link><pubDate>Thu, 10 Oct 2024 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/c_cpp/cpp_concept/</guid><description>본 내용은 2023 MISRA-CPP 가이드라인을 공부하면서 개념을 정리한 것이다.
참조(Reference)와 포인터(Pointer) 포인터(Pointer) 메모리 주소를 저장하는 변수
1// 변수 선언 2int a = 10; 3int* b = &amp;amp;a; // a의 주소를 저장 4 5// 매개변수로 전달 6void add(int* a, int* b) { 7 *a + *b; 8} 9 10add(&amp;amp;a, &amp;amp;b); 참조(Reference) 변수에 별칭을 부여하는 것
이름으로 대상을 가리킨다.
제약사항
참조는 선언과 동시에 초기화해야 한다.</description></item><item><title>객체지향설계</title><link>https://bong-u.github.io/til/school/ood/</link><pubDate>Mon, 09 Jan 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/school/ood/</guid><description>Dynamic dispatch and Multiple inheritance Polymorphism Function overloading using compile time types of arguments Function overriding using runtime types of receiver objects virtual function for dynamic dispatch dynamic dispatch를 사용하기 위한 조건
함수가 virtual keyword로 정의되어 있어야 한다.
receiver object가 포인터(*), 참조(&amp;amp;)를 통해 refer되어야 한다
1// from parent class : Employee 2virtual std::string GetInfo() { 3 return &amp;#34;Employee: &amp;#34; + name_ ; 4} 5// from child class : Developer 6std::string GetInfo() { 7 return &amp;#34;Developer: &amp;#34; + name_; 8} override keyword override 키워드를 사용하는 이유 직관적인 코드</description></item></channel></rss>
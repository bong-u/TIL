<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Git on bong-u/til</title><link>https://bong-u.github.io/til/tags/git/</link><description>Recent content in Git on bong-u/til</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 25 Jun 2024 00:00:00 +0900</lastBuildDate><atom:link href="https://bong-u.github.io/til/tags/git/index.xml" rel="self" type="application/rss+xml"/><item><title>Git - Submodule</title><link>https://bong-u.github.io/til/devtools/git_submodule/</link><pubDate>Tue, 25 Jun 2024 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/devtools/git_submodule/</guid><description>Git Submodule 레포지토리 하위에 다른 저장소를 관리하기 위한 도구
용어 슈퍼 프로젝트 : 상위 레포지토리 서브 모듈 : 하위 레포지토리 명령어 super-repository의 “dirA” 라는 디렉토리에 sub-repository를 등록하는 경우
1$ git submodule add https://github.com/bong-u/sub-repository.git dirA sub-repository의 변경상황을 반영해야하는 경우
1# 1번째 방법 : sub-repository내에서 pull 해야한다 2$ cd dirA 3$ git pull 4# 2번째 방법 5$ git submodule update --remote 서브모듈을 포함한 프로젝트 클론하기</description></item><item><title>Git 특강 - 네이버 정다현 선배님</title><link>https://bong-u.github.io/til/school/git/</link><pubDate>Mon, 20 Mar 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/school/git/</guid><description>버전 관리 시스템 중앙집중식 버전 관리(CVCS) Centralized Version Control System
CVCS의 종류 : SVN, Perforce, CVS
문제
중앙 서버의 부하가 큼 오프라인에서는 사용이 불가능 분산 버전 관리 시스템 (DVCS) Decentralized Version Control System DVCS의 종류 : Git, Mercurial, Bazaar Git command gst : git status git log &amp;ndash;oneline : commit을 한줄로 출력 git log &amp;ndash;all &amp;ndash;graph : 그래프로 출력 merge의 3가지 종류 merge : 모든 commit들이 merge commit과 함께 merge squash and merge : 모든 commit들을 하나의 새로운 commit으로 요약하여 merge rebase and merge : 분기가 발생한 기준이 되는 base를 변경 특정 commit으로 롤백하는 방법 reset : commit 이력을 남기지 않고 되돌리기 revert : commit 이력을 남기고 되돌린다 현업에서는 revert를 주로 사용 reset git reset HEAD~ 옵션 &amp;ndash;soft : HEAD 위치 변경, 파일 변화 없음, commit 직전의 상황 &amp;ndash;mixed (default) : add하기 전으로 되돌려 준다, unstaged로 되돌려준다 &amp;ndash;hard : 변경 내용이 모두 사라짐 &amp;ndash;merge : merge 후에 되돌리기 위해서 사용 revert git revert HEAD cherry-pick git cherry pick &amp;lt;commit id&amp;gt; 다른 브랜치의 특정 commit 만을 가져 올 때 사용 Markdown 글자 하이라이트 *글자 기울이기* **굵은 글씨** ~~취소 선~~ 수평선 ---</description></item></channel></rss>
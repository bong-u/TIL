<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Programmers on bong-u/til</title><link>https://bong-u.github.io/til/tags/programmers/</link><description>Recent content in Programmers on bong-u/til</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 16 Sep 2023 00:00:00 +0900</lastBuildDate><atom:link href="https://bong-u.github.io/til/tags/programmers/index.xml" rel="self" type="application/rss+xml"/><item><title>프로그래머스 - 수식 최대화 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EC%88%98%EC%8B%9D_%EC%B5%9C%EB%8C%80%ED%99%94/</link><pubDate>Sat, 16 Sep 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EC%88%98%EC%8B%9D_%EC%B5%9C%EB%8C%80%ED%99%94/</guid><description>1from itertools import permutations 2def solution(expression): 3 answer = 0 4 operations = list(filter(lambda x: not x.isdigit(), expression)) 5 numbers = expression.replace(&amp;#39;-&amp;#39;,&amp;#39;+&amp;#39;).replace(&amp;#39;*&amp;#39;,&amp;#39;+&amp;#39;).split(&amp;#39;+&amp;#39;) 6 expression = [int(numbers[0])] 7 8 for i in range(len(operations)): 9 expression.append(operations[i]) 10 expression.append(int(numbers[i+1])) 11 12 for case in permutations((&amp;#39;+&amp;#39;, &amp;#39;-&amp;#39;, &amp;#39;*&amp;#39;), 3): 13 temp = expression[::-1] 14 for op in case: 15 stack = [] 16 while temp: 17 if temp[-1] == op: 18 temp.pop() 19 a = stack.</description></item><item><title>프로그래머스 - 튜플 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%ED%8A%9C%ED%94%8C/</link><pubDate>Sat, 16 Sep 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%ED%8A%9C%ED%94%8C/</guid><description>1from collections import defaultdict 2 3def solution(s): 4 count = defaultdict(int) 5 for i in s[1:-1].replace(&amp;#39;},{&amp;#39;, &amp;#39;} {&amp;#39;).split(&amp;#39; &amp;#39;): 6 for j in i[1:-1].split(&amp;#39;,&amp;#39;): 7 count[j] += 1 8 return [int(i[0]) for i in sorted(count.items(), key=lambda x: x[1], reverse=True)] 문제 특정 튜플을 포현하는 집합이 담긴 문자열 s가 매개변수로 주어진다 s가 표현하는 튜플을 배열에 담아 반환하라 TC input &amp;ldquo;{{2},{2,1},{2,1,3},{2,1,3,4}}&amp;rdquo;
ouput [2, 1, 3, 4]
해결방법 문제에서 원하는 튜플의 순서는 원소의 개수가 자주 등장하는 순서이다 각 원소의 개수를 세어 count라는 defaultdict에 넣는다 count를 value 기준으로 정렬하여 key값을 list의 형태로 반환하라</description></item><item><title>프로그래머스 - 쿼드압축 후 개수 세기 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EC%BF%BC%EB%93%9C%EC%95%95%EC%B6%95_%ED%9B%84_%EA%B0%9C%EC%88%98_%EC%84%B8%EA%B8%B0/</link><pubDate>Thu, 07 Sep 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EC%BF%BC%EB%93%9C%EC%95%95%EC%B6%95_%ED%9B%84_%EA%B0%9C%EC%88%98_%EC%84%B8%EA%B8%B0/</guid><description>1answer = [0, 0] 2 3def solution(arr): 4 def recursion(sx, sy, k): 5 global answer 6 origin = arr[sy][sx] 7 cnt = 0 8 for i in range(sx, sx+k): 9 for j in range(sy, sy+k): 10 if origin != arr[j][i]: 11 recursion(sx, sy, k//2) 12 recursion(sx+k//2, sy, k//2) 13 recursion(sx, sy+k//2, k//2) 14 recursion(sx+k//2, sy+k//2, k//2) 15 return 16 answer[origin] += 1 17 18 recursion(0, 0, len(arr)) 19 return answer 문제 0과 1로 이루어진 2^n x 2^n 크기의 2차원 정수 배열 arr을 압축하려 한다 압축하는 방법은 당신이 압축하고자 하는 특정 영역을 S라고 정의한다 만약 S 내부에 있는 모든 수가 같은 값이라면, S를 해당 수 하나로 압축시킨다 그렇지 않다면, S를 정확히 4개의 균일한 정사각형 영역으로 쪼갠 뒤, 각 정사각형 영역에 대해 같은 방식의 압축을 시도한다 TC input [[1,1,0,0],[1,0,0,0],[1,0,0,1],[1,1,1,1]]</description></item><item><title>프로그래머스 - 이진 변환 반복하기 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EC%9D%B4%EC%A7%84_%EB%B3%80%ED%99%98_%EB%B0%98%EB%B3%B5%ED%95%98%EA%B8%B0/</link><pubDate>Wed, 06 Sep 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EC%9D%B4%EC%A7%84_%EB%B3%80%ED%99%98_%EB%B0%98%EB%B3%B5%ED%95%98%EA%B8%B0/</guid><description>1def solution(s): 2 answer = [] 3 cnt = 0 4 zero_cnt = 0 5 6 while len(s) != 1: 7 zero = s.count(&amp;#39;0&amp;#39;) 8 s = str(bin(len(s)-zero)).split(&amp;#39;b&amp;#39;)[1] 9 cnt += 1 10 zero_cnt += zero 11 12 return [cnt, zero_cnt] 문제 이진변환을 다음과 같이 정의한다 1. x의 모든 0을 제거한다 2. x의 길이를 c라고 하면, x를 &amp;lsquo;c를 2진법으로 표현한 문자열&amp;rsquo;로 바꾼다 s가 &amp;lsquo;1&amp;rsquo;이 될때까지 이진변환을 가했을 때, [이진변환의 횟수, 제거된 모든 0의 개수]를 반환하라 TC input s : &amp;ldquo;110010101001&amp;rdquo;</description></item><item><title>프로그래머스 - 메뉴 리뉴얼 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EB%A9%94%EB%89%B4_%EB%A6%AC%EB%89%B4%EC%96%BC/</link><pubDate>Mon, 04 Sep 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EB%A9%94%EB%89%B4_%EB%A6%AC%EB%89%B4%EC%96%BC/</guid><description>1from itertools import combinations 2from collections import defaultdict 3 4def solution(orders, course): 5 answer = [] 6 7 for i in course: 8 dataset = defaultdict(int) 9 10 for j in orders: 11 for k in combinations(j, i): 12 # ABC, ACB를 같은 것으로 취급하기 위해 정렬 13 dataset[&amp;#39;&amp;#39;.join(sorted(k))] += 1 14 15 if len(dataset) == 0: 16 continue 17 18 max_value = max(dataset.values()) 19 20 # 2번 이상 주문된 메뉴만 추가 21 if max_value == 1: 22 continue 23 24 for k, _ in filter(lambda x:x[1] == max_value, dataset.</description></item><item><title>프로그래머스 - 순위 검색 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EC%88%9C%EC%9C%84_%EA%B2%80%EC%83%89/</link><pubDate>Thu, 31 Aug 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EC%88%9C%EC%9C%84_%EA%B2%80%EC%83%89/</guid><description>1from itertools import combinations 2from collections import defaultdict 3from bisect import bisect_left 4 5def solution(infos, queries): 6 answer = [] 7 dataset = defaultdict(list) 8 9 for info in infos: 10 token = info.split(&amp;#39; &amp;#39;) 11 12 for j in range(5): 13 for case in list(combinations([0,1,2,3], j)): 14 temp = token[:-1] 15 for c in case: 16 temp[c] = &amp;#39;-&amp;#39; 17 dataset[&amp;#39;&amp;#39;.join(temp)].append(int(token[-1])) 18 for value in dataset.values(): 19 value.sort() 20 21 for query in queries: 22 query = query.</description></item><item><title>프로그래머스 - 괄호 회전하기 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EA%B4%84%ED%98%B8_%ED%9A%8C%EC%A0%84%ED%95%98%EA%B8%B0/</link><pubDate>Mon, 28 Aug 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EA%B4%84%ED%98%B8_%ED%9A%8C%EC%A0%84%ED%95%98%EA%B8%B0/</guid><description>1def check(string): 2 stack = [] 3 for i in string: 4 if i == &amp;#39;(&amp;#39; or i == &amp;#39;{&amp;#39; or i == &amp;#39;[&amp;#39;: 5 stack.append(i) 6 else: 7 if len(stack) == 0: 8 return False 9 if i == &amp;#39;)&amp;#39;: 10 if stack[-1] != &amp;#39;(&amp;#39;: return False 11 if i == &amp;#39;}&amp;#39;: 12 if stack[-1] != &amp;#39;{&amp;#39;: return False 13 if i == &amp;#39;]&amp;#39;: 14 if stack[-1] != &amp;#39;[&amp;#39;: return False 15 stack.</description></item><item><title>프로그래머스 - 행렬 테두리 회전하기 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%ED%96%89%EB%A0%AC_%ED%85%8C%EB%91%90%EB%A6%AC_%ED%9A%8C%EC%A0%84%ED%95%98%EA%B8%B0/</link><pubDate>Thu, 24 Aug 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%ED%96%89%EB%A0%AC_%ED%85%8C%EB%91%90%EB%A6%AC_%ED%9A%8C%EC%A0%84%ED%95%98%EA%B8%B0/</guid><description>1dx = [1, 0, -1, 0] 2dy = [0, 1, 0, -1] 3 4def solution(rows, columns, queries): 5 table = [[(j*columns)+i+1 for i in range(columns)] for j in range(rows)] 6 answer = [] 7 8 for y1, x1, y2, x2 in queries: 9 min_num = 10000 10 x1 -= 1 11 y1 -= 1 12 x2 -= 1 13 y2 -= 1 14 direction = 0 15 curX, curY = x1, y1 16 postNum = table[y1][x1] 17 while True: 18 curX = curX+dx[direction] 19 curY = curY+dy[direction] 20 21 temp = table[curY][curX] 22 table[curY][curX] = postNum 23 postNum = temp 24 25 min_num = min(min_num ,postNum) 26 27 if ((curX == x2 and curY == y1) or 28 (curX == x2 and curY == y2) or 29 (curX == x1 and curY == y2)): 30 direction += 1 31 32 if curX == x1 and curY == y1: 33 break 34 35 answer.</description></item><item><title>프로그래머스 - 2개 이하로 다른 비트 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_2%EA%B0%9C_%EC%9D%B4%ED%95%98%EB%A1%9C_%EB%8B%A4%EB%A5%B8_%EB%B9%84%ED%8A%B8/</link><pubDate>Wed, 23 Aug 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_2%EA%B0%9C_%EC%9D%B4%ED%95%98%EB%A1%9C_%EB%8B%A4%EB%A5%B8_%EB%B9%84%ED%8A%B8/</guid><description>1def solution(numbers): 2 answer = [] 3 for number in numbers: 4 num = list(str(bin(number)).split(&amp;#39;b&amp;#39;)[1]) 5 6 # 첫번째 자릿수가 0인 경우 7 if num[-1] == &amp;#39;0&amp;#39;: 8 num[-1] = &amp;#39;1&amp;#39; 9 answer.append(int(&amp;#39;0b&amp;#39;+&amp;#39;&amp;#39;.join(num), 2)) 10 continue 11 12 # 첫번째 자릿수가 1인 경우 13 num = [&amp;#39;0&amp;#39;]+num 14 # 두번째 자리부터 순회 15 for i in range(len(num)-2, -1, -1): 16 # 가장 오른쪽의 0을 찾았을 때 17 if num[i] == &amp;#39;0&amp;#39;: 18 # 0을 오른쪽으로, 1을 왼쪽으로 옮긴다 19 num[i], num[i+1] = num[i+1], num[i] 20 answer.</description></item><item><title>프로그래머스 - 거리두기 확인하기 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EA%B1%B0%EB%A6%AC%EB%91%90%EA%B8%B0_%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0/</link><pubDate>Tue, 22 Aug 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EA%B1%B0%EB%A6%AC%EB%91%90%EA%B8%B0_%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0/</guid><description>1dx = [-1, 1, 0, 0] 2dy = [0, 0, -1, 1] 3def quest(table): 4 table = [list(line) for line in table] 5 for j in range(5): 6 for i in range(5): 7 if table[i][j] == &amp;#39;P&amp;#39;: 8 flag = [False]*4 9 target = [] 10 for k in range(4): 11 nx = i+dx[k] 12 ny = j+dy[k] 13 if 0 &amp;lt;= nx &amp;lt; 5 and 0 &amp;lt;= ny &amp;lt; 5: 14 target.</description></item><item><title>프로그래머스 - 모음사전 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EB%AA%A8%EC%9D%8C%EC%82%AC%EC%A0%84/</link><pubDate>Mon, 21 Aug 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EB%AA%A8%EC%9D%8C%EC%82%AC%EC%A0%84/</guid><description>1def solution(word): 2 answer = 0 3 char = [&amp;#39;A&amp;#39;, &amp;#39;E&amp;#39;, &amp;#39;I&amp;#39;, &amp;#39;O&amp;#39;, &amp;#39;U&amp;#39;] 4 cnt = 0 5 6 def traverse(cur): 7 nonlocal char, cnt, word 8 if cur == word: 9 return cnt 10 11 if len(cur) &amp;lt; 5: 12 for ch in char: 13 cnt += 1 14 if traverse(cur+ch) != None: 15 return cnt 16 return traverse(&amp;#39;&amp;#39;) 문제 사전에 A,E,I,O,U만 사용하여 만들 수 있는 길이 5이하의 모든 단어가 수록되어있다 단어 하나 word가 주어질때 사전에서 몇번째 단어인지 구하라 TC input &amp;lsquo;I&amp;rsquo;</description></item><item><title>프로그래머스 - 빛의 경로 사이클 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EB%B9%9B%EC%9D%98_%EA%B2%BD%EB%A1%9C_%EC%82%AC%EC%9D%B4%ED%81%B4/</link><pubDate>Sun, 20 Aug 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EB%B9%9B%EC%9D%98_%EA%B2%BD%EB%A1%9C_%EC%82%AC%EC%9D%B4%ED%81%B4/</guid><description>1dx = [1, 0, -1, 0] 2dy = [0, 1, 0, -1] 3def solution(grid): 4 N = len(grid) 5 M = len(grid[0]) 6 grid = [list(line) for line in grid] 7 route = [[[False]*4 for _ in range(M)] for _ in range(N)] 8 answer = [] 9 10 for i in range(M): 11 for j in range(N): 12 for k in range(4): 13 cur = [i, j] 14 dir = k 15 cnt = 0 16 while not route[cur[1]][cur[0]][dir]: 17 cnt += 1 18 route[cur[1]][cur[0]][dir] = True 19 cur[0] = (cur[0]+dx[dir]) % M 20 cur[1] = (cur[1]+dy[dir]) % N 21 22 if grid[cur[1]][cur[0]] == &amp;#39;L&amp;#39;: 23 dir = (dir-1) % 4 24 elif grid[cur[1]][cur[0]] == &amp;#39;R&amp;#39;: 25 dir = (dir+1) % 4 26 if cnt !</description></item><item><title>프로그래머스 - 전력망을 둘로 나누기 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EC%A0%84%EB%A0%A5%EB%A7%9D%EC%9D%84_%EB%91%98%EB%A1%9C_%EB%82%98%EB%88%84%EA%B8%B0/</link><pubDate>Fri, 18 Aug 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EC%A0%84%EB%A0%A5%EB%A7%9D%EC%9D%84_%EB%91%98%EB%A1%9C_%EB%82%98%EB%88%84%EA%B8%B0/</guid><description>1def solution(n, wires): 2 tower = [[] for _ in range(n)] 3 answer = 100 4 for wire in wires: 5 wire[0] -= 1 6 wire[1] -= 1 7 tower[wire[0]].append(wire[1]) 8 tower[wire[1]].append(wire[0]) 9 10 def traverse(visited, start): 11 visited[start] = True 12 for i in tower[start]: 13 if not visited[i]: 14 traverse(visited, i) 15 for wire in wires: 16 tower[wire[0]].remove(wire[1]) 17 tower[wire[1]].remove(wire[0]) 18 19 visited = [False]*n 20 a = 0 21 traverse(visited, wire[0]) 22 for i in range(n): 23 if visited[i]: 24 a += 1 25 26 visited = [False]*n 27 b = 0 28 traverse(visited, wire[1]) 29 for i in range(n): 30 if visited[i]: 31 b += 1 32 answer = min(answer, abs(a-b)) 33 tower[wire[0]].</description></item><item><title>프로그래머스 - 교점에 별 만들기 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EA%B5%90%EC%A0%90%EC%97%90_%EB%B3%84_%EB%A7%8C%EB%93%A4%EA%B8%B0/</link><pubDate>Thu, 17 Aug 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EA%B5%90%EC%A0%90%EC%97%90_%EB%B3%84_%EB%A7%8C%EB%93%A4%EA%B8%B0/</guid><description>1def calc(a1, b1, c1, a2, b2, c2): 2 if a1*b2-a2*b1 == 0: 3 return (0.1, 0.1) 4 return ((b1*c2-b2*c1)/(a1*b2-a2*b1), (c1*a2-a1*c2)/(a1*b2-a2*b1)) 5 6def solution(line): 7 answer = [] 8 length = len(line) 9 points = [] 10 size = [1e15, -1e15, 1e15,- 1e15] 11 12 for i in range(length): 13 for j in range(i): 14 point = calc(line[i][0],line[i][1], line[i][2], line[j][0], line[j][1], line[j][2]) 15 if point[0]%1 != 0 or point[1]%1 != 0: 16 continue 17 x = int(point[0]) 18 y = int(point[1]) 19 points.</description></item><item><title>프로그래머스 - n^2 배열 자르기 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_n2_%EB%B0%B0%EC%97%B4_%EC%9E%90%EB%A5%B4%EA%B8%B0/</link><pubDate>Wed, 16 Aug 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_n2_%EB%B0%B0%EC%97%B4_%EC%9E%90%EB%A5%B4%EA%B8%B0/</guid><description>1def solution(n, left, right): 2 answer = [] 3 start = (left//n, left%n) 4 end = (right//n, right%n) 5 6 for i in range(start[0], end[0]+1): 7 line = [i+1]*(i+1) + [i for i in range(i+2, n+1)] 8 answer += line 9 10 return answer[start[1]:right-(start[0]*n)+1] 문제 정수 n, left, right가 주어진다 n X n 크기의 2차원 배열을 만든다 i=1,2,3..n에 대해서, 1행 1열부터 i형 i행까지 숫자 i로 채운다 1행, 2행.. n행을 모두 이어붙인 새로운 1차원 배열을 만든다 새로운 1차원 배열에서 left번째 숫자부터 right번째 숫자까지를 배열로 반환하라 TC input n : 3, left : 2, right : 5</description></item><item><title>프로그래머스 - 피로도 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%ED%94%BC%EB%A1%9C%EB%8F%84/</link><pubDate>Mon, 14 Aug 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%ED%94%BC%EB%A1%9C%EB%8F%84/</guid><description>1def solution(k, dungeons): 2 result = 0 3 length = len(dungeons) 4 def dfs(cur, visited, cnt): 5 nonlocal result 6 visit = False 7 for i in range(length): 8 if not visited[i] and cur &amp;gt;= dungeons[i][0]: 9 visit = True 10 visited[i] = True 11 dfs(cur-dungeons[i][1], visited, cnt+1) 12 visited[i] = False 13 14 if not visit: 15 result = max(result, cnt) 16 17 dfs(k, [False]*length, 0) 18 19 return result 문제 유저의 현재 피로도 k, 던전별 [&amp;ldquo;최소 필요 피로도&amp;rdquo;, &amp;ldquo;소모 피로도&amp;rdquo;]를 담은 2차원 배열 dungeons가 주어진다 던전을 탐험하기 위해서는 유저의 현재 남은 피로도가 최소 필요 피로도 이상이어야 한다 던전을 클리어하면 &amp;ldquo;소모 피로도&amp;quot;만큼 피로도가 소모된다 던전을 탐험할 수 있는 최대 던전 수를 구하라 TC input k:80, dungeons:[[80,20],[50,40],[30,10]]</description></item><item><title>프로그래머스 - k진수에서 소수 개수 구하기 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_k%EC%A7%84%EC%88%98%EC%97%90%EC%84%9C_%EC%86%8C%EC%88%98_%EA%B0%9C%EC%88%98_%EA%B5%AC%ED%95%98%EA%B8%B0/</link><pubDate>Sat, 12 Aug 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_k%EC%A7%84%EC%88%98%EC%97%90%EC%84%9C_%EC%86%8C%EC%88%98_%EA%B0%9C%EC%88%98_%EA%B5%AC%ED%95%98%EA%B8%B0/</guid><description>1def convert10toN(n, k): 2 result = &amp;#39;&amp;#39; 3 while n &amp;gt; 1: 4 result = str(n%k)+ result 5 n = n // k 6 return (str(n)+result).lstrip(&amp;#39;0&amp;#39;) 7 8def is_prime(n): 9 if n &amp;lt;= 1: 10 return False 11 12 end = int(n**(1/2))+1 13 for i in range(2, end): 14 if n%i == 0: 15 return False 16 return True 17 18 19def solution(n, k): 20 A = convert10toN(n, k) 21 answer = 0 22 for i in A.</description></item><item><title>프로그래머스 - 주차 요금 계산 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EC%A3%BC%EC%B0%A8_%EC%9A%94%EA%B8%88_%EA%B3%84%EC%82%B0/</link><pubDate>Fri, 11 Aug 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EC%A3%BC%EC%B0%A8_%EC%9A%94%EA%B8%88_%EA%B3%84%EC%82%B0/</guid><description>1import math 2 3def diff(start, end): 4 sh, sm = map(int, start.split(&amp;#39;:&amp;#39;)) 5 eh, em = map(int, end.split(&amp;#39;:&amp;#39;)) 6 7 return (eh*60+em) - (sh*60+sm) 8 9def calc(time, baseTime, baseFee, unitTime, unitFee): 10 if time &amp;lt; baseTime: 11 return baseFee 12 time -= baseTime 13 return baseFee + math.ceil(time/unitTime)*unitFee 14 15def solution(fees, records): 16 cars = {} 17 for i in records: 18 time, car_num, _ = i.split(&amp;#39; &amp;#39;) 19 # 새로 입차 한 경우 20 if not car_num in cars: 21 cars[car_num] = [0, time] 22 else: 23 # 출차 후 다시 입차한 경우 24 if cars[car_num][1] == &amp;#39;&amp;#39;: 25 cars[car_num][1] = time 26 # 출차한 경우 27 else: 28 cars[car_num][0] += diff(cars[car_num][1], time) 29 cars[car_num][1] = &amp;#39;&amp;#39; 30 31 # 아직 출차하지 않은 차량들에 대해 23:59에 출차한 것으로 간주 32 for num in cars: 33 if cars[num][1] !</description></item><item><title>프로그래머스 - 양궁대회 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EC%96%91%EA%B6%81%EB%8C%80%ED%9A%8C/</link><pubDate>Thu, 10 Aug 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EC%96%91%EA%B6%81%EB%8C%80%ED%9A%8C/</guid><description>1def solution(n, info): 2 # 각각 몇 번 맞춰야 점수를 얻는지 저장하였다 3 goal_list = [i+1 for i in info] 4 5 cases = [] 6 7 def dfs(score, cnt, case): 8 # 몇 번째 점수인지 나타낸다 (0:10점, 1:9점, ...) 9 length = len(case) 10 if length == 11: 11 # 화살 개수가 남았다면 0점에 채워준다 12 if cnt != n: 13 case[-1] += n-cnt 14 cases.append((score, case)) 15 return 16 # 현재 단계에서 몇 점 맞아야 점수를 따는지를 나타낸다 17 goal = goal_list[length] 18 19 # 점수를 따는 경우 20 if cnt + goal &amp;lt;= n: 21 # 딴 점수를 더해준다 22 dfs(score+(10-length), cnt+goal, case+[goal]) 23 # 상대가 점수를 따는 경우 24 if goal !</description></item><item><title>프로그래머스 - 두 큐 합 같게 만들기 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EB%91%90_%ED%81%90_%ED%95%A9_%EA%B0%99%EA%B2%8C_%EB%A7%8C%EB%93%A4%EA%B8%B0/</link><pubDate>Wed, 09 Aug 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EB%91%90_%ED%81%90_%ED%95%A9_%EA%B0%99%EA%B2%8C_%EB%A7%8C%EB%93%A4%EA%B8%B0/</guid><description>1from collections import deque 2 3def solution(queue1, queue2): 4 sum1, sum2 = sum(queue1), sum(queue2) 5 dq1 = deque(queue1) 6 dq2 = deque(queue2) 7 cnt = 0 8 9 while cnt &amp;lt;= len(queue1)*2+1 and sum1 != sum2: 10 if sum1 &amp;gt; sum2: 11 tmp = dq1.popleft() 12 dq2.append(tmp) 13 sum1 -= tmp 14 sum2 += tmp 15 elif sum1 &amp;lt; sum2: 16 tmp = dq2.popleft() 17 dq1.append(tmp) 18 sum1 += tmp 19 sum2 -= tmp 20 cnt += 1 21 22 return cnt if sum1 == sum2 else -1 문제 길이가 같은 두 큐가 주어진다 두 큐의 합이 같아지도록 큐의 원소를 교환할 수 있는 최소 횟수를 구하라 큐의 pop은 왼쪽에서, push는 오른쪽에서 이루어진다 TC input queue1 : [3, 2, 7, 2], queue2 : [4 ,6, 5, 1]</description></item><item><title>프로그래머스 - 할인 행사 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%ED%95%A0%EC%9D%B8_%ED%96%89%EC%82%AC/</link><pubDate>Tue, 08 Aug 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%ED%95%A0%EC%9D%B8_%ED%96%89%EC%82%AC/</guid><description>1from collections import deque 2 3def solution(want, number, discount): 4 want_dict = dict() 5 answer = 0 6 7 for i in range(len(want)): 8 want_dict[want[i]] = number[i] 9 10 for i in discount[:10]: 11 if i in want_dict: 12 want_dict[i] -= 1 13 14 for i in range(0, len(discount)-9): 15 if all(map(lambda x: x &amp;lt;= 0, want_dict.values())): 16 answer += 1 17 18 if discount[i] in want_dict: 19 want_dict[discount[i]] += 1 20 if i+10 &amp;lt; len(discount) and discount[i+10] in want_dict: 21 want_dict[discount[i+10]] -= 1 22 23 return answer 문제 XYZ마트에서는 회원에 가입하면 10일동안 할인혜택을 받는다 할인하는 제품은 하루에 하나씩만 구매할 수 있다 정현이가 원하는 제품 리스트, 원하는 제품의 수량 리스트, 마트에서 할인하는 제품 리스트가 주어진다 정현이가 원하는 제품을 모두 할인 받을 수 있는 회원 등록 날짜의 수를 구하라 TC input want: [&amp;ldquo;banana&amp;rdquo;, &amp;ldquo;apple&amp;rdquo;, &amp;ldquo;rice&amp;rdquo;, &amp;ldquo;pork&amp;rdquo;, &amp;ldquo;pot&amp;rdquo;]</description></item><item><title>프로그래머스 - 혼자 놀기의 달인 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%ED%98%BC%EC%9E%90_%EB%86%80%EA%B8%B0%EC%9D%98_%EB%8B%AC%EC%9D%B8/</link><pubDate>Mon, 07 Aug 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%ED%98%BC%EC%9E%90_%EB%86%80%EA%B8%B0%EC%9D%98_%EB%8B%AC%EC%9D%B8/</guid><description>1def solution(cards): 2 length = len(cards) 3 visited = [False] * length 4 answer = [] 5 6 for i in range(length): 7 cnt = 0 8 cur = i 9 while not visited[cur-1]: 10 visited[cur-1] = True 11 cur = cards[cur-1] 12 cnt += 1 13 if cnt != 0: 14 answer.append(cnt) 15 16 if len(answer) &amp;lt;= 1: 17 return 0 18 answer.sort(reverse=True) 19 return answer[0]*answer[1] 문제 주어진 배열 cards를 순회한다 cards[i]번째 원소를 방문한다, 이미 방문한 원소인 경우 그만한다 한번 이어서 방문한 원소를 그룹화한다고 할 때, 두 그룹의 원소개수의 곱의 최대값을 구하라 TC input [8,6,3,7,2,5,1,4]</description></item><item><title>프로그래머스 - 연속 수열 합의 개수 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EC%97%B0%EC%86%8D_%EB%B6%80%EB%B6%84_%EC%88%98%EC%97%B4_%ED%95%A9%EC%9D%98_%EA%B0%9C%EC%88%98/</link><pubDate>Sun, 06 Aug 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EC%97%B0%EC%86%8D_%EB%B6%80%EB%B6%84_%EC%88%98%EC%97%B4_%ED%95%A9%EC%9D%98_%EA%B0%9C%EC%88%98/</guid><description>첫번째 풀이 1def solution(elements): 2 result = set() 3 length = len(elements) 4 elements = elements*2 5 for i in range(length): 6 temp = 0 7 for j in range(length): 8 temp += elements[i+j] 9 result.add(temp) 10 11 return len(result) 개선한 풀이 1def solution(elements): 2result = set() 3length = len(elements) 4for i in range(length): 5 temp = 0 6 for j in range(length): 7 temp += elements[(i+j)%length] 8 result.</description></item><item><title>프로그래머스 - 택배상자 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%ED%83%9D%EB%B0%B0%EC%83%81%EC%9E%90/</link><pubDate>Fri, 04 Aug 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%ED%83%9D%EB%B0%B0%EC%83%81%EC%9E%90/</guid><description>1def solution(order): 2 answer = 0 3 length = len(order) 4 stackA = [i for i in range(length, 0, -1)] 5 stackB = [] 6 7 for i in order: 8 while True: 9 if stackA and stackA[-1] == i: 10 stackA.pop() 11 break 12 if stackB and stackB[-1] == i: 13 stackB.pop() 14 break 15 16 if stackB and stackB[-1] &amp;gt; i: 17 return answer 18 19 stackB.append(stackA.pop()) 20 answer += 1 21 22 return answer 문제 원하는 상자 순서를 나타내는 정수배열 order가 주어진다 컨베이어 벨트에 [N&amp;hellip; 3, 2, 1]와 같이 박스가 놓여있다 박스는 1번 상자부터 순차적으로 뺄 수 있다 뺀 상자를 잠깐 보조 컨베이어 벨트에 보관할 수 있다 보조 컨베이어 벨트는 스택과 같이 FILO가 적용된다 순서대로 상자를 싣지 못하면, 그만둔다 박스를 order에 맞게 몇 개까지 실을 수 있는지 구하라 TC input [4, 3, 1, 2, 5]</description></item><item><title>프로그래머스 - 롤케이크 자르기 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EB%A1%A4%EC%BC%80%EC%9D%B4%ED%81%AC_%EC%9E%90%EB%A5%B4%EA%B8%B0/</link><pubDate>Thu, 03 Aug 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EB%A1%A4%EC%BC%80%EC%9D%B4%ED%81%AC_%EC%9E%90%EB%A5%B4%EA%B8%B0/</guid><description>1def solution(topping): 2 answer = 0 3 length = len(topping) 4 toppingA = [] 5 toppingB = [] 6 setA = set() 7 setB = set() 8 9 for i in range(length-1): 10 setA.add(topping[i]) 11 setB.add(topping[length-i-1]) 12 toppingA.append(len(setA)) 13 toppingB.append(len(setB)) 14 15 toppingB = toppingB[::-1] 16 for i in range(length-1): 17 if toppingA[i] == toppingB[i]: 18 answer+=1 19 return answer 문제 롤케이크 위에 올려진 토핑번호의 정수 배열 topping이 주어진다 롤케이크를 잘랐을 때, 두 조각의 토핑 종류를 똑같이 만드는 방법의 수를 구하라 TC input [1, 2, 1, 3, 1, 4, 1, 2]</description></item><item><title>프로그래머스 - 우박수열 정적분 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EC%9A%B0%EB%B0%95%EC%88%98%EC%97%B4_%EC%A0%95%EC%A0%81%EB%B6%84/</link><pubDate>Tue, 01 Aug 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EC%9A%B0%EB%B0%95%EC%88%98%EC%97%B4_%EC%A0%95%EC%A0%81%EB%B6%84/</guid><description>1def solution(k, ranges): 2 answer = [] 3 seq = [k] 4 section = [0] 5 while k &amp;gt; 1: 6 if k%2 == 0: 7 k = k//2 8 else: 9 k = k*3+1 10 seq.append(k) 11 12 for i in range(0, len(seq)-1): 13 a, b = seq[i], seq[i+1] 14 if a &amp;gt; b: 15 a, b = b, a 16 17 section.append((b-a)/2+a) 18 if len(section) != 0: 19 section[-1] += section[-2] 20 21 for i in ranges: 22 a, b = i[0], len(seq)+i[1]-1 23 if a &amp;gt; b: 24 answer.</description></item><item><title>프로그래머스 - 숫자 카드 나누기 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EC%88%AB%EC%9E%90_%EC%B9%B4%EB%93%9C_%EB%82%98%EB%88%84%EA%B8%B0/</link><pubDate>Mon, 31 Jul 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EC%88%AB%EC%9E%90_%EC%B9%B4%EB%93%9C_%EB%82%98%EB%88%84%EA%B8%B0/</guid><description>첫번째 통과한 풀이
1import math 2 3def gcd(a, b): 4 while b &amp;gt; 0: 5 a, b = b, a%b 6 return a 7 8def gcdOfArr(l): 9 result = l[0] 10 for i in range(1, len(l)): 11 result = gcd(result, l[i]) 12 return result 13 14def solution(arrayA, arrayB): 15 a1 = gcdOfArr(arrayA) 16 for i in arrayB: 17 if i % a1 == 0: 18 a1 = 0 19 break 20 a2 = gcdOfArr(arrayB) 21 for i in arrayA: 22 if i % a2 == 0: 23 a2 = 0 24 break 25 return max(a1, a2) 개선한 풀이</description></item><item><title>프로그래머스 - 귤 고르기 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EA%B7%A4_%EA%B3%A0%EB%A5%B4%EA%B8%B0/</link><pubDate>Fri, 28 Jul 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EA%B7%A4_%EA%B3%A0%EB%A5%B4%EA%B8%B0/</guid><description>1def solution(k, tangerine): 2 D = {} 3 for i in tangerine: 4 if i in D: 5 D[i] += 1 6 else: 7 D[i] = 1 8 D = sorted(D.items(), key=lambda x: -x[1]) 9 answer = 0 10 for _, num in D: 11 k -= num 12 answer += 1 13 if k &amp;lt;= 0: 14 break 15 16 return answer 문제 귤의 개수 k와 귤의 개수를 담은 배열 tangerine이 주어진다 귤 k개를 고를 때, 크기가 서로 다른 종류의 수의 최소값을 구하라 TC input k: 6, tangerine: [1, 3, 2, 5, 4, 5, 2, 3]</description></item><item><title>프로그래머스 - 점 찍기 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EC%A0%90_%EC%B0%8D%EA%B8%B0/</link><pubDate>Thu, 27 Jul 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EC%A0%90_%EC%B0%8D%EA%B8%B0/</guid><description>1import math 2 3def solution(k, d): 4 answer = 0 5 6 for x in range(0, d+1, k): 7 a = math.floor((d**2-x**2)**0.5) // k + 1 8 answer += a 9 10 return answer 문제 2차원 좌표 평면에서 (xk (x=0,1,2,3&amp;hellip;), yk (y=0,1,2,3&amp;hellip;)) 지점에 점을 찍는다 원점과의 거리가 d가 넘으면 점을 찍지 않는다 k와 d가 주어질 때, 점이 총 몇 개 찍히는지 구하라 TC input k:2, d:4
ouput 6</description></item><item><title>프로그래머스 - 디펜스 게임 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EB%94%94%ED%8E%9C%EC%8A%A4_%EA%B2%8C%EC%9E%84/</link><pubDate>Wed, 26 Jul 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EB%94%94%ED%8E%9C%EC%8A%A4_%EA%B2%8C%EC%9E%84/</guid><description>1import heapq 2 3def solution(n, k, enemy): 4 heap = [] 5 cnt = 0 6 for i in enemy: 7 n -= i 8 heapq.heappush(heap, -i) 9 while n &amp;lt; 0: 10 k -= 1 11 if not heap or k &amp;lt; 0: 12 return cnt 13 tmp = -heapq.heappop(heap) 14 n += tmp 15 cnt += 1 16 return cnt 문제 n: 가지고 있는 병사 수 k: 사용할 수 있는 무적권 스킬 수 enemy: 라운드마다 존재하는 적 수의 배열 라운드마다 enemy[i]명 만큼 소모하여 enemy[i]마리의 적을 막을 수 있다 무적권을 적절히 사용하여 버틸 수 있는 최대 라운드 수를 구하라 TC input n: 7, k: 3, enemy: [4, 2, 4, 5, 3, 3, 1]</description></item><item><title>프로그래머스 - 테이블 해시 함수 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%ED%85%8C%EC%9D%B4%EB%B8%94_%ED%95%B4%EC%8B%9C_%ED%95%A8%EC%88%98/</link><pubDate>Tue, 25 Jul 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%ED%85%8C%EC%9D%B4%EB%B8%94_%ED%95%B4%EC%8B%9C_%ED%95%A8%EC%88%98/</guid><description>1def solution(data, col, row_begin, row_end): 2 answer = 0 3 data.sort(key=lambda x: (x[col-1], -x[0])) 4 s = [] 5 for i in range(row_begin-1, row_end): 6 s.append(sum(map(lambda x: x%(i+1), data[i]))) 7 8 for i in s: 9 answer ^= i 10 return answer 문제 해시 함수는 col, row_begin, row_end을 입력으로 받는다 테이블의 튜플을 col번째 컬럼의 값을 기준으로 오름차순 정렬을 하되, 만약 그 값이 동일하면 기본키인 첫 번째 컬럼의 값을 기준으로 내림차순 정렬한다 정렬된 데이터에서 S_i를 i 번째 행의 튜플에 대해 각 컬럼의 값을 i 로 나눈 나머지들의 합으로 정의한다 row_begin ≤ i ≤ row_end 인 모든 S_i를 누적하여 bitwise XOR 한 값을 해시 값으로서 반환하라 TC input data: [[2,2,6],[1,5,10],[4,2,9],[3,8,3]]</description></item><item><title>프로그래머스 - 마법의 엘리베이터 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EB%A7%88%EB%B2%95%EC%9D%98_%EC%97%98%EB%A6%AC%EB%B2%A0%EC%9D%B4%ED%84%B0/</link><pubDate>Mon, 24 Jul 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EB%A7%88%EB%B2%95%EC%9D%98_%EC%97%98%EB%A6%AC%EB%B2%A0%EC%9D%B4%ED%84%B0/</guid><description>첫번째 BFS 풀이 1from collections import deque 2 3def solution(storey): 4 answer = 0 5 q = deque() 6 q.append((storey, 0)) 7 visited = [False] * (10**8+1) 8 9 while q: 10 cur, cnt = q.popleft() 11 12 13 visited[cur] = True 14 while cur != 0 and cur%10 == 0: 15 cur = cur // 10 16 if cur == 0: 17 answer = cnt 18 break 19 for j in [-1, 1]: 20 dest = cur + j 21 if 0 &amp;lt;= dest &amp;lt;= 10**8 and not visited[dest]: 22 q.</description></item><item><title>프로그래머스 - 이모티콘 할인행사 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EC%9D%B4%EB%AA%A8%ED%8B%B0%EC%BD%98_%ED%95%A0%EC%9D%B8%ED%96%89%EC%82%AC/</link><pubDate>Sun, 23 Jul 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EC%9D%B4%EB%AA%A8%ED%8B%B0%EC%BD%98_%ED%95%A0%EC%9D%B8%ED%96%89%EC%82%AC/</guid><description>1result = [] 2 3def dfs(size, percent, users, emoticons): 4 global result 5 6 if len(percent) == size: 7 temp = [0] * len(users) 8 for i in range(size): 9 for j in range(len(users)): 10 if percent[i]*100 &amp;gt;= users[j][0]: 11 temp[j] += emoticons[i]*(1-percent[i]) 12 serviceNum = 0 13 income = 0 14 for i in range(len(users)): 15 if temp[i] &amp;gt;= users[i][1]: 16 serviceNum += 1 17 else: 18 income += temp[i] 19 result.</description></item><item><title>프로그래머스 - 택배 배달과 수거하기 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%ED%83%9D%EB%B0%B0_%EB%B0%B0%EB%8B%AC%EA%B3%BC_%EC%88%98%EA%B1%B0%ED%95%98%EA%B8%B0/</link><pubDate>Fri, 21 Jul 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%ED%83%9D%EB%B0%B0_%EB%B0%B0%EB%8B%AC%EA%B3%BC_%EC%88%98%EA%B1%B0%ED%95%98%EA%B8%B0/</guid><description>1def solution(cap, n, deliveries, pickups): 2 answer = 0 3 tempD = 0 4 tempP = 0 5 for i in range(n-1, -1, -1): 6 tempD += deliveries[i] 7 tempP += pickups[i] 8 9 while tempD &amp;gt; 0 or tempP &amp;gt; 0: 10 tempD -= cap 11 tempP -= cap 12 answer += (i+1)*2 13 return answer 문제 트럭에 실을 수 있는 재활용 택배 상자의 최대개수 cap, 배달할 집의 개수 n 택배 상자의 개수를 담은 deliveries, 재활용 택배 상자의 개수를 담은 pickups가 주어진다 트럭하나로 모든 배달과 수거를 마치고 돌아올 수 있는 최소 이동 거리를 구하라 TC input (cap, n, deliveries, pickups) 4, 5, [1, 0, 3, 1, 2], [0, 3, 0, 4, 0]</description></item><item><title>프로그래머스 - 시소 짝꿍 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EC%8B%9C%EC%86%8C_%EC%A7%9D%EA%BF%8D/</link><pubDate>Thu, 20 Jul 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EC%8B%9C%EC%86%8C_%EC%A7%9D%EA%BF%8D/</guid><description>1def solution(weights): 2 answer = 0 3 wdict = {} 4 5 weights.sort(reverse=True) 6 for i in weights: 7 if i in wdict: 8 answer += wdict[i] 9 if i*3/2 in wdict: 10 answer += wdict[i*3/2] 11 if i*2 in wdict: 12 answer += wdict[i*2] 13 if i*4/3 in wdict: 14 answer += wdict[i*4/3] 15 16 wdict[i] = wdict[i]+1 if i in wdict else 1 17 return answer 문제 시소에는 중심으로부터 2m, 3m, 4m 떨어진 거리에 좌석이 존재한다 양쪽의 탑승한 사람의 무게와 시소 축과 좌석 간의 거리의 곱이 같아서 시소가 평행을 이룬다면 그 둘을 시소 짝꿍이라고 할 수 있다 사람들의 몸무게 배열이 주어질 때, 시소 짝꿍이 몇 쌍 존재하는지 구하라 TC input [100,180,360,100,270]</description></item><item><title>프로그래머스 - 숫자 변환하기 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EC%88%AB%EC%9E%90_%EB%B3%80%ED%99%98%ED%95%98%EA%B8%B0/</link><pubDate>Wed, 19 Jul 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EC%88%AB%EC%9E%90_%EB%B3%80%ED%99%98%ED%95%98%EA%B8%B0/</guid><description>1from collections import deque 2 3def solution(x, y, n): 4 q = deque() 5 visited = [False] * 1000001 6 q.append((x, 0)) 7 8 while q: 9 cx, cnt = q.popleft() 10 if cx == y: 11 return cnt 12 13 if cx + n &amp;lt;= y and not visited[cx+n]: 14 q.append((cx+n, cnt+1)) 15 visited[cx+n] = True 16 if cx * 2 &amp;lt;= y and not visited[cx*2]: 17 q.append((cx*2, cnt+1)) 18 visited[cx*2] = True 19 if cx * 3 &amp;lt;= y and not visited[cx*3]: 20 q.</description></item><item><title>프로그래머스 - 뒤에 있는 큰 수 찾기 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EB%92%A4%EC%97%90_%EC%9E%88%EB%8A%94_%ED%81%B0_%EC%88%98_%EC%B0%BE%EA%B8%B0/</link><pubDate>Tue, 18 Jul 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EB%92%A4%EC%97%90_%EC%9E%88%EB%8A%94_%ED%81%B0_%EC%88%98_%EC%B0%BE%EA%B8%B0/</guid><description>1def solution(numbers): 2 stack = [] 3 answer = [-1] * len(numbers) 4 5 for i in range(len(numbers)): 6 while stack and stack[-1][1] &amp;lt; numbers[i]: 7 answer[stack[-1][0]] = numbers[i] 8 stack.pop() 9 stack.append((i, numbers[i])) 10 print(stack) 11 12 return answer 문제 정수로 이루어진 배열 numbers가 주어진다 자신 보다 뒤에 있는 숫자 중 가장 크면서 가까운 수를 뒷 큰수라고 한다 모든 원소에 대해서 뒷 큰수를 구하여라 (존재하지 않으면 -1) TC input [2, 3, 3, 5]</description></item><item><title>프로그래머스 - 무인도 여행 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EB%AC%B4%EC%9D%B8%EB%8F%84_%EC%97%AC%ED%96%89/</link><pubDate>Mon, 17 Jul 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EB%AC%B4%EC%9D%B8%EB%8F%84_%EC%97%AC%ED%96%89/</guid><description>1from collections import deque 2 3vx = [0, 0, -1, 1] 4vy = [-1, 1, 0, 0] 5 6def solution(maps): 7 N = len(maps) 8 M = len(maps[0]) 9 answer = [] 10 11 visited = [[False]*M for _ in range(N)] 12 13 for i in range(N): 14 for j in range(M): 15 if maps[i][j] != &amp;#39;X&amp;#39; and not visited[i][j]: 16 cnt = 0 17 q = deque() 18 q.append((j, i)) 19 visited[i][j] = True 20 while q: 21 cx, cy = q.</description></item><item><title>프로그래머스 - 호텔 대실 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%ED%98%B8%ED%85%94_%EB%8C%80%EC%8B%A4/</link><pubDate>Sun, 16 Jul 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%ED%98%B8%ED%85%94_%EB%8C%80%EC%8B%A4/</guid><description>1import heapq 2 3def time_calc(time): 4 time_split = time.split(&amp;#39;:&amp;#39;) 5 return int(time_split[0])*60 + int(time_split[1]) 6 7def solution(book_time): 8 time = [] 9 q = [] 10 for start, end in book_time: 11 time.append((time_calc(start), time_calc(end))) 12 time.sort(key=lambda x: x[0]) 13 print (time) 14 for start, end in time: 15 if q: 16 top = heapq.heappop(q) 17 if top &amp;gt; start: 18 heapq.heappush(q, top) 19 heapq.heappush(q, end+10) 20 else: 21 heapq.heappush(q, end+10) 22 return len(q) 문제 호텔의 예약시간이 담긴 2차원 배열이 주어진다 ex) [[&amp;ldquo;12:00&amp;rdquo;, &amp;ldquo;12:30&amp;rdquo;], [&amp;ldquo;15:00&amp;rdquo;, &amp;ldquo;16:00&amp;rdquo;]] 퇴실 시간 10분 이후에 다음 손님이 입실 할 수 있다 최소 객실의 개수를 구하여라 TC input [[&amp;ldquo;15:00&amp;rdquo;, &amp;ldquo;17:00&amp;rdquo;], [&amp;ldquo;16:40&amp;rdquo;, &amp;ldquo;18:20&amp;rdquo;], [&amp;ldquo;14:20&amp;rdquo;, &amp;ldquo;15:20&amp;rdquo;], [&amp;ldquo;14:10&amp;rdquo;, &amp;ldquo;19:20&amp;rdquo;], [&amp;ldquo;18:20&amp;rdquo;, &amp;ldquo;21:20&amp;rdquo;]]</description></item><item><title>프로그래머스 - 미로 탈출 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EB%AF%B8%EB%A1%9C_%ED%83%88%EC%B6%9C/</link><pubDate>Fri, 14 Jul 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EB%AF%B8%EB%A1%9C_%ED%83%88%EC%B6%9C/</guid><description>1from collections import deque 2 3vx = [0, 0, -1, 1] 4vy = [-1, 1, 0, 0] 5 6def bfs(maps, N, M, p1, p2): 7 visited = [[False]*M for _ in range(N)] 8 q = deque() 9 q.append(list(p1)+[0]) 10 11 while q: 12 curY, curX, cnt = q.popleft() 13 14 if p2 == (curY, curX): 15 return cnt 16 17 for i in range(4): 18 x = curX + vx[i] 19 y = curY + vy[i] 20 if 0 &amp;lt;= x &amp;lt; M and 0 &amp;lt;= y &amp;lt; N and not visited[y][x] and maps[y][x] !</description></item><item><title>프로그래머스 - 혼자서 하는 틱택토 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%ED%98%BC%EC%9E%90%EC%84%9C_%ED%95%98%EB%8A%94_%ED%8B%B1%ED%83%9D%ED%86%A0/</link><pubDate>Thu, 13 Jul 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%ED%98%BC%EC%9E%90%EC%84%9C_%ED%95%98%EB%8A%94_%ED%8B%B1%ED%83%9D%ED%86%A0/</guid><description>1V = [[(-1, 0), (1, 0)], [(0, -1), (0, 1)], [(-1, -1), (1, 1)], [(-1, 1), (1, -1)]] 2P = [[(1, 0), (1, 1), (1, 2)], [(0, 1), (1, 1), (2, 1)], [(1, 1)], [(1, 1)]] 3 4def solution(board): 5 answer = -1 6 o_line = 0 7 x_line = 0 8 9 for i, p_list in enumerate(P): 10 for p in p_list: 11 if board[p[0]][p[1]] != &amp;#39;.&amp;#39; and board[p[0]][p[1]]== board[p[0]+V[i][0][0]][p[1]+V[i][0][1]] == board[p[0]+V[i][1][0]][p[1]+V[i][1][1]]: 12 if board[p[0]][p[1]] == &amp;#39;O&amp;#39;: 13 o_line += 1 14 elif board[p[0]][p[1]] == &amp;#39;X&amp;#39;: 15 x_line += 1 16 17 o_cnt = 0 18 x_cnt = 0 19 20 21 for i in &amp;#39;&amp;#39;.</description></item><item><title>프로그래머스 - 당구 연습 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EB%8B%B9%EA%B5%AC_%EC%97%B0%EC%8A%B5/</link><pubDate>Wed, 12 Jul 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EB%8B%B9%EA%B5%AC_%EC%97%B0%EC%8A%B5/</guid><description>1def solution(m, n, startX, startY, balls): 2 answer = [] 3 for bx, by in balls: 4 tmp = [] 5 for x, y in [(-1*startX, startY), (startX, -1*startY), (startX, 2*n-startY), (2*m-startX, startY)]: 6 if bx==x and (y &amp;lt; 0 &amp;lt; by &amp;lt; startY or startY &amp;lt; by &amp;lt; n &amp;lt; y): 7 continue 8 if by==y and (x &amp;lt; 0 &amp;lt; bx &amp;lt; startX or startX &amp;lt; bx &amp;lt; m &amp;lt; x): 9 continue 10 tmp.</description></item><item><title>프로그래머스 - 리코쳇 로봇 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EB%A6%AC%EC%BD%94%EC%B3%87_%EB%A1%9C%EB%B4%87/</link><pubDate>Tue, 11 Jul 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EB%A6%AC%EC%BD%94%EC%B3%87_%EB%A1%9C%EB%B4%87/</guid><description>1from collections import deque 2visited = [] 3vx = [0, 0, -1, 1] 4vy = [-1, 1, 0, 0] 5 6def bfs(board, N, M, sp): 7 global visited 8 q = deque() 9 q.append(sp+[1]) 10 11 while q: 12 cy, cx, cnt = q.popleft() 13 visited[cy][cx] = True 14 for i in range(4): 15 x = cx 16 y = cy 17 while True: 18 x += vx[i] 19 y += vy[i] 20 if not (0 &amp;lt;= x &amp;lt; N and 0 &amp;lt;= y &amp;lt; M) or board[y][x] == &amp;#39;D&amp;#39;: 21 x -= vx[i] 22 y -= vy[i] 23 break 24 if board[y][x] == &amp;#39;G&amp;#39;: 25 return cnt 26 if not visited[y][x]: 27 q.</description></item><item><title>프로그래머스 - 광물 캐기 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EA%B4%91%EB%AC%BC_%EC%BA%90%EA%B8%B0/</link><pubDate>Mon, 10 Jul 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EA%B4%91%EB%AC%BC_%EC%BA%90%EA%B8%B0/</guid><description>1def solution(picks, minerals): 2 bundles = [] 3 tmp = [0, 0, 0] 4 DATA = [[1, 1, 1], [5, 1, 1], [25, 5, 1]] 5 answer = 0 6 7 for i in range(len(minerals)): 8 if minerals[i] == &amp;#34;diamond&amp;#34;: 9 for j in range(3): 10 tmp[j] += DATA[j][0] 11 elif minerals[i] == &amp;#34;iron&amp;#34;: 12 for j in range(3): 13 tmp[j] += DATA[j][1] 14 elif minerals[i] == &amp;#34;stone&amp;#34;: 15 for j in range(3): 16 tmp[j] += DATA[j][2] 17 18 if (i+1) % 5 == 0 or i == len(minerals)-1: 19 bundles.</description></item><item><title>프로그래머스 - 과제 진행하기 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EA%B3%BC%EC%A0%9C_%EC%A7%84%ED%96%89%ED%95%98%EA%B8%B0/</link><pubDate>Fri, 07 Jul 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EA%B3%BC%EC%A0%9C_%EC%A7%84%ED%96%89%ED%95%98%EA%B8%B0/</guid><description>내 답안 1def solution(plans): 2 q = [] 3 answer = [] 4 for plan in plans: 5 h, m = map(int, plan[1].split(&amp;#39;:&amp;#39;)) 6 plan[1] = h*60 + m 7 plan[2] = int(plan[2]) 8 plans.sort(key = lambda x: x[1]) 9 10 for plan in plans: 11 if q: 12 free_time = plan[1] - q[-1][1] 13 while q: 14 q[-1][2] -= free_time 15 free_time = -1 * q[-1][2] 16 17 print (free_time, q[-1][2]) 18 if free_time &amp;lt; 0: 19 break 20 21 if q[-1][2] &amp;lt;= 0: 22 answer.</description></item><item><title>프로그래머스 - 연속된 부분 수열의 합 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EC%97%B0%EC%86%8D%EB%90%9C_%EB%B6%80%EB%B6%84_%EC%88%98%EC%97%B4%EC%9D%98_%ED%95%A9/</link><pubDate>Thu, 06 Jul 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EC%97%B0%EC%86%8D%EB%90%9C_%EB%B6%80%EB%B6%84_%EC%88%98%EC%97%B4%EC%9D%98_%ED%95%A9/</guid><description>1def solution(sequence, k): 2 answer = [] 3 e = len(sequence)-1 4 s = len(sequence) 5 cur = 0 6 7 while s &amp;gt;= 0: 8 if cur &amp;lt; k: 9 s -= 1 10 cur += sequence[s] 11 elif cur &amp;gt; k: 12 cur -= sequence[e] 13 e -= 1 14 else: 15 answer.append((s, e)) 16 s -= 1 17 cur += sequence[s] 18 answer.sort(key=lambda x: (x[1]-x[0], x[0])) 19 return answer[0] 문제 수열과 k가 주어진다 수열의 부분합이 k가 되게 하는 시작인덱스와 끝인덱스를 구하라 이때, 길이가 짧은 수열을 찾는다, 길이가 같은것이 여러가지라면 시작인덱스가 작은 것을 찾는다 TC input [1, 2, 3, 4, 5], 7</description></item><item><title>프로그래머스 - 두 원 사이의 정수 쌍 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EB%91%90_%EC%9B%90_%EC%82%AC%EC%9D%B4%EC%9D%98_%EC%A0%95%EC%88%98_%EC%8C%8D/</link><pubDate>Wed, 05 Jul 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EB%91%90_%EC%9B%90_%EC%82%AC%EC%9D%B4%EC%9D%98_%EC%A0%95%EC%88%98_%EC%8C%8D/</guid><description>1import math 2 3def calc1(r): 4 result = 0 5 for i in range(1, r): 6 result += math.floor(math.sqrt(r**2 - i**2)) 7 return result*4 + r*4 + 1 8 9def calc2(r): 10 result = 0 11 for i in range(1, r): 12 a = math.sqrt(r**2 - i**2) 13 result += math.floor(a) 14 if a % 1 == 0: 15 result -= 1 16 return result*4 + r*4 + 1 17 18def solution(r1, r2): 19 return calc1(r2)-calc2(r1)+4 문제 두 원의 반지름 r1, r2가 주어진다.</description></item><item><title>프로그래머스 - 요격 시스템 (L2)</title><link>https://bong-u.github.io/til/algorithm/pgs_%EC%9A%94%EA%B2%A9_%EC%8B%9C%EC%8A%A4%ED%85%9C/</link><pubDate>Tue, 04 Jul 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/algorithm/pgs_%EC%9A%94%EA%B2%A9_%EC%8B%9C%EC%8A%A4%ED%85%9C/</guid><description>1def solution(targets): 2 answer = 0 3 targets.sort(key=lambda x:x[1]) 4 cur = 0 5 6 for i in targets: 7 if i[0] &amp;gt;= cur: 8 answer += 1 9 cur = i[1] 10 11 return answer 문제 개구간 (s, e)의 리스트가 주어진다. 이때, 모든 개구간을 포함하는 최소 숫자의 수를 구하여라 TC input [[4,5],[4,8],[10,14],[11,13],[5,12],[3,7],[1,4]]
ouput 3
해결방법 개구간을 (s, e)에서 e를 정렬하여 해결하였다.</description></item></channel></rss>
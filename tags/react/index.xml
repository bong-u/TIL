<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>React on bong-u/til</title><link>https://bong-u.github.io/til/tags/react/</link><description>Recent content in React on bong-u/til</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 27 May 2024 00:00:00 +0900</lastBuildDate><atom:link href="https://bong-u.github.io/til/tags/react/index.xml" rel="self" type="application/rss+xml"/><item><title>프론트엔드(react) 면접 준비</title><link>https://bong-u.github.io/til/javascript/react_interview/</link><pubDate>Mon, 27 May 2024 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/javascript/react_interview/</guid><description>React의 특징 Component 기반 Virtual DOM JSX 단방향 데이터 흐름 생명주기 메소드 Hooks DOM HTML element를 tree형태로 표현한 것
Virtual DOM DOM을 직접 조작하지 않고, 가상의 DOM을 만들어서 조작한 후, 실제 DOM과 비교하여 변경된 부분만 업데이트하는 방식
Diffing : 이전 Virtual DOM과 현재 Virtual DOM을 비교 Reconciliation : 변경된 부분만 실제 DOM에 반영 Batch Update : 여러 개의 변경사항을 한번에 업데이트 React Component Class Component 생명주기 메소드를 포함 상속을 통해 Component를 생성 mutable state를 가질 수 있음 Functional Component immutable하다 stateless Hooks를 사용 LifeCycle Method Mounting constructor : 컴포넌트 생성자 static getDerivedStateFromProps : props로 state를 설정 render : 컴포넌트 렌더링 componentDidMount : 컴포넌트가 마운트된 직후 Updating static getDerivedStateFromProps : props로 state를 설정 shouldComponentUpdate : 컴포넌트 업데이트 여부 결정 render : 컴포넌트 렌더링 getSnapshotBeforeUpdate : 컴포넌트 업데이트 직전 componentDidUpdate : 컴포넌트 업데이트 직후 Unmounting componentWillUnmount : 컴포넌트가 언마운트되기 직전 React Hooks 함수형 컴포넌트에서 state와 생명주기 메소드를 사용할 수 있게 해주는 기능</description></item><item><title>React - 로그인 상태와 중첩 라우팅</title><link>https://bong-u.github.io/til/javascript/react_utilize_router/</link><pubDate>Sat, 12 Aug 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/javascript/react_utilize_router/</guid><description>배경 학부연구생 업무 중에, 로그인 여부에 따라 다른 페이지를 보여주는 기능을 구현해야 했다. 로그인을 하지 않았을때는 &amp;ldquo;/login&amp;quot;으로, 로그인을 했을 때는 &amp;ldquo;/&amp;ldquo;으로 리다이렉트 했다 path가 달라도 공통적으로 적용되는 레이아웃은 중첩 라우팅을 이용하여 구현했다 구조는 다음과 같다 코드 Router.js
1&amp;lt;BrowserRouter&amp;gt; 2 &amp;lt;Routes&amp;gt; 3 &amp;lt;!-- isAuthorized를 prop으로 넘겨서 이미 login한 경우 redirect --&amp;gt; 4 &amp;lt;Route 5 path=&amp;#34;/login&amp;#34; 6 element={&amp;lt;Login isAuthorized={isAuthorized} /&amp;gt;} 7 /&amp;gt; 8 &amp;lt;!-- 로그인을 하지 않았는데 &amp;#34;/&amp;#34;로 접근시 redirect --&amp;gt; 9 {!</description></item><item><title>React - build 이후 빈 화면만 나오는 문제</title><link>https://bong-u.github.io/til/javascript/react_deploy_issue/</link><pubDate>Thu, 19 Jan 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/javascript/react_deploy_issue/</guid><description>build 결과물을 돌리면 빈 화면만 나오는 문제 static files 로딩에 성공했는지 확인하자 문제가 있다면 index.html의 경로를 수정하자 react-router를 사용하고 있다면 url을 확인하자 deploy할때 root url이 아니라면 router에 basename을 추가해줘야한다. 1&amp;lt;Router basename=&amp;#34;/index&amp;#34;&amp;gt;...&amp;lt;/Router&amp;gt;</description></item><item><title>React - environment variable 설정하기</title><link>https://bong-u.github.io/til/javascript/react_env_var/</link><pubDate>Thu, 19 Jan 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/javascript/react_env_var/</guid><description> 프로그램이 개발/배포 상황에 따라 변수를 달리해야 할 때가 있다. 이때 react에서는 .env.development , .env.production 파일을 만들어서 환경변수를 쉽게 관리할 수 있다. react는 앞에 &amp;lsquo;REACT_APP&amp;rsquo; 을 붙여야 인식이 된다고한다. 설정 .env.development 1REACT_APP_HOST=localhost .env.production 1REACT_APP_HOST=192.168.0.1 사용 1${process.env.REACT_APP_HOST}</description></item><item><title>React - useEffect 사용법</title><link>https://bong-u.github.io/til/javascript/react_useeffect/</link><pubDate>Thu, 19 Jan 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/javascript/react_useeffect/</guid><description> component가 rendering 될 때 실행 1useEffect(()=&amp;gt; { 2 ... 3}); component가 mount 될 때 (처음 rendering 될 때) 실행 1useEffect(()=&amp;gt; { 2 ... 3}, []); component가 update 될 때 (props, states가 바뀔 때) 실행 1useEffect(()=&amp;gt; { 2 ... 3}, [{ props or states }]); component가 unmount 될 때 또는 update되기 직전에 실행 1useEffect(()=&amp;gt; { 2 return () =&amp;gt; { 3 ... 4 }; 5}, []);</description></item><item><title>React - column을 기준으로 정렬하기</title><link>https://bong-u.github.io/til/javascript/react_table_sort/</link><pubDate>Tue, 17 Jan 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/javascript/react_table_sort/</guid><description>Table에 있는 데이터들을 column별로 정렬해야 한다 데이터의 형식에 따라 comparator를 따로 구현하였다 1const comparatorStr = (a, b, order) =&amp;gt; { 2 if (order === Order.ASC) return a.localeCompare(b); 3 return b.localeCompare(a); 4}; 5 6const comparatorInt = (a, b, order) =&amp;gt; { 7 if (order === Order.ASC) return a &amp;gt; b ? 1 : -1; 8 return a &amp;lt; b ? 1 : -1; 9}; 정렬할 키나 순서가 바뀔때 마다 정렬을 수행한다 1useEffect(() =&amp;gt; { 2 if (sortBy === Key.</description></item></channel></rss>
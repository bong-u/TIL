<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Software Engineering on bong-u/til</title><link>https://bong-u.github.io/til/tags/software-engineering/</link><description>Recent content in Software Engineering on bong-u/til</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 03 Jan 2024 00:00:00 +0900</lastBuildDate><atom:link href="https://bong-u.github.io/til/tags/software-engineering/index.xml" rel="self" type="application/rss+xml"/><item><title>[모각코24동계] 01 : 결과</title><link>https://bong-u.github.io/til/mogako/mogako24-1-01/</link><pubDate>Wed, 03 Jan 2024 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/mogako/mogako24-1-01/</guid><description>1. Agile 방법론 Agile 선언문 사람과 상호작용 &amp;gt; 프로세스와 도구 작동하는 소프트웨어 &amp;gt; 포괄적인 문서 고객과의 협력 &amp;gt; 계약 협상 변화에 대한 대응 &amp;gt; 계획을 따르기 Agile 12가지 원칙 초기부터 지속적으로 고객을 만족 요구사항 변경 수용 짧은 배포 주기 기획자와 개발자의 협업 동기부여된 팀원들로 팀빌딩 얼굴보고 대화하기 동작되는 소프트웨어로 진척 측정 지속 가능한 개발 속도 유지 좋은 기술로 좋은 설계하기 단순성 : 필요없는 일 최소화하기 자기조직화 팀 정기적으로 효율성을 향상시키기 Self-Organizing Team (자기조직화 팀) 스스로 작업을 수행하고 프로세스를 관리하며 진행 상황을 모니터링하는 방법을 스스로 결정하는 팀</description></item><item><title>소프트웨어공학</title><link>https://bong-u.github.io/til/school/software_engineering/</link><pubDate>Tue, 24 Oct 2023 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/school/software_engineering/</guid><description>1장 소프트웨어 공학 개요 소프트웨어의 종류 주문형, 패키지형, 임베디드 시스템 실시간 소프트웨어, 자료처리 소프트웨어 소프트웨어 공학의 정의 IEEE : 소프트웨어의 개발, 운용, 유지보수 및 파기에 대한 체계적인 접근 W.Humphrey : 질 좋은 소프트웨어를 경제적으로 생산하기 위하여 공학, 과학, 수학적 원리에 의하여 소프트웨어를 개발해야한다 소프트웨어 품질 (효-용-신-유-재-) 효율성(efficiency) 사용용이성(usability) 신뢰성(reliability) 유지보수성(maintainability) 재사용성(reusability) 소프트웨어 프로젝트 작업 요구분석과 명세화 도메인 분석, 문제 정의, 요구 추출, 요구 분석, 요구 명세화 설계 : 가용한 기술로 어떻게 구현되어야하는지 기술 시스템 엔지니어링, 소프트웨어 아키텍쳐 UI 설계, DB 설계 모델링 : 도메인이나 소프트웨어의 표현을 만들어 나가는 과정 유스케이스 모델링 정적 모델링, 동적 모델링, 행위 모델링 프로그래밍 품질보증 리뷰, 인스펙션, 테스트 배포 프로세스 관리 2장 소프트웨어 프로세스 폭포수 모델 (Waterfall Model) 각 단계가 다음 시작 전에 끝나야 함 -&amp;gt; 느림 프로토타입과 재사용의 기회가 줄어듦 프로토타입 모델 (Prototyping Model) 인간-기계 상호작용 프로토타입 프로토타입을 만든다 - 프로토타입을 평가한다 점증적 모델 (Incremental Model) 점증적 방법: 기능별로 릴리즈 반복적 방법: 릴리즈 할때마다 기능의 완성도를 높인다 기능이 부족하더라도 빨리 릴리즈 가능 나선형 모델 (Spiral Model) 진화 단계 계획 수립 위험 분석 개발 평가 반복적인 개발 및 테스트 -&amp;gt; 강인성 향상 관리, 위험 분석이 중요 진화적 모델 (Evolutionary Model) 초기에 요구사항을 파악하기 힘들고 구현이 어려운 경우, 요구사항 분석을 한 번이상 반복 UP (Unified Process) 도입 단계 : 프로젝트의 범위를 설정, 목표를 명확히 정련 단계 : 요구를 찾아내어 설계를 완성 구축 단계 : 제조 단계, 요구의 테스트 마무리 전환 단계 : 릴리즈 애자일 프로세스 (Agile Process) 특징 짧은 릴리즈와 반복 점증적 설계 사용자 참여 문서 최소화 비공식적 커뮤니케이션 요구와 환경의 변화를 가정 익스트림 프로그래밍 (eXtreme Pragramming) 애자일 방법론 중 하나 Planning : 요구사항을 작은 요소로 분할 Analysis Design Execution : Coding, Testing Wrapping : small release, process improvement Closure : launch 스크럼 (Scrum) 조직적으로 애자일 방법론을 적용</description></item></channel></rss>
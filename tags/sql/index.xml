<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SQL on bong-u/til</title><link>https://bong-u.github.io/til/tags/sql/</link><description>Recent content in SQL on bong-u/til</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 09 May 2024 00:00:00 +0900</lastBuildDate><atom:link href="https://bong-u.github.io/til/tags/sql/index.xml" rel="self" type="application/rss+xml"/><item><title>SQLD 대비 정리</title><link>https://bong-u.github.io/til/school/sqld/</link><pubDate>Thu, 09 May 2024 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/school/sqld/</guid><description>과목 1 : 데이터 모델링의 이해 데이터 모델링을 할때 유의 사항 중복 : 여러 장소에 같은 정보 X 비유연성 : 데이터의 정의와 사용 프로세스를 분리 -&amp;gt; 데이터가 적게 변화되도록 비일관성 : 데이터 간의 상호 연관관계를 명확히 정의 데이터 모델링의 종류 개념적 데이터 모델링 물리적 데이터 모델링 데이터 베이스 모델링의 특징 추상화, 단순화, 명확화
데이터베이스 스키마의 구조 외부 스키마 : 사용자 관점의 데이터베이스 구조 개념 스키마 : 전체 데이터베이스의 논리적 구조 내부 스키마 : 물리적 저장장치에 대한 데이터베이스 구조 엔터티의 특징 반드시 해당 업무에서 필요하고 관리하고자 하는 정보여야한다.</description></item><item><title>[모각코24동계] 05 : 결과</title><link>https://bong-u.github.io/til/mogako/mogako24-1-05/</link><pubDate>Tue, 30 Jan 2024 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/mogako/mogako24-1-05/</guid><description>임시 테이블 지역 임시 테이블 (Local Temporary Table) 현재 connection에서만 사용 가능하다 해당 connection이 종료되면 테이블이 자동으로 삭제된다 테이블 이름 앞에 #를 붙여 사용한다 전역 임시 테이블 (Global Temporary Table) 다른 connection에서도 사용 가능하다 마지막 connection이 종료되면 테이블이 사라진다 테이블 이름 앞에 ##를 붙여 사용한다 생성하는 방법 1 - CREATE 사용 1CREATE TABLE #temp ( 2 id INT, 3 name VARCHAR(20) 4) 생성하는 방법 2 - SELECT INTO 사용 1SELECT * 2INTO #temp 3FROM table 특징 인덱스, 제약 조건 등은 복사되지 않는다 SELECT할때 ORDER BY를 사용해도 정렬된 순서대로 저장되지 않는다 LOCK 배타적 잠금 (Exclusive Lock, X) 하나의 특정 트랜잭션만 해당 리소스에 접근할 수 있다</description></item><item><title>[모각코24동계] 04 : 결과</title><link>https://bong-u.github.io/til/mogako/mogako24-1-04/</link><pubDate>Tue, 23 Jan 2024 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/mogako/mogako24-1-04/</guid><description>Recursive Query 1WITH RECURSIVE CTE AS ( 2 SELECT 0 AS A 3 UNION ALL 4 SELECT A+1 AS NUM 5 FROM CTE 6 WHERE A &amp;lt; 10 # 0 부터 10까지 포함 7) 결과 (CTE테이블) A NUM 0 NULL … … 10 NULL 성능 비교 LIMIT 1 VS 서브쿼리 1SELECT PRODUCT_ID, PRODUCT_NAME, PRODUCT_CD, CATEGORY, PRICE 2FROM FOOD_PRODUCT 3ORDER BY PRICE DESC 4LIMIT 1; 1SELECT * 2FROM FOOD_PRODUCT 3WHERE PRICE IN ( 4 SELECT MAX(PRICE) FROM FOOD_PRODUCT 5); LIMIT 1을 사용하는 쿼리는 모든 COLUMN의 데이터를 가져오고, 서브쿼리는 PRICE의 최대값만 가져와서 구하기 때문에, 테이블이 클수록 서브쿼리가 더 빠르다.</description></item><item><title>[모각코24동계] 03 : 결과</title><link>https://bong-u.github.io/til/mogako/mogako24-1-03/</link><pubDate>Wed, 17 Jan 2024 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/mogako/mogako24-1-03/</guid><description>Sub Query 단일 행 서브 쿼리 서브쿼리 결과 : 단일 행 결과 : 단일 행 1SELECT USER_ID, USER_NAME, USER_AGE 2FROM USERS 3WHERE TEAM_ID = ( 4 SELECT TEAM_ID 5 FROM USERS 6 WHERE USER_NAME=&amp;#39;BONG&amp;#39; 7); 다중 행 서브 쿼리 서브쿼리 결과 : 다중 행 결과 : 단일행 다중 행 비교 연산자와 함께 사용 (IN, ALL, ANY, SOME) 1SELECT TEAM_ID, TEAM_NAME, TEAM_LOGO_URL 2FROM TEAM 3WHERE TEAM_ID IN ( 4 SELECT TEAM_ID 5 FROM USERS 6 WHERE USER_NAME=&amp;#39;BONG&amp;#39; 7) 다중 컬럼 서브 쿼리 서브쿼리의 결과: 다중 행 결과 : 다중 행 1SELECT TEAM_ID, USER_NAME 2FROM USERS 3WHERE (TEAM_ID, HEIGHT) 4IN ( 5 SELECT TEAM_ID, MIN(HEIGHT) 6 FROM USERS 7 GROUP BY TEAM_ID 8) 9ORDER BY TEAM_ID, USER_NAME 연관 서브 쿼리 1SELECT B.</description></item><item><title>[모각코24동계] 02 : 결과</title><link>https://bong-u.github.io/til/mogako/mogako24-1-02/</link><pubDate>Tue, 09 Jan 2024 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/mogako/mogako24-1-02/</guid><description>SQL 기초 공부 DDL (Data Definition Language) CREATE ALTER DROP RENAME TRUNCATE DML (Data Manipulation Language) SELECT INSERT UPDATE DELETE DCL (Data Control Language) GRANT REVOKE TCL (Transaction Control Language) COMMIT ROLLBACK SAVEPOINT SELECT GROUP BY 특정 Column기준으로 그룹화
그룹화 하지 않은 Column은 집계함수(SUM, COUNT)를 통해서만 조회해야한다
1SELECT name, COUNT(name), SUM(quantity) FROM 테이블 GROUP BY name; HAVING GROUP BY 절에서 조건을 주기 위해 사용</description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Testing on bong-u/til</title><link>https://bong-u.github.io/til/tags/testing/</link><description>Recent content in Testing on bong-u/til</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 08 Sep 2024 00:00:00 +0900</lastBuildDate><atom:link href="https://bong-u.github.io/til/tags/testing/index.xml" rel="self" type="application/rss+xml"/><item><title>정적테스트와 동적테스트</title><link>https://bong-u.github.io/til/etc/testing/</link><pubDate>Sun, 08 Sep 2024 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/etc/testing/</guid><description>실행 여부에 따른 테스트의 분류 정적 테스트 동적 테스트 내부 구조를 고려하는지 여부에 따른 테스트의 분류 블랙박스 테스트 화이트박스 테스트 목적과 범위에 따른 테스트의 분류 수행 순서에 따라 작성해보았다. 1. 단위 테스트 (Unit Test) 가장 작은 단위 수준(모듈, 함수, 클래스)의 테스트
2. 통합 테스트 (Integration Test) 모듈을 통합하는 과정에서, 각 모듈 간의 인터페이스와 관련된 결함이 있는지 테스트
Top-down : 상위 모듈부터 하위 모듈로 통합하며 테스트 Bottom-up : 하위 모듈부터 상위 모듈로 통합하며 테스트 Big-bang : 모든 모듈을 한번에 통합하여 테스트 Threads : 중요 모듈을 먼저 구현하고 통합한 뒤, 보조적인 모듈을 구현 후 통합하는 방식 3.</description></item><item><title>Fastapi - 통합테스트 In-Memory DB에서 테이블이 없다는 문제</title><link>https://bong-u.github.io/til/python/fastapi_db_test/</link><pubDate>Mon, 22 Jul 2024 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/python/fastapi_db_test/</guid><description>상황 테커 부트캠프에서 팀프로젝트를 진행 중이다. 단위테스트 코드는 작성이 완료되었고, 통합테스트 코드를 작성 중이다. sqlite in-memory db를 사용해서 테스트 중인데, 테이블이 없다는 에러가 발생했다. 테스트 전에 테이블을 생성하는 코드가 실행됨에도 불구하고, 에러가 발생한다. 인메모리가 아닌 파일로 저장하는 방법을 사용하면 에러가 발생하지 않는 것을 보고 문제의 원인을 파악할 수 있었다. 코드 1from database import Base, engine 2from fastapi.testclient import TestClient 3 4from main import app 5from models import * 6 7# 테이블을 생성하는 코드이다 8Base.</description></item><item><title>[모각코24하계] 04 : 결과</title><link>https://bong-u.github.io/til/mogako/mogako24-2-04/</link><pubDate>Thu, 18 Jul 2024 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/mogako/mogako24-2-04/</guid><description>배경 테커 부트캠프에서 팀프로젝트를 진행 중이다. 현재 비즈니스 로직을 수행하는 함수를 대상으로 Unit Test가 필요하다. Unit Test 코드를 작성하고, Github Actions를 이용하여 자동으로 테스트가 수행되도록 설정하고자 한다. run-pytest.yml 1name: Run pytest 2 3# main 또는 dev 브랜치에 pull request가 발생하면 실행 4on: 5 pull_request: 6 branches: 7 - main 8 - dev 9 10jobs: 11 test: 12 runs-on: ubuntu-latest 13 14 steps: 15 - name: Checkout code 16 uses: actions/checkout@v2 17 18 - name: Set up Python 19 uses: actions/setup-python@v2 20 with: 21 python-version: &amp;#39;3.</description></item><item><title>[모각코24동계] 06 : 결과</title><link>https://bong-u.github.io/til/mogako/mogako24-1-06/</link><pubDate>Wed, 14 Feb 2024 00:00:00 +0900</pubDate><guid>https://bong-u.github.io/til/mogako/mogako24-1-06/</guid><description>테스트 기법 블랙박스 기법 개발자와 사용자들의 결험을 바탕으로 기능적 혹은 비기능적 테스트 케이스를 도출하고 선택하는 방법
명세 기반 기법과 경험 기반 기법을 포함 화이트박스 기법 컴포넌트 또는 시스템의 내부 구조를 중심으로 테스트를 도출하는 방법
구조 기반 기법 포함 명세 기반 기법 특징 해결할 문제를 명세하기 위해 모델을 사용한다 모델에서 테스트 케이스를 시스템적으로 도출하는 것이 가능하다 종류 동등 분할 경계값 분석 결정테이블 테스팅 상태전이 테스팅 유즈케이스 테스팅 경험 기반 기법 특징 테스트 관련 인력의 지식이나 경험으로 테스트 케이스를 도출한다 종류 탐색적 테스팅 오류 추정 체크리스트 구조 기반 기법 특징 코드와 개발 설계 등의 소프트웨어 구현 정보를 기반으로 테스트 케이스를 도출한다 종류 구문 테스팅과 커버리지 결정 테스팅과 커버리지 조건 / 결정 커버리지 변경 조건/ 결정 커버리지 다중 조건 커버리지</description></item></channel></rss>